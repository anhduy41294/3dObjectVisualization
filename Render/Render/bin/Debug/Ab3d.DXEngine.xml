<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ab3d.DXEngine</name>
    </assembly>
    <members>
        <member name="T:Ab3d.DirectX.ICamera">
            <summary>
            ICamera is base interface that defines a 3D camera in DXEngine
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.ParentDXScene">
            <summary>
            Gets or sets the DXScene that this camera belong to.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.ParentSceneNode">
            <summary>
            Gets or sets a parent SceneNode that can be used to adjust the camera's View matrix with the SceneNode's world matrix.
            This can be used to animate the camera with SceneNode.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.View">
            <summary>
            Gets the camera's view matrix.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.Projection">
            <summary>
            Gets the camera's projection matrix.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.ProjectionType">
            <summary>
            Gets type of projection (Perspective or Orthographic)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.AspectRatio">
            <summary>
            Gets or sets the camera's aspect ratio - calculated as viewport's width / height.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.NearPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's near clip plane.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ICamera.FarPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's far clip plane.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.ICamera.CameraChanged">
            <summary>
            CameraChanged event occurs after the camera was changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ICamera.GetCameraPosition">
            <summary>
            Returns the current position of the camera.
            </summary>
            <returns>the current position of the camera as Vector3</returns>
        </member>
        <member name="M:Ab3d.DirectX.ICamera.GetViewProjection">
            <summary>
            Gets a precalculated View * Projection matrix.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ICamera.GetWorldViewProjection(SharpDX.Matrix@)">
            <summary>
            Returns WorldViewProjection matrix.
            Calculating this matrix is faster inside Camera because here we can access matrixes by reference.
            </summary>
            <param name="world">World matrix</param>
            <returns>WorldViewProjection matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.ICamera.Update(System.Boolean)">
            <summary>
            Update method updates the camera matrices when needed (when there were any change in the camera properties) or when forceMatrixUpdate is set to true.
            </summary>
            <param name="forceMatrixUpdate">when true, than camera matrices are recalculated regardless if there were any changes in camera properties or not</param>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.IDistanceCamera">
            <summary>
            IDistanceCamera interface defines the Distance property
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.IDistanceCamera.Distance">
            <summary>
            Gets or sets a distance from the camera to the target position
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.ILeftRightHandedCoordinateSystem">
            <summary>
            When ILeftRightHandedCamera interface is used it specifies if left or right handed coordinate system is used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.ILeftRightHandedCoordinateSystem.IsRightHandedCoordinateSystem">
            <summary>
            When true than right handed coordinate system is used (as in WPF 3D, XNA and OpenGL), if false than left handed coordinate system are used (as in DirectX).
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.ILookDirectionCamera">
            <summary>
            ILookDirectionCamera is camera that implements GetCameraLookDirection method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.ILookDirectionCamera.GetCameraLookDirection">
            <summary>
            Returns the camera look direction.
            </summary>
            <returns>camera look direction as Vector3</returns>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.IPerspectiveCamera">
            <summary>
            IPerspectiveCamera interface defines the perspective camera with FieldOfView property
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.IPerspectiveCamera.FieldOfView">
            <summary>
            Gets or sets camera's field of view in degres
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.IRotatingCamera">
            <summary>
            IRotatingCamera interface defines a camera that provides rotation animation
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.IRotatingCamera.IsRotating">
            <summary>
            Gets or sets a boolean that specifies if the camera is currently being animated.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.IRotatingCamera.StartRotation(System.Double,System.Double)">
            <summary>
            StartRotation method starts Heading and Attitude animation for this camera.
            </summary>
            <param name="headingChangeInSecond">How many degrees the heading will be changed in one second</param>
            <param name="attitudeChangeInSecond">How many degrees the attitude will be changed in one second</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.IRotatingCamera.StopRotation">
            <summary>
            StopRotation stops the animation of the camera.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.ISphericalCamera">
            <summary>
            ISphericalCamera interface defines a camera where the look direction is defined by Heading, Attitude and Bank angles.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.ISphericalCamera.Heading">
            <summary>
            Heading angle (rotation around up axis) in degrees.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.ISphericalCamera.Attitude">
            <summary>
            Attitude angle (rotation around horizontal axis) in degrees.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.ISphericalCamera.Bank">
            <summary>
            Bank angle (rotation around look direction vector) in degrees.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.ITargetPositionCamera">
            <summary>
            ILookDirectionCamera is camera that implements GetCameraTargetPosition method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.ITargetPositionCamera.GetCameraTargetPosition">
            <summary>
            Returns the camera look position.
            </summary>
            <returns>camera look position as Vector3</returns>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.MatrixCamera">
            <summary>
            MatrixCamera is a simple camera that provides the View and Projection matrixes.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.ParentDXScene">
            <summary>
            Gets or sets the DXScene that this camera belong to.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.ParentSceneNode">
            <summary>
            Gets or sets a parent SceneNode that can be used to adjust the camera's View matrix with the SceneNode's world matrix.
            This can be used to animate the camera with SceneNode.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.View">
            <summary>
            Gets the camera's view matrix.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.Projection">
            <summary>
            Gets the camera's projection matrix.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.AspectRatio">
            <summary>
            Gets or sets the camera's aspect ration - calculated as viewport's width / height.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.ProjectionType">
            <summary>
            Gets type of projection (Perspective or Orthographic)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.NearPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's near clip plane.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.MatrixCamera.FarPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's far clip plane.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Cameras.MatrixCamera.CameraChanged">
            <summary>
            CameraChanged event occurs after the camera was changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.#ctor(SharpDX.Matrix,SharpDX.Matrix)">
            <summary>
            Constructor
            </summary>
            <param name="view">view matrix</param>
            <param name="projection">projection matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.Update(System.Boolean)">
            <summary>
            Update method updates the camera matrices when needed (when there were any change in the camera properties) or when forceMatrixUpdate is set to true.
            </summary>
            <param name="forceMatrixUpdate">when true, than camera matrices are recalculated regardless if there were any changes in camera properties or not</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.GetCameraPosition">
            <summary>
            Gets the camera's position. 
            The position is calculating with inverting the view matrix and extracting the values from 4th row.
            The invert operation can be skipped with calling <see cref="M:Ab3d.DirectX.Cameras.MatrixCamera.SetCameraPosition(SharpDX.Vector3)"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.SetCameraPosition(SharpDX.Vector3)">
            <summary>
            Sets camera's position. This prevents calling invert on view matrix when the <see cref="M:Ab3d.DirectX.Cameras.MatrixCamera.GetCameraPosition"/> is called.
            This method should be called after setting View matrix.
            </summary>
            <param name="cameraPosition">Vector3 as camera position</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.GetViewProjection">
            <summary>
            Gets a pre-calculated View * Projection matrix.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.GetWorldViewProjection(SharpDX.Matrix@)">
            <summary>
            Returns WorldViewProjection matrix.
            Calculating this matrix is faster inside Camera because here we can access matrixes by reference.
            </summary>
            <param name="world">World matrix</param>
            <returns>WorldViewProjection matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.SetViewMatrix(SharpDX.Matrix@)">
            <summary>
            SetViewMatrix can be called by the derived class to change the view matrix.
            </summary>
            <param name="viewMatrix">view matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.SetProjectionMatrix(SharpDX.Matrix@)">
            <summary>
            SetProjectionMatrix can be called by the derived class to change the projection matrix.
            </summary>
            <param name="projectionMatrix">projection matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.MatrixCamera.OnCameraChanged">
            <summary>
            OnCameraChanged is called when the camera is changed and triggers the CameraChanged event.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.ProjectionType">
            <summary>
            ProjectionType defines possible types of camera projection.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Cameras.ProjectionType.Perspective">
            <summary>
            Perspective projection
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Cameras.ProjectionType.Orthographic">
            <summary>
            Orthographic projection
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.StereoscopicCamera">
            <summary>
            StereoscopicCamera is a camera that warps another camera (<see cref="P:Ab3d.DirectX.Cameras.StereoscopicCamera.OriginalCamera"/>) and provides properties that allow using
            the camera for stereoscopic rendering with different camera for left and for right eye.
            The current eye is defined by <see cref="P:Ab3d.DirectX.Cameras.StereoscopicCamera.CurrentEye"/> property. 
            The differences of the left and right cameras are defined by <see cref="P:Ab3d.DirectX.Cameras.StereoscopicCamera.EyeSeparation"/>, <see cref="P:Ab3d.DirectX.Cameras.StereoscopicCamera.Parallax"/> and <see cref="P:Ab3d.DirectX.Cameras.StereoscopicCamera.InvertLeftRightView"/> properties.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.OriginalCamera">
            <summary>
            Gets the camera that is used to create the StereoscopicCamera.
            The original camera is located in the middle between left and right eye.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.ParentDXScene">
            <summary>
            Gets or sets a ParentDXScene property of the OriginalCamera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.ParentSceneNode">
            <summary>
            Gets a ParentSceneNode property of the OriginalCamera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.ProjectionType">
            <summary>
            Gets a ProjectionType property of the OriginalCamera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.AspectRatio">
            <summary>
            Gets or sets an AspectRatio property of the OriginalCamera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.NearPlaneDistance">
            <summary>
            Gets or sets a NearPlaneDistance property of the OriginalCamera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.FarPlaneDistance">
            <summary>
            Gets or sets a FarPlaneDistance property of the OriginalCamera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.View">
            <summary>
            Gets a View matrix for the current eye.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.Projection">
            <summary>
            Gets a Projection matrix for the current eye.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.CurrentEye">
            <summary>
            Gets or sets the current eye for the camera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.EyeSeparation">
            <summary>
            Gets or sets a distance between left and right eye. The distance is specified in the same coordinate system as the camera.
            When rendering, the camera is first shifter to the left for the half of the EyeSeparation distance. Then the whole scene is rendered.
            The the camera is shifter to the right for half of the EyeSeparation distance.
            The best value for EyeSeparation is based on the size of objects in the scene, the size of the Viewport3D, monitor DPI settings and the actual distance between eyes of the user.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.Parallax">
            <summary>
            Parallax defines a value in degrees that specifies an angle of the left and right eye look direction.
            If the parallax is zero, then the look directions of left and right cameras are parallel.
            If parallax is bigger then zero, then the left and right look directions are pointed to each other and they cross at some position in front of the camera (the bigger the angle the closer the crossing point).
            Usually the best 3D effect is producted when the parallax is set so that the look directions cross at the center of the scene - look directions of human eyes cross at the point of focus.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.StereoscopicCamera.InvertLeftRightView">
            <summary>
            Gets or sets a Boolean that specifies if positions of the eyes are inverted.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Cameras.StereoscopicCamera.CameraChanged">
            <summary>
            CameraChanged event of the OriginalCamera.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.StereoscopicCamera.#ctor(Ab3d.DirectX.ICamera)">
            <summary>
            Constructor
            </summary>
            <param name="originalCamera">camera that is wrapped by this StereoscopicCamera</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.StereoscopicCamera.GetCameraPosition">
            <summary>
            Returns eye position for the current eye.
            </summary>
            <returns>eye position</returns>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.StereoscopicCamera.GetViewProjection">
            <summary>
            Gets a precalculated View * Projection matrix.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.StereoscopicCamera.GetWorldViewProjection(SharpDX.Matrix@)">
            <summary>
            Returns WorldViewProjection matrix.
            Calculating this matrix is faster inside Camera because here we can access matrixes by reference.
            </summary>
            <param name="world">World matrix</param>
            <returns>WorldViewProjection matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.StereoscopicCamera.Update(System.Boolean)">
            <summary>
            Update method updates the camera matrices when needed (when there were any change in the camera properties) or when forceMatrixUpdate is set to true.
            </summary>
            <param name="forceMatrixUpdate">when true, than camera matrices are recalculated regardless if there were any changes in camera properties or not</param>
        </member>
        <member name="T:Ab3d.DirectX.Bounds">
            <summary>
            Bounds defines a BoundingBox and also provides IsEmpty property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Bounds.IsEmpty">
            <summary>
            Gets a Booleand that specifies if BoundingBox is empty.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Bounds.BoundingBox">
            <summary>
            Gets a BoundingBox. To set the BoundingBox call the <see cref="M:Ab3d.DirectX.Bounds.SetBoundingBox(SharpDX.BoundingBox,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.#ctor">
            <summary>
            Constructor that creates an empty Bounds
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Bounds.Empty">
            <summary>
            Returns an empty bounds
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.#ctor(SharpDX.BoundingBox)">
            <summary>
            Constructor with specified BoundingBox
            </summary>
            <param name="boundingBox">BoundingBox</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Constructor that is created from specified minimum and maximum positions.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.#ctor(SharpDX.Vector3,System.Single)">
            <summary>
            Constructor that is created from specified sphere's center and sphere's radius.
            </summary>
            <param name="boundingSphereCenter">sphere's center</param>
            <param name="boundingSphereRadius">sphere's radius</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.SetBoundingBox(SharpDX.BoundingBox,System.Boolean)">
            <summary>
            Sets the BoundingBox property value. 
            When checkForEmpty parameter is true, it also checks if the new BoundingBox is empty and sets the <see cref="P:Ab3d.DirectX.Bounds.IsEmpty"/> property accordingly.
            If checkForEmpty parameter is false, then the <see cref="P:Ab3d.DirectX.Bounds.IsEmpty"/> property is set to false.
            To set the BoundingBox to empty value call the <see cref="M:Ab3d.DirectX.Bounds.Clear"/> method.
            </summary>
            <param name="boundingBox">BoundingBox</param>
            <param name="checkForEmpty">true ot check if teh BoundingBox is empty.</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.SetBoundingBox(SharpDX.BoundingBox@,System.Boolean)">
            <summary>
            Sets the BoundingBox property value. 
            When checkForEmpty parameter is true, it also checks if the new BoundingBox is empty and sets the <see cref="P:Ab3d.DirectX.Bounds.IsEmpty"/> property accordingly.
            If checkForEmpty parameter is false, then the <see cref="P:Ab3d.DirectX.Bounds.IsEmpty"/> property is set to false.
            To set the BoundingBox to empty value call the <see cref="M:Ab3d.DirectX.Bounds.Clear"/> method.
            </summary>
            <param name="boundingBox">BoundingBox</param>
            <param name="checkForEmpty">true ot check if teh BoundingBox is empty.</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.Clear">
            <summary>
            Clears the Bounds
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.Add(Ab3d.DirectX.Bounds)">
            <summary>
            Adds another bounds to this bounds
            </summary>
            <param name="boundsToAdd">Bounds</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.Add(SharpDX.Vector3)">
            <summary>
            Adds one Vector3 to this bounds
            </summary>
            <param name="positionToAdd">Vector3</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.Transform(Ab3d.DirectX.Transformation)">
            <summary>
            Transforms the current Bounds with the specifed transformation
            </summary>
            <param name="transformation">transformation</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.Translate(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Sets the out minimum and maximum Vector3D with translating the current bounds with the specified translateVector (the current Bounds value is not changed).
            </summary>
            <param name="translateVector">translateVector</param>
            <param name="minimum">translated minimum</param>
            <param name="maximum">translated maximum</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.ScaleAndTranslate(SharpDX.Matrix@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Sets the out minimum and maximum Vector3D with transforming the current BoundingBox's minimum and maximum value with the specified matrix (the current Bounds value is not changed).
            </summary>
            <param name="matrix">matrix</param>
            <param name="minimum">transformed minimum</param>
            <param name="maximum">transformed maximum</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.TransformAllCorners(SharpDX.Matrix@,SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Sets the out minimum and maximum Vector3D with transforming the current bounds with the specified matrix (the current Bounds value is not changed).
            </summary>
            <param name="matrix">matrix</param>
            <param name="minimum">transformed minimum</param>
            <param name="maximum">transformed maximum</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.Transform(SharpDX.Matrix@)">
            <summary>
            Transforms the current BoundingBox with the specified matrix
            </summary>
            <param name="matrix">matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.GetCenterPosition">
            <summary>
            Returns center position of this Bounds.
            </summary>
            <returns>center position of this Bounds</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.GetSize">
            <summary>
            Returns Vector3 that represents size of the  BoundingBox
            </summary>
            <returns>Vector3 that represents size of the  BoundingBox</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.GetDiagonalLength">
            <summary>
            Returns the length of the BoundingBox diagonal that is the same as distance from Minimum to Maximum positions.
            </summary>
            <returns>length of the BoundingBox diagonal</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.IsSame(Ab3d.DirectX.Bounds)">
            <summary>
            Returns true if this Bounds is same as specified Bounds (using MathUtil.NearEqual to compare the values)
            </summary>
            <param name="bounds">Bounds to compare</param>
            <returns>true if same, otherwise false</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.IsSame(SharpDX.BoundingBox@)">
            <summary>
            Returns true if this Bounds is same as specified BoundingBox (using MathUtil.NearEqual to compare the values)
            </summary>
            <param name="boundingBox">BoundingBox to compare</param>
            <returns>true if same, otherwise false</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.IsEqual(Ab3d.DirectX.Bounds)">
            <summary>
            Returns true if this Bounds is equal as specified Bounds
            </summary>
            <param name="bounds">Bounds to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.IsEqual(SharpDX.BoundingBox@)">
            <summary>
            Returns true if this Bounds is equal as specified BoundingBox
            </summary>
            <param name="boundingBox">BoundingBox to compare</param>
            <returns>true if equal, otherwise false</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.IsBoundingBoxEmpty(SharpDX.BoundingBox@)">
            <summary>
            Returns true if BoundingBox is empty (any component is NaN or if all components are equal)
            </summary>
            <param name="boundingBox">BoundingBox</param>
            <returns>true if BoundingBox is empty</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.Clone">
            <summary>
            Copies this Bounds into another Bounds
            </summary>
            <returns>cloned Bounds</returns>
        </member>
        <member name="M:Ab3d.DirectX.Bounds.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.DXEngineComException">
            <summary>
            DXEngineException exception thrown is thrown when an error occured when calling DirectX COM methods.
            The exception class contains details information about the error in the Descriptor property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXEngineComException.Descriptor">
            <summary>
            Gets the SharpDX.Result with error code.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineComException.#ctor(SharpDX.ResultDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="resultDescriptor">SharpDX.ResultDescriptor</param>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineComException.#ctor(SharpDX.Result)">
            <summary>
            Constructor
            </summary>
            <param name="result">SharpDX.Result from COM error code</param>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineComException.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">COM error code</param>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineComException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineComException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.InvalidDxEngineResourceException">
            <summary>
            InvalidDxEngineResourceException exception is thrown when a Texture2D, Buffer, View or some other resource is not in the expected format or was not created with the expected flags.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.InvalidDxEngineResourceException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.InvalidDxEngineResourceException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Ab3d.DirectX.InvalidDxEngineResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ab3d.DirectX.InvalidDxEngineResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.InputLayoutType">
            <summary>
            InputLayoutType defines the possible components of InputLayout
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InputLayoutType.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InputLayoutType.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InputLayoutType.TextureCoordinate">
            <summary>
            TextureCoordinate
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InputLayoutType.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InputLayoutType.Tangent">
            <summary>
            Tangent
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InputLayoutType.Bitangent">
            <summary>
            Bitangent
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.DisposeHelper">
             <summary>
            DisposeHelper class provides DisposeAndNullify methods that can help dispose and nullify a disposable object.
             </summary>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(System.IDisposable@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.Texture2D@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.RenderTargetView@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.ShaderResourceView@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.BlendState@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.DepthStencilState@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.RasterizerState@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.SamplerState@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.Buffer@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(SharpDX.Direct3D11.DepthStencilView@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.VertexShader}@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.PixelShader}@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.GeometryShader}@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeHelper.DisposeAndNullify(Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.InputLayout}@)">
            <summary>
            DisposeAndNullify first checks if disposableObject is not null and in that case disposed the object and sets it to null.
            </summary>
            <param name="disposableObject"></param>
        </member>
        <member name="T:Ab3d.DirectX.DeviceCreationException">
            <summary>
            DeviceCreationException occurs when the DirectX device cannot be created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCreationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Ab3d.DirectX.FeatureLevelsNotSupportedException">
            <summary>
            FeatureLevelsNotSupportedException occurs when the DirectX 11 device cannot be created because the the adapter (graphics card) does not support the required feature levels.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.FeatureLevelsNotSupportedException.RequiredFeatureLevels">
            <summary>
            FeatureLevels that were required when creating the device.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.FeatureLevelsNotSupportedException.#ctor(System.String,SharpDX.Direct3D.FeatureLevel[],System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="requiredFeatureLevels">array of FeatureLevels that were required when creating the device</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ab3d.DirectX.FeatureLevelsNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:Ab3d.DirectX.FeatureLevelsNotSupportedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param><exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="T:Ab3d.DirectX.PositionTextureColor">
            <summary>
            PositionTextureColor is struct used for vertex buffer that defines Position, TextureCoordinate and Color
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionTextureColor.#ctor(SharpDX.Vector3,SharpDX.Vector2,SharpDX.Color4)">
            <summary>
            Constructor
            </summary>
            <param name="position">position</param>
            <param name="textureCoordinate">textureCoordinate</param>
            <param name="color">color</param>
        </member>
        <member name="M:Ab3d.DirectX.PositionTextureColor.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Color4)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
            <param name="u">u</param>
            <param name="v">v</param>
            <param name="color">color</param>
        </member>
        <member name="F:Ab3d.DirectX.PositionTextureColor.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionTextureColor.TextureCoordinate">
            <summary>
            TextureCoordinate
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionTextureColor.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionTextureColor.SizeInFloats">
            <summary>
            Size in floats
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionTextureColor.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionTextureColor.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.ShaderQuality">
            <summary>
            ShaderQuality enum specifies possible values for shader quality that define what kind of shaders should be used to render the scene.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShaderQuality.Undefined">
            <summary>
            Shader quality is not defined (usually used in Material when the PreferedShaderQuality is not set). 
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShaderQuality.Low">
            <summary>
            Low quality shaders are used - usually per vertex lighting is used. This shader quality setting has the best performance (hightes frames per second) but the lowest image quality.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShaderQuality.Normal">
            <summary>
            Normal quality shaders are used - usually per pixel lighting is used.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShaderQuality.High">
            <summary>
            High quality shaders are used. Note: DXEngine does not contain any high quality shaders. This means that when using shaders that come with DXEnige the results are the same as for Normal quality shader (but this setting can be used when custom shaders are used).
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.TextureFilteringTypes">
            <summary>
            TextureFilteringTypes enum defines the common Texture filtering types.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.TextureFilteringTypes.Point">
            <summary>
            Uses the color of the nearest neighboring pixel (produces square pixels when zoomed in).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.TextureFilteringTypes.Bilinear">
            <summary>
            Uses the color that is linearly interpolated from the nearest colors from the texture.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.TextureFilteringTypes.Trilinear">
            <summary>
            Uses the color that is linearly interpolated from the nearest colors from the two nearest mip map textures.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.TextureFilteringTypes.Anisotropic_x2">
            <summary>
            Anisotropic filtering with level 2 (compared to linear interpolation Anisotropic filtering improves details when camera angle is low).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.TextureFilteringTypes.Anisotropic_x4">
            <summary>
            Anisotropic filtering with level 4 (compared to linear interpolation Anisotropic filtering improves details when camera angle is low).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.TextureFilteringTypes.Anisotropic_x8">
            <summary>
            Anisotropic filtering with level 8 (compared to linear interpolation Anisotropic filtering improves details when camera angle is low).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.TextureFilteringTypes.Anisotropic_x16">
            <summary>
            Anisotropic filtering with level 16 (compared to linear interpolation Anisotropic filtering improves details when camera angle is low).
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.DXResourceBase">
            <summary>
            DXResourceBase class is the base class for any DXEngine's resource
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXResourceBase.Name">
            <summary>
            Gets name of this resource
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXResourceBase.Id">
            <summary>
            Gets a unique id of this resource
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXResourceBase.ResourcesTracker">
            <summary>
            Gets a static instance of DXResourcesTracker that is used to track objects derived from DXResourceBase.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXResourceBase.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXResourceBase.#ctor">
            <summary>
            Initializes a new instance of the DXResourceBase class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXResourceBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DXResourceBase class.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.DXResourceBase.GetNextId">
            <summary>
            Get next Id as long that is unique for this application. This method is thread safe and can be called from any thread.
            </summary>
            <returns>id as long</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXResourceBase.GetNextId(Ab3d.DirectX.IDXResource)">
            <summary>
            Get next Id as long that is unique for this application. 
            This method is thread safe and can be called from any thread.
            When ResourceTracking is enabled the dxResource is collected by DXResourcesTracker.
            </summary>
            <param name="dxResource">resource that will have this id (can be null). When ResourceTracking is enabled the this dxResource is collected by DXResourcesTracker.</param>
            <returns>id as long</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXResourceBase.CreateClone">
            <summary>
            Clones the current DXResourceBase with creating a shallow copy (properties are copied but referenced objects are preserved).
            The returned cloned objects gets a new Id.
            </summary>
            <returns>Cloned object created from the current object</returns>
        </member>
        <member name="T:Ab3d.DirectX.DXSceneResource">
            <summary>
            DXSceneResource class is a base class for all resources that are initialized by DXScene.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXSceneResource.parentDXScene">
            <summary>
            parent DXScene
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXSceneResource.IsInitialized">
            <summary>
            Gets a Boolean that specifies if this resource has already been initialized.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXSceneResource.InitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.DXSceneResource.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.DXSceneResource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.DeviceCapabilities">
            <summary>
            DeviceCapabilities class describes the capabilities of a DirectX device.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DeviceCapabilities.AllFeatureLevels">
            <summary>
            AllFeatureLevels defines all possible feature leveles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DeviceCapabilities.IsDirectX11Supported">
            <summary>
            Gets a Boolean that specifies if the tested device support DirectX 11. If false the DirectX 11 device cannot be created.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DeviceCapabilities.FeatureLevel">
            <summary>
            Gets the FeatureLevel of the created device. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DeviceCapabilities.MaxSupportedMultisamplingCount">
            <summary>
            Gets an integer that specifies the maximum multisampling count that is supported by the tested device.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DeviceCapabilities.Is32BitIndexBufferSupported">
            <summary>
            Gets a Boolean that specifies if 32 bit index buffer is supported.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DeviceCapabilities.LastError">
            <summary>
            Gets the last exception that happened when testing the device capabilities.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DeviceCapabilities.SoftwareDeviceCapabilities">
            <summary>
            Gets DeviceCapabilities for DirectX 11 Software (WARP) renderer.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCapabilities.QueryDefaultDevice">
            <summary>
            Returns DeviceCapabilities for the default device
            </summary>
            <returns>DeviceCapabilities</returns>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCapabilities.QueryDevice(SharpDX.Direct3D11.Device)">
            <summary>
            Returns DeviceCapabilities for the specified device.
            </summary>
            <param name="device">device</param>
            <returns>DeviceCapabilities</returns>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCapabilities.QueryAdapter(SharpDX.DXGI.Adapter)">
            <summary>
            Returns DeviceCapabilities for the specified adapter.
            </summary>
            <param name="adapter">adapter</param>
            <returns>DeviceCapabilities</returns>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCapabilities.#ctor(SharpDX.Direct3D11.Device)">
            <summary>
            Constructor
            </summary>
            <param name="device">device</param>
        </member>
        <member name="M:Ab3d.DirectX.DeviceCapabilities.#ctor(SharpDX.DXGI.Adapter)">
            <summary>
            Constructor
            </summary>
            <param name="adapter">adapter</param>
        </member>
        <member name="T:Ab3d.DirectX.DisposeList">
            <summary>
            DisposeList contains a list of IDisposable objects that are automatically disposed when DisposeList is disposed.
            The order of disposal is reversed from the order in which the objects were added to the list (first object is disposed last).
            </summary>
            <remarks>
            <para>
            NOTE:<br/>
            We do not check if the objectToDispose is already in the _disposables list
            This check is quite expensive - we need to go throug the whole list each time.
            Therefore the objects that are added to DisposeList must check if they are already disposed and should not dispose themself more than once. 
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.DisposeList.Add(System.IDisposable)">
            <summary>
            Adds object to this DisposeList
            </summary>
            <param name="objectToDispose">objectToDispose</param>
        </member>
        <member name="M:Ab3d.DirectX.DisposeList.Remove(System.IDisposable)">
            <summary>
            Removes object from this DisposeList
            </summary>
            <param name="objectToRemove">objectToRemove</param>
            <returns>true if removed, false if not found in this DisposeList</returns>
        </member>
        <member name="M:Ab3d.DirectX.DisposeList.Dispose">
            <summary>
            Disposes all objects in this DisposeList
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.DisposableDXResource">
            <summary>
            DisposableDXResource class is a base class for DXEngine resources that can be disposed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DisposableDXResource.IsDisposed">
            <summary>
            Gets a Boolean that specifies if this resource has been disposed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DisposableDXResource.IsDisposing">
            <summary>
            Gets a Boolean that specifis if this resource is currently being disposed (the current code is executing inside Dipose method).
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.DisposableDXResource.Disposing">
            <summary>
            Occurs when when Dispose is called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DisposableDXResource.disposables">
            <summary>
            Disposables can be used to simply add IDisposable objects to a list that is automatically disposed when this object is diposed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DisposableDXResource.#ctor">
            <summary>
            Initializes a new instance of the DXComponentBase class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DisposableDXResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DXComponentBase class.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.DisposableDXResource.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DisposableDXResource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.DXDeviceResource">
            <summary>
            DXDeviceResource class is a base class for all resources that are initialized by DXDevice.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDeviceResource.parentDXDevice">
            <summary>
            parent DXDevice
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDeviceResource.IsInitialized">
            <summary>
            Gets a Boolean that specifies if this resource has already been initialized.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXDeviceResource.#ctor">
            <summary>
            Initializes a new instance of the DXComponentBase class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXDeviceResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DXComponentBase class.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.DXDeviceResource.InitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.DXDeviceResource.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.DXDeviceResource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Extensions">
            <summary>
            Extension methods that help work with SharpDX objects.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Extensions.Saturate(SharpDX.Color4)">
            <summary>
            Ensures that the color components are within 0 and 1 - if smaller than 0 than the value is set to 0; if bigger than 1 the value is set to 1. This is the same as saturate function in HLSL.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Extensions.ToColor4(SharpDX.Color3)">
            <summary>
            Converts Color3 to Color4
            </summary>
            <param name="color">Color3</param>
            <returns>Color4</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extensions.ToColor4(SharpDX.Color3,System.Single)">
            <summary>
            Converts Color3 with alpha to Color4
            </summary>
            <param name="color">Color3</param>
            <param name="alpha">alpha</param>
            <returns>Color4</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extensions.ToColor3(SharpDX.Color4)">
            <summary>
            Converts Color4 to Color3
            </summary>
            <param name="color">Color4</param>
            <returns>Color3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extensions.FastEquals(SharpDX.Matrix,SharpDX.Matrix@)">
            <summary>
            FastEquals compares two matrixes and returns true if they are exactly equal.
            To find results faster the FastEquals checks the fields that are usually different first (Offset, then scale, the others).
            </summary>
            <remarks>
            <para>
            <b>FastEquals</b> compares two matrixes and returns true if they are exactly equal.
            </para>
            <para>
            This method is much faster then the standard SharpDX.Matrix.Equals method.
            </para>
            <para>
            The first problem with harpDX.Matrix.Equals is that it uses IsSimilar (Abs(m1 - m2) &lt; epsilon) that require many operations and casting to double.
            </para>
            <para>
            The second thing is that the FastEquals fist compares the fields that are most likely to be different:  first Offset, than scale and the other fields.
            Also M14, M24 and M34 are not compared because they do not play any role in standard matrix.
            </para>
            </remarks>
            <param name="m1">first Matrix</param>
            <param name="m2">second Matrix</param>
            <returns>true if the matrixes are exactly equal</returns>
        </member>
        <member name="T:Ab3d.DirectX.DXResourcesTracker">
            <summary>
            DXResourcesTracker collects classes that implement IDXResource and can report all colleced classes. Objects are collected with WeakReference.
            </summary>
            <remarks>
            <para>
            <b>DXResourcesTracker</b> collects classes that implement <see cref="T:Ab3d.DirectX.IDXResource"/> and can report all colleced classes.
            </para>
            <para>
            It is used as a static <see cref="P:Ab3d.DirectX.DXResourceBase.ResourcesTracker" /> property in <see cref="T:Ab3d.DirectX.DXResourceBase" /> class. 
            If tracking is enabled, this static instance tracks all the objects that derive from DXResourceBase.
            Objects that derive from <see cref="T:Ab3d.DirectX.SharedDXResource"/> or <see cref="T:Ab3d.DirectX.SharedDXResourceWrapper`1"/> are also tracked.
            </para>
            <para>
            Resources tracking collects all the components in a WeakReference list.
            It is possible to get collection of all resources that were collected - their ids, object type, name, etc.
            </para>
            <para>
            To enable components tracking call the <see cref="M:Ab3d.DirectX.DXResourcesTracker.StartTrackingResources"/> method - for example:<br/>
            Ab3d.DirectX.DXResourceBase.ResourcesTracker.StartTrackingResources();
            </para>
            <para>
            After the resources have been tracked, it is possible to get tracked resources by <see cref="M:Ab3d.DirectX.DXResourcesTracker.GetTrackedResources"/>, <see cref="M:Ab3d.DirectX.DXResourcesTracker.GetTrackedResourcesReport(System.Boolean)"/>
            or display the tracked resources in Visual Studio's Immediate Window with <see cref="M:Ab3d.DirectX.DXResourcesTracker.DumpTrackedResources(System.Boolean)"/>.
            </para> 
            <para>
            To track all resources this method must be called before any other object is created (for example before InitializeComponent in the application's main window).
            </para>
            <para>
            It is possible to stop tracking resources with <see cref="M:Ab3d.DirectX.DXResourcesTracker.StopTrackingResources"/>.
            </para>    
            <para>
            If you want to track your objects that implement <see cref="T:Ab3d.DirectX.IDXResource"/> interface but are not derived from <see cref="T:Ab3d.DirectX.DXResourceBase" />, <see cref="T:Ab3d.DirectX.SharedDXResource"/> or <see cref="T:Ab3d.DirectX.SharedDXResourceWrapper`1"/>,
            than all you need to do to get your object tracked is to call the <see cref="M:Ab3d.DirectX.DXResourcesTracker.AddResource(Ab3d.DirectX.IDXResource)"/> method on the static <see cref="P:Ab3d.DirectX.DXResourceBase.ResourcesTracker" /> property.
            If you would also like to get the object Id, you can also call <see cref="M:Ab3d.DirectX.DXResourceBase.GetNextId" /> method and pass your object as parameter - when resource tracking is enabled your object will be also tracked.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXResourcesTracker.IsTrackingResources">
            <summary>
            Gets a boolean that specifies if tracking resources is enabled.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXResourcesTracker.StartTrackingResources">
            <summary>
            Starts tracking of resources.
            </summary>
            <remarks>
            <para>
            <b>StartTrackingResources</b> starts tracking of resources.
            </para>
            <para>
            After the resources have been tracked, it is possible to get tracked resources by <see cref="M:Ab3d.DirectX.DXResourcesTracker.GetTrackedResources"/>, <see cref="M:Ab3d.DirectX.DXResourcesTracker.GetTrackedResourcesReport(System.Boolean)"/> 
            or display the tracked resources in Visual Studio's Immediate Window with <see cref="M:Ab3d.DirectX.DXResourcesTracker.DumpTrackedResources(System.Boolean)"/>.
            </para>
            <para>
            To track all resources this method must be called before any other object is created (for example before InitializeComponent in the application's main window).
            </para>
            <para>
            It is possible to stop tracking resources with <see cref="M:Ab3d.DirectX.DXResourcesTracker.StopTrackingResources"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.DXResourcesTracker.StopTrackingResources">
            <summary>
            Stop tracking resources.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXResourcesTracker.GetTrackedResources">
            <summary>
            Gets a list of IDXResources objects that were tracked while tracking was enabled and are still alive (garbage collector did not disposed them yet).
            </summary>
            <returns>list of IDXResources objects that were tracked while tracking was enabled and are still alive (garbage collector did not disposed them yet)</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXResourcesTracker.AddResource(Ab3d.DirectX.IDXResource)">
            <summary>
            Add IDXResource to the list of tracked resources.
            </summary>
            <param name="resources">IDXResource</param>
        </member>
        <member name="M:Ab3d.DirectX.DXResourcesTracker.GetTrackedResourcesReport(System.Boolean)">
            <summary>
            Gets a formated string with tracked resources.
            </summary>
            <param name="showFullTypeName">If true than type namespace will be also added to type name</param>
            <returns>formated string with tracked resources</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXResourcesTracker.DumpTrackedResources(System.Boolean)">
            <summary>
            Writes formated string with tracked resources with the System.Diagnostics.Debug.WriteLine.
            </summary>
            <param name="showFullTypeName">If true than type namespace will be also added to type name</param>
        </member>
        <member name="T:Ab3d.DirectX.IDisposableDXResource">
            <summary>
            IDisposableDXResource interface defines the IsDisposed property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.IDisposableDXResource.IsDisposed">
            <summary>
            Gets a Boolean that specifies if this resource has been disposed.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.IDXDeviceResource">
            <summary>
            IDXDeviceResource interface defines properties and methods that are used by resources that are initialized by DXDevice.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.IDXDeviceResource.IsInitialized">
            <summary>
            Gets a Boolean that specifies if this resource has already been initialized.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.IDXDeviceResource.InitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">DXDevice used to initialize resources</param>
        </member>
        <member name="T:Ab3d.DirectX.IDXResource">
            <summary>
            IDXResource interface defines base properties for any DXEngine's resource
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.IDXResource.Name">
            <summary>
            Gets name of this resource
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.IDXResource.Id">
            <summary>
            Gets a unique id of this resource
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.IDXSceneResource">
            <summary>
            IDXSceneResource interface defines properties and methods that are used by resources that are initialized by DXScene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.IDXSceneResource.IsInitialized">
            <summary>
            Gets a Boolean that specifies if this resource has already been initialized.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.IDXSceneResource.InitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="T:Ab3d.DirectX.InputElementFactory">
            <summary>
            InputElementFactory is a helper class that can help with creation of InputElement arrays.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.InputElementFactory.IsSupportedInputLayout(Ab3d.DirectX.InputLayoutType,Ab3d.DirectX.InputLayoutType)">
            <summary>
            Returns boolean that specifies if the requiredInputLayout can be used with the availableInputLayout.
            </summary>
            <remarks>
            <para>
            <b>IsSupportedInputLayout</b> returns boolean that specifies if the requiredInputLayout can be used with the availableInputLayout.
            </para>
            <para>
            For example Position_Normal_TextureCoordinate input layout can be used for effects that require Position_Normal input layout.
            </para>
            </remarks>
            <param name="availableInputLayout">available InputLayout</param>
            <param name="requiredInputLayout">required InputLayout</param>
            <returns>boolean that specifies if the requiredInputLayout can be used with the availableInputLayout</returns>
        </member>
        <member name="M:Ab3d.DirectX.InputElementFactory.GetInputElementsArray(Ab3d.DirectX.InputLayoutType)">
            <summary>
            Returns array of InputElement structs that describes the supplied inputLayoutType
            </summary>
            <param name="inputLayoutType">inputLayoutType</param>
            <returns>array of InputElement structs</returns>
        </member>
        <member name="M:Ab3d.DirectX.InputElementFactory.CreateInputElement(System.String,System.Int32,SharpDX.DXGI.Format,System.Int32,System.Int32,SharpDX.Direct3D11.InputClassification,System.Int32)">
            <summary>
            Create one InputElement based on the supplied parameters
            </summary>
            <param name="semanticName">semanticName</param>
            <param name="alignedByteOffset">alignedByteOffset</param>
            <param name="format">format</param>
            <param name="semanticIndex">semanticIndex</param>
            <param name="inputSlot">inputSlot</param>
            <param name="inputSlotClass">inputSlotClass</param>
            <param name="instanceDataStepRate">instanceDataStepRate</param>
            <returns>InputElement</returns>
        </member>
        <member name="T:Ab3d.DirectX.ISharedDXResource">
            <summary>
            ISharedDXResource interface defines properties that are used for reference counted resources that can be shared by many difference objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ISharedDXResource.ReferencesCount">
            <summary>
            Gets an integer that specifies the references count for this resource.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ISharedDXResource.AddRef">
            <summary>
            Increases reference count on this resource.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ISharedDXResource.DisposeAllReferences">
            <summary>
            Disposes this object regardless of the count of references.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.PositionTexture">
            <summary>
            PositionTexture is a struct used for vertex buffer that defines Position, TextureCoordinate
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionTexture.#ctor(SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="position">Position</param>
            <param name="textureCoordinate">TextureCoordinate</param>
        </member>
        <member name="M:Ab3d.DirectX.PositionTexture.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
            <param name="u">u</param>
            <param name="v">v</param>
        </member>
        <member name="F:Ab3d.DirectX.PositionTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionTexture.TextureCoordinate">
            <summary>
            TextureCoordinate
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionTexture.SizeInFloats">
            <summary>
            SizeInFloats
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionTexture.SizeInBytes">
            <summary>
            SizeInBytes
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionTexture.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.RenderingStatistics">
            <summary>
            RenderingStatistics collects various rendering statistics for one rendered frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.FrameNumber">
            <summary>
            Gets the frame number for this RenderingStatistics.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.DrawCallsCount">
            <summary>
            Gets number of draw calls in this frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.DrawnIndicesCount">
            <summary>
            Gets number of drawn triangle indices in this frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.StateChangesCount">
            <summary>
            Gets number of state changes in this frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.ShaderChangesCount">
            <summary>
            Gets number of times shader was changed in this frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.VertexBuffersChangesCount">
            <summary>
            Gets number of times vertex buffer was changed in this frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.IndexBuffersChangesCount">
            <summary>
            Gets number of times index buffer was changed in this frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.ConstantBufferChangesCount">
            <summary>
            Gets number of times constant buffer was changed in this frame.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.UpdateTimeMs">
            <summary>
            Gets number of milliseconds that were needed to update all SceneNodes.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.TotalRenderTimeMs">
            <summary>
            Gets number of milliseconds that were needed for this frame to render.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.PrepareRenderTimeMs">
            <summary>
            Gets number of milliseconds that were needed to prepare the frame to be rendered (clear the buffers, initialize render targets and states, etc).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.RenderShadowsMs">
            <summary>
            Gets number of milliseconds that were needed to draw the shadow map and process it (for example apply blur for VarianceShadowMapping).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.DrawRenderTimeMs">
            <summary>
            Gets number of milliseconds that were needed to draw all objects for this frames (calling Draw methods and any needed state change methods).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.CompleteRenderTimeMs">
            <summary>
            Gets number of milliseconds that were needed to complete the rendering (resolve anti-aliasing, resolve stereoscopic images, calling Present on SwapChain or Flusing device for shared texture).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.PostProcessingRenderTimeMs">
            <summary>
            Gets number of milliseconds that were needed to render all post processing effects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStatistics.ElapsedTimeInMs">
            <summary>
            When called during frame rendering (between StartNewFrame and EndFrame calls) the elapsed time in milliseconds from the StartNewFrame call is returned.
            When called after EndFrame method is called, the TotalRenderTimeMs is returned.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStatistics.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStatistics.StartNewFrame(System.Int32)">
            <summary>
            StartNewFrame resets all the values in RenderingStatistics and start timer for new frame.
            </summary>
            <param name="frameNumber">frameNumber</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStatistics.ResetTimerValues">
            <summary>
            Sets all timer values to 0
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStatistics.EndFrame(Ab3d.DirectX.RenderingContext)">
            <summary>
            EndFrame stops the timer.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStatistics.Clone">
            <summary>
            Returns a new RenderingStatistics with the same values as this RenderingStatistics.
            </summary>
            <returns>Clone of this RenderingStatistics</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStatistics.Copy(Ab3d.DirectX.RenderingStatistics)">
            <summary>
            Copies the values from this RenderingStatistics to targetRenderingStatistics.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.SharedDXDeviceResource">
            <summary>
            SharedDXDeviceResource class is a base class for DXEngine's resources that are initialized by DXDevice and can be shared by many difference objects.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SharedDXDeviceResource.parentDXDevice">
            <summary>
            parent DXDevice
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXDeviceResource.IsInitialized">
            <summary>
            Gets a Boolean that specifies if this resource has already been initialized.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXDeviceResource.ParentDXDevice">
            <summary>
            Gets the DXDevice that was used to initialize this SharedDXDeviceResource
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXDeviceResource.#ctor">
            <summary>
            Initializes a new instance of the DXComponentBase class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXDeviceResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DXComponentBase class.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXDeviceResource.InitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">dxDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXDeviceResource.IsSameDXDevice(Ab3d.DirectX.DXDevice)">
            <summary>
            Return true if the resource has been initialized with the same dxDevice.
            Note that when the dxDevice from parameter or the parentDXDevice is null, this method returns false.
            </summary>
            <param name="dxDevice">DXDevice to check</param>
            <returns>true if the resource has been initialized with the same dxDevice</returns>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXDeviceResource.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXDeviceResource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.SharedDXSceneResource">
            <summary>
            SharedDXSceneResource class is a base class for DXEngine's resources that are initialized by DXScene and can be shared by many difference objects.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SharedDXSceneResource.parentDXScene">
            <summary>
            parent DXScene
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXSceneResource.IsInitialized">
            <summary>
            Gets a Boolean that specifies if this resource has already been initialized.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXSceneResource.InitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXSceneResource.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXSceneResource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.SharedDXResource">
            <summary>
            SharedDXResource class is a base class for DXEngine's resources that can be shared by many difference objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXResource.IsDisposed">
            <summary>
            Gets a Boolean that specifies if this resource has been disposed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXResource.IsDisposing">
            <summary>
            Gets a Boolean that specifies if this resources is currently being disposed (Dispose method has already been called but is not yet finished).
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.SharedDXResource.Disposing">
            <summary>
            Occurs when when Dispose is called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXResource.disposables">
            <summary>
            Disposables can be used to simply add IDisposable objects to a list that is automatically disposed when this object is diposed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXResource.ReferencesCount">
            <summary>
            Gets an integer that specifies the references count for this resource.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResource.AddRef">
            <summary>
            Increases reference count on this resource.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResource.#ctor">
            <summary>
            Initializes a new instance of the SharedDXResource class and sets ReferencesCount to 1.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharedDXResource class and sets ReferencesCount to 1.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResource.Dispose">
            <summary>
            Dispose method decreases the reference count of this object. When reference count gets to zero, this object is disposed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResource.DisposeAllReferences">
            <summary>
            Disposes this object regardless of the count of references.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.SharedDXResourceWrapper`1">
            <summary>
            SharedDXResourceWrapper class is a generic wrapper class that can wrap any IDisposable object and adds reference counting to it.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXResourceWrapper`1.IsDisposed">
            <summary>
            Gets a Boolean that specifies if this resource has been disposed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXResourceWrapper`1.ReferencesCount">
            <summary>
            Gets an integer that specifies the references count for the Resource.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SharedDXResourceWrapper`1.Resource">
            <summary>
            Gets the shared resource.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResourceWrapper`1.#ctor(`0,System.String)">
            <summary>
            Creates a shared resource and sets ReferencesCount to 1.
            </summary>
            <param name="resource">stared resource instance</param>
            <param name="name">name of the shared resource</param>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResourceWrapper`1.AddRef">
            <summary>
            Increases reference count on this resource.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResourceWrapper`1.Dispose">
            <summary>
            Dispose method decreases the reference count of this object. When reference count gets to zero, this object is disposed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResourceWrapper`1.DisposeAllReferences">
            <summary>
            Disposes this object regardless of the count of references.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SharedDXResourceWrapper`1.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.EnvironmentalMapEffect">
            <summary>
            InstancedObjectsEffect is an effect that can render many instances of one mesh geometry.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.EnvironmentalMapEffect.EffectName">
            <summary>
            Effect name
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.EnvironmentalMapEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this effect.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.EnvironmentalMapEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.InstancedObjectsEffect">
            <summary>
            InstancedObjectsEffect is an effect that can render many instances of one mesh geometry.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.InstancedObjectsEffect.EffectName">
            <summary>
            Effect name
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.InstancedObjectsEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this effect.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.IsUsingPerPixelShader(Ab3d.DirectX.ShaderQuality)">
            <summary>
            Returns true when per pixel shader should be used for specified shader quality.
            </summary>
            <param name="shaderQuality">shaderQuality</param>
            <returns>true when per pixel shader should be used for specified shader quality</returns>
        </member>
        <member name="M:Ab3d.DirectX.Effects.InstancedObjectsEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.ModelColorLineEffect">
            <summary>
            ModelColorLineEffect is an effect that is similar to ThickLineEffect but instead rendering lines with fixed and predefined color
            the line color is based on the color of the model that the line is created for.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.ModelColorLineEffect.EffectName">
            <summary>
            Effect name
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ModelColorLineEffect.LineThickness">
            <summary>
            Gets or sets the thickness of the line in screen space units.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ModelColorLineEffect.ReadZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is read when rendering the line - if the depth test is done when rendering the line.
            If false then the line is rendered regardless of its depth - if is rendered even if it is behind some other 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ModelColorLineEffect.WriteZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is written when rendering the line - if the line can occlude other 3D objects.
            If true then the objects behind the line will not be rendered. If false the line will not prevent rendering objects behind it.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ModelColorLineEffect.DepthBias">
            <summary>
            Gets or sets a float that specifies a bias that is used when doing a depth test.
            A bias is a value that is added to the line's depth value and can provide a small offset from another object to prevent Z-fighting that occurs when two objects have almost the same depth values.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ModelColorLineEffect.DefaultLineColor">
            <summary>
            Color of the line that is used when the color cannot be determined from WPF material
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ModelColorLineEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ModelColorLineEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effect.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.ModelColorLineEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ModelColorLineEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.PixelEffect">
            <summary>
            PixelEffect is an effect that is using geometry shader to create and render many pixels (small rectangles) in 3D world.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.PixelEffect.PixelSize">
            <summary>
            Gets or sets a float value that specifies the size of the pixel that is used when the size is not specified by the material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.PixelEffect.PixelColor">
            <summary>
            Gets or sets a Color4 value that specifies the color of the pixel that is used when the color is not specified by the material.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.PixelEffect.EffectName">
            <summary>
            EffectName
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.PixelEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.PixelEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.PixelEffect.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="effectName">effectName</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.PixelEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.PixelEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.PixelEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effect.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.PixelEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.PixelEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.PixelEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.SolidColorEffect">
            <summary>
            SolidColorEffect is an effect that renders the mesh geometry with specified color that is not affected (changed) by the lights in the scene.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.SolidColorEffect.EffectName">
            <summary>
            Effect name
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.SolidColorEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SolidColorEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SolidColorEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this effect.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SolidColorEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SolidColorEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effects.SolidColorEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.SolidColorEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SolidColorEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SolidColorEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.SpriteEffect">
            <summary>
            SpriteEffect is a base abstract class that can render 2D sprites to the scene. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.SpriteEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.SpriteEffect.LastUsedFrameNumber">
            <summary>
            Gets the frame number when the ApplyPerFrameSettings was last called.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SpriteEffect.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">effect name</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SpriteEffect.ApplyPerFrameSettings(Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SpriteEffect.OnApplyPerFrameSettings(Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SpriteEffect.ApplyBatchSettings(System.Boolean,SharpDX.Matrix@,SharpDX.Direct3D11.BlendState,SharpDX.Direct3D11.SamplerState,SharpDX.Direct3D11.DepthStencilState,SharpDX.Direct3D11.RasterizerState)">
            <summary>
            Applies the setting that are used to render one sprite batch
            </summary>
            <param name="isTransformMatrixIdentity"></param>
            <param name="transformMatrix">transformMatrix</param>
            <param name="blendState">blendState</param>
            <param name="samplerState">samplerState</param>
            <param name="depthStencilState">depthStencilState</param>
            <param name="rasterizerState">rasterizerState</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SpriteEffect.ApplyTextureSetting(SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Applies the setting that are used to sprites with the same texture
            </summary>
            <param name="texture">texture</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SpriteEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.SpriteEffect.ResetLastUsedFrameNumber">
            <summary>
            ResetLastUsedFrameNumber sets LastUsedFrameNumber to -1. This is used to prevent calling ApplyPerFrameSettings when this effect is used multiple times with different lights on one frame.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Effects.StandardSpriteEffect">
            <summary>
            StandardSpriteEffect is an effect that can render 2D sprites to the scene.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.StandardSpriteEffect.EffectName">
            <summary>
            Effect name
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.StandardSpriteEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardSpriteEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardSpriteEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this effect.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardSpriteEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardSpriteEffect.OnApplyPerFrameSettings(Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardSpriteEffect.ApplyBatchSettings(System.Boolean,SharpDX.Matrix@,SharpDX.Direct3D11.BlendState,SharpDX.Direct3D11.SamplerState,SharpDX.Direct3D11.DepthStencilState,SharpDX.Direct3D11.RasterizerState)">
            <summary>
            Applies the setting that are used to render one sprite batch
            </summary>
            <param name="isTransformMatrixIdentity">true if transformMatrix is identity (used to improve performance)</param>
            <param name="transformMatrix">transformMatrix</param>
            <param name="blendState">blendState</param>
            <param name="samplerState">samplerState</param>
            <param name="depthStencilState">depthStencilState</param>
            <param name="rasterizerState">rasterizerState</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardSpriteEffect.ApplyTextureSetting(SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Applies the setting that are used to sprites with the same texture
            </summary>
            <param name="texture">texture</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardSpriteEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.StandardEffect">
            <summary>
            StandardEffect is an effect that can render the mesh geometry with the standard meterial.
            Standard meterial can define diffuse color and diffuse texture, specular color and power and emissive color.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.StandardEffect.EffectName">
            <summary>
            EffectName
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.StandardEffect.IsCalculatingWorldViewProjectionInVertexShader">
            <summary>
            Gets or sets a boolean that specifies if WorldViewProjection matrix is calculated in vertex shader.
            If value is false then WorldViewProjection matrix is calculated in .Net code. Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsCalculatingWorldViewProjectionInVertexShader</b> gets or sets a boolean that specifies if WorldViewProjection matrix is calculated in vertex shader.
            If value is false then WorldViewProjection matrix is calculated in .Net code.
            </para>
            <para>
            Multipliying matrixes in .Net can be very expensive. 
            When we are rendering many objects with low positions count, it is better to calculate the matrixes on the graphics card in vertex shader (calculation is performed for every position).
            </para>
            <para>
            But when we are rendering object with a lot of positions it is better to calculate the matrix in .Net code.
            This is also true when we are using software rendering.
            </para>
            <para>
            Default value is true.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Effects.StandardEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this effect.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effects.StandardEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.StandardEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.GetSuperShader">
            <summary>
            Returns and instance of SuperShader. 
            The method increases reference count on SuperShader. This means that the returned instance must be disposed when it is not used any more.
            </summary>
            <returns>SuperShader</returns>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.IsUsingPerPixelShader(Ab3d.DirectX.ShaderQuality)">
            <summary>
            Returns true when per pixel shader should be used for specified shader quality.
            </summary>
            <param name="shaderQuality">shaderQuality</param>
            <returns>true when per pixel shader should be used for specified shader quality</returns>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.GetRequiredRenderingPassesCount(System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Gets number of passes required to render this effect.
            </summary>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.ApplyRenderingPass(System.Int32,Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets the constant buffers and prepares all the shader states for rendering the specfied rendering pass. Before this method is called the OnApplyPerFrameSettings method must be called to set other frame settings.
            </summary>
            <param name="renderingPassIndex">zero based rendering pass index</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.StandardEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.ThickLineEffect">
            <summary>
            ThickLineEffect is an effect that is using geometry shader to create and render 3D lines with specified line thickness.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Effects.ThickLineEffect.EffectName">
            <summary>
            EffectName
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ThickLineEffect.UseGeometryShader">
            <summary>
            Gets or sets a boolean that specifes if geometry shader is used to render the lines.
            Note that if DXScene.UseGeometryShaderFor3DLines is set to false, that this will override the value of UseGeometryShader property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ThickLineEffect.CustomWireframeRasterizerState">
            <summary>
            Gets or sets a RasterizerState that can be used when 3D lines are drawn without using geometry shader.
            If not set then DxDevice.CommonStates.WireframeMultisample is used.
            </summary>
            <remarks>
            <para>
            <b>CustomWireframeRasterizerState</b> gets or sets a RasterizerState that can be used when 3D lines are drawn without using geometry shader.
            </para>
            <para>
            If CustomWireframeRasterizerState is null then DxDevice.CommonStates.WireframeMultisample is used.
            </para>
            <para>
            Using other states from DxDevice.CommonStates has the following effect:<br/>
            WireframeMultisample - shows all lines antialiased (when showing huge number of lines can be significantly slower then showing non-antialiased lines)<br/>
            WireframeCullNone - shows all lines without antialiasing<br/>
            WireframeCullClockwise - hides hidden lines without antialiasing<br/>
            WireframeCullCounterClockwise - shows only hidden lines without antialiasing<br/>
            </para>
            <para>
            It is also possible to set any custom state to CustomWireframeRasterizerState.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Effects.ThickLineEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ThickLineEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ThickLineEffect.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="effectName">effectName</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ThickLineEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ThickLineEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ThickLineEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effect.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.ThickLineEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ThickLineEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.ThickLineEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Effects.VertexColorEffect">
            <summary>
            VertexColorEffect is an effect that can render 3D models with specifying different color for each models vertex (position).
            The vertex colors are provides with <see cref="T:Ab3d.DirectX.Materials.IVertexColorMaterial"/>.
            </summary>
            <remarks>
            <para>
            <b>VertexColorEffect</b> is an effect that can render 3D models with specifying different color for each models vertex (position).
            </para>
            <para>
            The vertex colors are provides with <see cref="T:Ab3d.DirectX.Materials.IVertexColorMaterial"/>.
            </para>
            <para>
            VertexColorEffect support only ambient light and up to three directional lights.
            It does not support point or spot lights.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.Effects.VertexColorEffect.EffectName">
            <summary>
            Effect name
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effects.VertexColorEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.VertexColorEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.VertexColorEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this effect.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.VertexColorEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.VertexColorEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effects.VertexColorEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effects.VertexColorEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effects.VertexColorEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effects.VertexColorEffect.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.IMultiPassEffect">
            <summary>
            IMultiPassEffect interface provides methods that are used for effect with multiple rendering passes.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.IMultiPassEffect.GetRequiredRenderingPassesCount(System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Gets number of passes required to render this effect.
            </summary>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.IMultiPassEffect.ApplyRenderingPass(System.Int32,Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets the constant buffers and prepares all the shader states for rendering the specfied rendering pass. Before this method is called the OnApplyPerFrameSettings method must be called to set other frame settings.
            </summary>
            <param name="renderingPassIndex">zero based rendering pass index</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.CameraDistanceSortedRenderingQueue">
            <summary>
            CameraDistanceSortedRenderingQueue is rendering queue where the objects inside the queue are sorted by their distance from the camera.
            This is uses for transparent object that need to be rendered so that the objects that are more far away from the camera are rendered first.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CameraDistanceSortedRenderingQueue.IsSortingEnabled">
            <summary>
            If true than sortable RenderQueues will be sorted.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CameraDistanceSortedRenderingQueue.SortingType">
            <summary>
            Gets a RenderingQueueSorterType that specifies when the RenderingQueue needs to be resorted.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CameraDistanceSortedRenderingQueue.DistantObjectsFirst">
            <summary>
            Gets or sets the direction of sorting. When true the objects that are more far away from the camera are rendered first.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.CameraDistanceSortedRenderingQueue.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="queueName">queueName</param>
        </member>
        <member name="M:Ab3d.DirectX.CameraDistanceSortedRenderingQueue.Sort(Ab3d.DirectX.RenderingContext,Ab3d.DirectX.ICamera,System.Collections.Generic.List{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.Effect)">
            <summary>
            Performs the sorting
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <param name="usedCamera">ICamera</param>
            <param name="usedLights">list of lights</param>
            <param name="standardEffect">Effect</param>
        </member>
        <member name="T:Ab3d.DirectX.DXDeviceConfiguration">
            <summary>
            DXDeviceConfiguration is used to define properties that are used for creation of DirectX Device and SwapChain.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDeviceConfiguration.AllSupportedFeatureLevels">
            <summary>
            Gets an array of all FeatureLevels supported by DXEngine
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDeviceConfiguration.DriverType">
            <summary>
            Gets or sets a DirectX DriverType. Usually this property is set to Hardware or Warp (used for high speed software rendering).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDeviceConfiguration.SupportedFeatureLevels">
            <summary>
            Gets or sets an array of FeatureLevel that specify which feature levels are required to create the DirectX device (by default feature levels equal and higher than 10 are used).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDeviceConfiguration.Adapter">
            <summary>
            Gets or sets an adapter (graphics card) that will be used to create DirectX device. When null (by default) the default adapter is used.
            To get the actual Adapter used by the created DirectX Device see the <see cref="P:Ab3d.DirectX.DXDevice.Adapter"/> property.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXDeviceConfiguration.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.DXEngineException">
            <summary>
            DXEngineException is base class for all exception thrown in Ab3d.DXEngine.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ab3d.DirectX.DXEngineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.ResourceCreationException">
            <summary>
            ResourceCreationException exception is thrown when DXEngine's resources cannot be found or are not defined correctly.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ResourceCreationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ResourceCreationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Ab3d.DirectX.ResourceCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ab3d.DirectX.ResourceCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.PositionNormal">
            <summary>
            PositionNormal is a struct used for vertex buffer that defines Position and Normal
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionNormal.#ctor(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Constructor
            </summary>
            <param name="position">position</param>
            <param name="normal">normal</param>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormal.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormal.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormal.SizeInFloats">
            <summary>
            Size in floats
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormal.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionNormal.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.PositionNormalTexture">
            <summary>
            PositionNormalTexture is a struct used for vertex buffer that defines Position, Normal and TextureCoordinate
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionNormalTexture.#ctor(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="position">position</param>
            <param name="normal">normal</param>
            <param name="textureCoordinate">textureCoordinate</param>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormalTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormalTexture.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormalTexture.TextureCoordinate">
            <summary>
            TextureCoordinate
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormalTexture.SizeInFloats">
            <summary>
            Size in floats
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PositionNormalTexture.SizeInBytes">
            <summary>
            Size in bytes
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PositionNormalTexture.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.DXDevice">
            <summary>
            DXDevice is a DXEngine's wrapper for the DirectX device.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDevice.Logger">
            <summary>
            Logger object is always null in release build.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.DXDevice.BeforeDeviceDisposed">
            <summary>
            Occurs just before the DirectX device will be disposed and after all other resources have been already disposed.
            Can be used to check for undisposed resources.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDevice.NoMultisamplingSampleDescription">
            <summary>
            SampleDescription that is used to define no multisampling
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDevice.StandardBufferFormat">
            <summary>
            Standard back buffer format (Default value B8G8R8A8_UNorm is required by WPF)
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDevice.StandardDepthStencilFormat">
            <summary>
            Standard format for DepthStencil buffer (D32_Float - 32 bit depth buffer, no stencil buffer)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.Device">
            <summary>
            Gets a DirectX device that is used by this DXDevice
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.ImmediateContext">
            <summary>
            Gets a DirectX Immediate Device context
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.Adapter">
            <summary>
            Gets an adapter (graphics card) that is used by the created Device. Adapter is null if the Device is not yet created.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.IsDebugDevice">
            <summary>
            Gets a boolean that specifies if the created Device was created with Debug layer.
            Note that this property can be false even when the <see cref="P:Ab3d.DirectX.DXDiagnostics.CreateDebugDirectXDevice"/> is true. 
            This indicates that the debug device cannot be created. This can be cased because debug layer is disabled in "DirectX Control panel" or the Debug layer is not installer on the system (it is usually installed with Visual Studio or with Windows SDK).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.ImmediateContextStatesManager">
            <summary>
            ContexStatesManager that is used for the immediate contex
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.EffectsManager">
            <summary>
            EffectsManager that stores all registered effects
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.CommonStates">
            <summary>
            CommonStates that store all common states
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.TextureCache">
            <summary>
            TextureCache is used to cache the textures
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.DeviceCapabilities">
            <summary>
            DeviceCapabilities for this DirectX device
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.Configuration">
            <summary>
            DXDeviceConfiguration configuration used for creation of DirectX Device and SwapChain.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDevice.ResourcesCache">
            <summary>
            Gets or sets an IDisposable object that can be used for caching the resources created on this DXDevice. 
            This property is used by DXViewportView to cache WpfMaterial, DXMeshGeometry3D and SceneNodes objects created from WPF objects. 
            It is not recommended to set this property to any other value.
            </summary>
            <remarks>
            <para>
            <b>ResourcesCache</b> gets or sets an IDisposable object that can be used for caching the resources created on this DXDevice. 
            </para>
            <para>
            This property is used by DXViewportView to cache WpfMaterial, DXMeshGeometry3D and SceneNodes objects created from WPF objects. 
            </para>
            <para>
            When using cached objects, the same DXEngine's object is used for one WPF material object even if the material is used on many different GeometryModel3D objects; when caching is not used, each instance of GeometryModel3D object use its own instance of DXEngine's material object.
            </para>
            <para>
            It is not recommended to set this property to some other value because this will disable caching of DXEngine objects created from WPF objects.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.#ctor(Ab3d.DirectX.DXDeviceConfiguration,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="configuration">DXDeviceConfiguration</param>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.InitializeDevice">
            <summary>
            InitializeDevice creates the DirectX device if it was not yet created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDevice(SharpDX.Direct3D.DriverType,SharpDX.DXGI.Adapter1,System.Boolean)">
            <summary>
            CreateDevice creates DirectX device with specified parameters. The method can be overridden.
            </summary>
            <param name="driverType">DriverType</param>
            <param name="adapter">adapter</param>
            <param name="createDebugDevice">createDebugDevice</param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDevice(SharpDX.Direct3D.DriverType,SharpDX.DXGI.Adapter,SharpDX.Direct3D11.DeviceCreationFlags,SharpDX.Direct3D.FeatureLevel[])">
            <summary>
            CreateDevice creates DirectX device with specified parameters.
            This method correctly handles device creation when featureLevels array contains Level_11_1 but that runtime is not installed on the system (for example on Windows 7 SP 1 without Platform Update).
            If device cannot be created an exception is thrown or null is returned.
            </summary>
            <param name="driverType">DriverType</param>
            <param name="adapter">adapter</param>
            <param name="deviceCreationFlags">deviceCreationFlags</param>
            <param name="featureLevels">array of FeatureLevel (or null)</param>
            <returns>Creates DirectX device. If device cannot be created an exception is thrown or null is returned.</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDXSceneWithSwapChain(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.String)">
            <summary>
            CreateDXSceneWithSwapChain creates a DXScene that is using SwapChain to show its content.
            </summary>
            <param name="hWnd">handle to window that will show the DXScene content</param>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="preferedMultisampleCount">preferedMultisampleCount</param>
            <param name="dpiScaleX">dpiScaleX</param>
            <param name="dpiScaleY">dpiScaleY</param>
            <param name="sceneName">sceneName</param>
            <returns>DXScene</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDXSceneWithBackBuffer(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.String)">
            <summary>
            CreateDXSceneWithBackBuffer creates a DXScene that will be using BackBuffer (instead of SwapChain) to render its content to.
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="preferedMultisampleCount">preferedMultisampleCount</param>
            <param name="dpiScaleX">dpiScaleX</param>
            <param name="dpiScaleY">dpiScaleY</param>
            <param name="sceneName">sceneName</param>
            <returns>DXScene</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateSwapChain(System.IntPtr,System.Int32,System.Int32,SharpDX.DXGI.SampleDescription)">
            <summary>
            CreateSwapChain returns a SwapChain for the specified window handle, size and multisample description.
            </summary>
            <param name="hWnd">window handle</param>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">multisample description</param>
            <returns>SwapChain</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateTexture2D(SharpDX.Direct3D11.Texture2DDescription)">
            <summary>
            CreateTexture2D returns a buffer as Texture2D.
            </summary>
            <param name="backBufferDescription">Texture2DDescription</param>
            <returns>Texture2D</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateTexture2D(System.Int32,System.Int32,SharpDX.DXGI.SampleDescription,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            CreateTexture2D returns a buffer as Texture2D with standard format (defined by <see cref="F:Ab3d.DirectX.DXDevice.StandardBufferFormat"/>).
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">sampleDescription (defines antialiasing)</param>
            <param name="isRenderTarget">isRenderTarget</param>
            <param name="isSharedResource">isSharedResource</param>
            <param name="isStagingTexture">isStagingTexture</param>
            <returns>Texture2D</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateTexture2D(System.Int32,System.Int32,SharpDX.DXGI.SampleDescription,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SharpDX.DXGI.Format)">
            <summary>
            CreateTexture2D returns a buffer as Texture2D.
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">sampleDescription (defines antialiasing)</param>
            <param name="isRenderTarget">isRenderTarget</param>
            <param name="isSharedResource">isSharedResource</param>
            <param name="isStagingTexture">isStagingTexture</param>
            <param name="isShaderResource">isShaderResource</param>
            <param name="format">format</param>
            <returns>Texture2D</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateTexture2DDescription(System.Int32,System.Int32,SharpDX.DXGI.SampleDescription,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            CreateTexture2DDescription returns a Texture2DDescription that can be used to create a back buffer with standard format (defined by <see cref="F:Ab3d.DirectX.DXDevice.StandardBufferFormat"/>).
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">sampleDescription (defines antialiasing)</param>
            <param name="isRenderTarget">isRenderTarget</param>
            <param name="isSharedResource">isSharedResource</param>
            <param name="isStagingTexture">isStagingTexture</param>
            <returns>Texture2DDescription</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateTexture2DDescription(System.Int32,System.Int32,SharpDX.DXGI.SampleDescription,System.Boolean,System.Boolean,System.Boolean,System.Boolean,SharpDX.DXGI.Format)">
            <summary>
            CreateTexture2DDescription returns a Texture2DDescription that can be used to create a back buffer.
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">sampleDescription (defines antialiasing)</param>
            <param name="isRenderTarget">isRenderTarget</param>
            <param name="isSharedResource">isSharedResource</param>
            <param name="isStagingTexture">isStagingTexture</param>
            <param name="isShaderResource">isShaderResource</param>
            <param name="format">format</param>
            <returns>Texture2DDescription</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDepthStencilView(System.Int32,System.Int32,SharpDX.DXGI.SampleDescription)">
            <summary>
            CreateDepthStencilView returns a DepthStencilView with the specified size and multisample description
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">multisample description</param>
            <returns>DepthStencilView</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDepthStencilView(System.Int32,System.Int32,SharpDX.DXGI.SampleDescription,SharpDX.DXGI.Format)">
            <summary>
            CreateDepthStencilView returns a DepthStencilView with the specified size, multisample description and format
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">multisample description</param>
            <param name="format">format</param>
            <returns>DepthStencilView</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDepthStencilBuffer(System.Int32,System.Int32,SharpDX.DXGI.SampleDescription,SharpDX.DXGI.Format)">
            <summary>
            CreateDepthStencilBuffer returns a Texture2D that represents a DepthStencilBuffer with the specified size, multisample description and format
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="sampleDescription">multisample description</param>
            <param name="format">format</param>
            <returns>Texture2D</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateConstantBuffer(System.Int32,System.String)">
            <summary>
            CreateConstantBuffer returns a Buffer that represents a constants buffer.
            </summary>
            <param name="bufferSize">bufferSize</param>
            <param name="constantBufferName">sets the debug name of the created constant name when a Debug DirectX device was created</param>
            <returns>Buffer</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateBlendState(SharpDX.Direct3D11.BlendOption,SharpDX.Direct3D11.BlendOption)">
            <summary>
            CreateBlendState returns a BlendState from sourceBlend and destinationBlend.
            </summary>
            <param name="sourceBlend">sourceBlend</param>
            <param name="destinationBlend">destinationBlend</param>
            <returns>BlendState</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateBlendState(SharpDX.Direct3D11.BlendStateDescription)">
            <summary>
            CreateBlendState returns a BlendState from BlendStateDescription.
            </summary>
            <param name="blendStateDesc">BlendStateDescription</param>
            <returns>BlendState</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateRasterizerState(SharpDX.Direct3D11.CullMode,SharpDX.Direct3D11.FillMode,System.Boolean,System.Boolean)">
            <summary>
            CreateRasterizerState returns a RasterizerState.
            </summary>
            <param name="cullMode">cullMode</param>
            <param name="fillMode">fillMode</param>
            <param name="enableMultisample">enableMultisample</param>
            <param name="isFrontCounterClockwise">isFrontCounterClockwise</param>
            <returns>RasterizerState</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateDepthStencilState(System.Boolean,System.Boolean)">
            <summary>
            CreateDepthStencilState returns a DepthStencilState
            </summary>
            <param name="depthEnable">depthEnable</param>
            <param name="depthWriteEnable">depthWriteEnable</param>
            <returns>DepthStencilState</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.CreateSamplerState(SharpDX.Direct3D11.Filter,SharpDX.Direct3D11.TextureAddressMode,System.Int32)">
            <summary>
            CreateSamplerState returns a SamplerState
            </summary>
            <param name="filter">filter</param>
            <param name="addressMode">addressMode</param>
            <param name="maximumAnisotropy">maximumAnisotropy</param>
            <returns>SamplerState</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.IsUsingDefaultSystemAdapter">
            <summary>
            Returns true if the default system adapter is used.
            </summary>
            <returns>true if the default system adapter is used</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.GetUsedMultisamplingDescription(System.Int32)">
            <summary>
            GetUsedMultisamplingDescription returns a SampleDescription from specified multisampleCount
            </summary>
            <param name="multisampleCount">multisampleCount</param>
            <returns>SampleDescription</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.IsAnyDXSceneRegistered">
            <summary>
            Gets true if any DXScene is using this DXDevice. Else returns false.
            </summary>
            <returns>Gets true if any DXScene is using this DXDevice. Else returns false.</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.GetAllSystemAdapters">
            <summary>
            Returns all Adapter1 that are supported on the system.
            </summary>
            <exception cref="T:Ab3d.DirectX.DXEngineException">DXEngineException when DXGI 1.1 Factory cannot be created</exception>
            <returns>all Adapter1 that are supported on the system</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.DisposeWithDXDevice(System.IDisposable)">
            <summary>
            DisposeWithDXDevice method adds the specified disposable object to the list of objects that will be disposed when this DXDevice will be disposed.
            </summary>
            <param name="disposable">IDisposable</param>
        </member>
        <member name="M:Ab3d.DirectX.DXDevice.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.DXDiagnostics">
            <summary>
            DXDiagnostics class contains static properties that define which diagnostics features of the DXEngine will be turned on.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.DXDiagnostics.LogLevels">
            <summary>
            LogLevels define log levels that are used to specify which DXEngine messages are written to Console / Output window.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDiagnostics.LogLevels.None">
            <summary>
            No messages are written
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDiagnostics.LogLevels.Warn">
            <summary>
            Write all Warnings, Errors and Fatal errors
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDiagnostics.LogLevels.Error">
            <summary>
            Write all Errors and Fatal errors
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXDiagnostics.LogLevels.Fatal">
            <summary>
            Write only Fatal errors
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.IsCollectingStatistics">
            <summary>
            Gets or sets a static Boolean that specifies if DXEngine is collecting rendering statistics to <see cref="T:Ab3d.DirectX.RenderingStatistics"/> class that can be read from <see cref="P:Ab3d.DirectX.DXScene.Statistics"/> property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.CreateDebugDirectXDevice">
            <summary>
            Gets or sets a static Boolean that specifies if the DirectX device is created with debug flat that enabled DirectX debug layer.
            To use debug layer the Windows SDK or DirectX SDK must be installed.
            To check if the device was created with the debug layer, see the <see cref="P:Ab3d.DirectX.DXDevice.IsDebugDevice"/> property after the DXDevice was created.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.ReportLiveDeviceObjectsOnDispose">
            <summary>
            Gets or sets a static Boolean that specifies if ReportLiveDeviceObjects method is called when the DirectX device is disposed.
            This method reports all live (not disposed) DirectX objects to the Visual Studio Output window. <see cref="P:Ab3d.DirectX.DXDiagnostics.CreateDebugDirectXDevice"/> must be set to true and DirectX debug layer must be enabled for this property to work.
            See remarks for more info.
            </summary>
            <remarks>
            <para>
            <b>ReportLiveDeviceObjectsOnDispose</b> gets or sets a static Boolean that specifies if ReportLiveDeviceObjects method is called when the DirectX device is disposed.
            </para>
            <para>
            <see cref="P:Ab3d.DirectX.DXDiagnostics.CreateDebugDirectXDevice"/> must be set to true for this property to work (ReportLiveDeviceObjects method is available only when a debug DirectX device is created; this also required DirectX debug layer to be enabled).
            </para>
            <para>
            This method reports all live (not disposed) DirectX objects to the Visual Studio Output window. 
            </para>
            <para>
            To see if there are any undisposed objects, you need to check if the "Refcount" number is bigger than 0. 
            This means that there are still some outer references to that object.
            If "IntRef" is bigger than zero, than this is not a problem because this shows internal references that will be automatically disposed.
            To show this report, there still need to be some outer references live for ID3D11Device (usually 6) and ID3D11Context (usually 1). 
            So if you see some references there, this is not a problem because those references will be released when the DXDevice is disposed.
            </para>
            <para>
            The following shows a sample report output (note that the last line shows one live reference to the DirectionalLightShader_perObjectNoWVPConstantsBuffer):
            </para>
            <code>
            D3D11 WARNING: Live ID3D11Device at 0x0C5CED14, Refcount: 6 [ STATE_CREATION WARNING #441: LIVE_DEVICE]
            D3D11 WARNING: 	Live ID3D11Context at 0x0C5CFC40, Refcount: 1, IntRef: 1 [STATE_CREATION WARNING #2097226: LIVE_CONTEXT]
            D3D11 WARNING: 	Live ID3DDeviceContextState at 0x0C6BF6F8, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #3145742: LIVE_DEVICECONTEXTSTATE]
            D3D11 WARNING: 	Live ID3D11BlendState at 0x0C6C5674, Name: Opaque, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #435: LIVE_BLENDSTATE]
            D3D11 WARNING: 	Live ID3D11DepthStencilState at 0x0C6C608C, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #436: LIVE_DEPTHSTENCILSTATE]
            D3D11 WARNING: 	Live ID3D11RasterizerState at 0x0C6C6824, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #437: LIVE_RASTERIZERSTATE]
            D3D11 WARNING: 	Live ID3D11Sampler at 0x0C6C63DC, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #434: LIVE_SAMPLER]
            D3D11 WARNING: 	Live ID3D11Query at 0x0C5BDA64, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #438: LIVE_QUERY]
            D3D11 WARNING: 	Live ID3D11DepthStencilState at 0x0C6C5EE4, Name: DepthReadWrite, Refcount: 0, IntRef: 0 [STATE_CREATION WARNING #436: LIVE_DEPTHSTENCILSTATE]
            D3D11 WARNING: 	Live ID3D11RasterizerState at 0x0E4A9764, Name: CullClockwise, Refcount: 0, IntRef: 0 [STATE_CREATION WARNING #437: LIVE_RASTERIZERSTATE]
            D3D11 WARNING: 	Live ID3D11Texture2D at 0x0C6CABEC, Name: MSAABackBuffer, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #425: LIVE_TEXTURE2D]
            D3D11 WARNING: 	Live ID3D11RenderTargetView at 0x0C6CAF04, Name: MSAABackBufferRenderTargetView, Refcount: 0, IntRef: 0 [STATE_CREATION WARNING #428: LIVE_RENDERTARGETVIEW]
            D3D11 WARNING: 	Live ID3D11Texture2D at 0x0E4C2F2C, Refcount: 0, IntRef: 1 [STATE_CREATION WARNING #425: LIVE_TEXTURE2D]
            D3D11 WARNING: 	Live ID3D11DepthStencilView at 0x0C6A5544, Name: DepthStencilView, Refcount: 0, IntRef: 0 [STATE_CREATION WARNING #429: LIVE_DEPTHSTENCILVIEW]
            D3D11 WARNING: 	Live ID3D11Buffer at 0x0C3C0FCC, Name: DirectionalLightShader_perFrameCameraConstantsBuffer, Refcount: 0, IntRef: 0 [STATE_CREATION WARNING #423: LIVE_BUFFER]
            D3D11 WARNING: 	Live ID3D11Buffer at 0x0E70AB0C, Name: DirectionalLightShader_perFrameDirectionalLightsConstantsBuffer, Refcount: 0, IntRef: 0 [STATE_CREATION WARNING #423: LIVE_BUFFER]
            D3D11 WARNING: 	Live ID3D11Buffer at 0x0E7111AC, Name: DirectionalLightShader_perObjectNoWVPConstantsBuffer, Refcount: 1, IntRef: 0 [STATE_CREATION WARNING #423: LIVE_BUFFER]
            </code>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.LogLevel">
            <summary>
            Gets or sets a log level that specifies which DXEngine messages are written to Output Window and to LogFileName file (if specified). Default value is Error.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.LogFileName">
            <summary>
            Gets to sets a string that specifies the file name that is used to store log messages. By default this property is set to null. This prevents writing log messages to file.
            You can also set this property to "desktop" and this will created the "DXEngine.log" on the user's desktop folder.
            
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.IsWritingLogToOutput">
            <summary>
            Gets or sets a Boolean that specifies if log messages are written to Visual Studio Output window.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.LogAction">
            <summary>
            Gets or sets an action that is called when a Warning or Error log message is written to log. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.IsResourceTrackingEnabled">
            <summary>
            Gets or sets a Boolean that specifies if DirectX resources construction and disposal is tracked with DXEngine.
            After resource tracing is enabled, you can get the report by calling <see cref="M:Ab3d.DirectX.DXDiagnostics.GetTrackedResourcesReport(System.Boolean)"/> method.
            Default value if false.
            </summary>
            <remarks>
            <para>
            <b>IsResourceTrackingEnabled</b> gets or sets a Boolean that specifies if DirectX resources construction and disposal is tracked with DXEngine.
            </para> 
            <para>
            To get a more detailed information about COM object construction and destruction it is possible to use ObjectTracker from SharpDX.
            To enable it set the SharpDX.Configuration.EnableObjectTracking to true.
            Then call the SharpDX.Diagnostics.ObjectTracker.ReportActiveObjects() method to get report of live object and the call stack to their construction.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXDiagnostics.IsD3DPerformanceEventGroupingEnabled">
            <summary>
            Gets or sets a Boolean that specifies if D3DPerf_BeginEvent and D3DPerf_EndEvent are called when running each rendering step.
            This can be used to Graphics debugger to simplify rendering debugging. This requires using DirectX layer (<see cref="P:Ab3d.DirectX.DXDiagnostics.CreateDebugDirectXDevice"/>. 
            When using SharpDX 3.1 or newer you need to add reference to SharpDX.Desktop.
            Default value is false.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXDiagnostics.GetTrackedResourcesReport(System.Boolean)">
            <summary>
            Gets a formated string with tracked resources (resource tracking must be enabled with <see cref="P:Ab3d.DirectX.DXDiagnostics.IsResourceTrackingEnabled"/> before calling this method or null is returned).
            </summary>
            <param name="showFullTypeName">If true than type namespace will be also added to type name</param>
            <returns>formated string with tracked resources</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDiagnostics.CaptureNextFrame(Ab3d.DirectX.DXScene)">
            <summary>
            CaptureNextFrame programmatically captures the next rendered frame with Visual Studio Graphics Debugging.
            This works for DirectXOverlay and DirectXImage presentation type.
            Capture is supported on Windows 8.1 and newer operating system, with installed Windows Software Development Kit (SDK) and only when the Visual Studio Graphics Debugging is running.
            The method returns true when capture is supported. If capture is not supported, false is returned.
            </summary>
            <remarks>
            <para>
            <b>CaptureNextFrame</b> programmatically captures the next rendered frame with Visual Studio Graphics Debugging.
            </para>
            <para>
            This works for DirectXOverlay and DirectXImage presentation type.
            </para>
            <para>
            Capture is supported on Windows 8.1 and newer operating system, with installed Windows Software Development Kit (SDK) and only when the Visual Studio Graphics Debugging is running.
            </para>
            <para>
            The method returns true when capture is supported. If capture is not supported, false is returned.
            </para>
            <para>
            It possible to check if capture is available with calling <see cref="M:Ab3d.DirectX.DXDiagnostics.IsCaptureFrameSupported"/> method.
            </para>
            </remarks>
            <param name="dxScene">DXScene that will be captured</param>
            <returns>true when capture is supported; false if capture is not supported</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXDiagnostics.IsCaptureFrameSupported">
            <summary>
            Returns true if programmatical capture of frame into Visual Studio Graphics Debugging is supported.
            Capture is supported on Windows 8.1 and newer operating system, with installed Windows Software Development Kit (SDK) and only when the Visual Studio Graphics Debugging is running.
            </summary>
            <returns>true if programmatical capture of frame is supported</returns>
        </member>
        <member name="T:Ab3d.DirectX.EffectRegisteredEventHandler">
            <summary>
            EffectRegisteredEventHandler is an event handler with EffectRegisteredEventArgs as an argument and is used for  the EffectRegistered event in EffectsManager.
            </summary>
            <param name="sender">sender</param>
            <param name="e">EffectRegisteredEventArgs</param>
        </member>
        <member name="T:Ab3d.DirectX.EffectRegisteredEventArgs">
            <summary>
            EffectRegisteredEventArgs class defines the Effect that was registered by EffectsManager and is used in the EffectRegistered event in EffectsManager.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.EffectRegisteredEventArgs.RegisteredEffect">
            <summary>
            newly registered effect
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.EffectRegisteredEventArgs.#ctor(Ab3d.DirectX.Effect)">
            <summary>
            Constructor
            </summary>
            <param name="registeredEffect">Effect</param>
        </member>
        <member name="T:Ab3d.DirectX.ISortedRenderingQueue">
            <summary>
            ISortedRenderingQueue interface defines methods that are used by RenderingQueue that support sorting of its items.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ISortedRenderingQueue.IsSortingEnabled">
            <summary>
            If true than sortable RenderQueues will be sorted.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ISortedRenderingQueue.SortingType">
            <summary>
            Gets a RenderingQueueSorterType that specifies when the RenderingQueue needs to be resorted.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ISortedRenderingQueue.Sort(Ab3d.DirectX.RenderingContext,Ab3d.DirectX.ICamera,System.Collections.Generic.List{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.Effect)">
            <summary>
            Sort items in rendering queue
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <param name="usedCamera">ICamera</param>
            <param name="usedLights">list of lights</param>
            <param name="standardEffect">standard effect</param>
        </member>
        <member name="T:Ab3d.DirectX.MaterialSortedRenderingQueue">
            <summary>
            MaterialSortedRenderingQueue is rendering queue where the objects inside the queue are sorted so that objects with the same material are rendered one after another - this minimizes the state changes and increases the performance.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MaterialSortedRenderingQueue.IsSortingEnabled">
            <summary>
            If true than sortable RenderQueues will be sorted.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MaterialSortedRenderingQueue.SortingType">
            <summary>
            Gets a RenderingQueueSorterType that specifies when the RenderingQueue needs to be resorted.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.MaterialSortedRenderingQueue.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="queueName">queueName</param>
        </member>
        <member name="M:Ab3d.DirectX.MaterialSortedRenderingQueue.Sort(Ab3d.DirectX.RenderingContext,Ab3d.DirectX.ICamera,System.Collections.Generic.List{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.Effect)">
            <summary>
            Sort items in rendering queue
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <param name="usedCamera">ICamera</param>
            <param name="usedLights">list of lights</param>
            <param name="standardEffect">standard effect</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderablePrimitiveRenderingQueue">
            <summary>
            RenderablePrimitiveRenderingQueue is derived from RenderingQueue. 
            The difference from RenderingQueue is that RenderablePrimitiveRenderingQueue can accept (with Add method) only objects derived from RenderablePrimitive. 
            This is useful for rendering queues that need to be sorted for example MaterialSortedRenderingQueue and CameraDistanceSortedRenderingQueue.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.renderablePrimitives">
            <summary>
            List of RenderablePrimitive objects used by this RenderablePrimitiveRenderingQueue
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.Count">
            <summary>
            Count of RenderablePrimitive objects used by this RenderablePrimitiveRenderingQueue
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.Item(System.Int32)">
            <summary>
            Gets a RenderablePrimitiveBase with the specified index
            </summary>
            <param name="index">index of the itme in this queue</param>
            <returns>RenderablePrimitiveBase with the specified index</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="queueName">queueName</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.Add(Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Adds renderable object to this queue
            </summary>
            <param name="renderable">renderable object</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.Clear">
            <summary>
            Removes all renderable objects from this queue
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.Remove(Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Removes renderable object to this queue
            </summary>
            <param name="renderable">renderable object</param>
            <returns>true if object was removed or false if object was not found</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveRenderingQueue.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.TextureCache">
            <summary>
            TextureCache class provides texture cashing for DXEngine.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.TextureCache.GenerateMipMaps">
            <summary>
            Gets or sets a Boolean that specifies if mip-maps are generated when texture is created by this TextureCache
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.TextureCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.TextureCache.GetTextureFromFile(System.String,System.Boolean@)">
            <summary>
            Checks if a texture with specified fileName was already loaded and cached. 
            In this case the method returns a cached texture and increases its reference count. Otherwise null is returned.
            You need to dispose the texture when it is not used any more.
            </summary>
            <param name="fileName">file name</param>
            <param name="hasTransparency">returns true if texture has transparent colors</param>
            <returns>ShaderResourceView wrapped by SharedDXResourceWrapper or null if texture with the specified fileName was not yet cached</returns>
        </member>
        <member name="M:Ab3d.DirectX.TextureCache.GetTextureFromObject(System.Object,System.Boolean@)">
            <summary>
            Check cache and tries to find a texture that was created from the originalObject.
            If texture is not found, null is returned.
            The texture needs to be disposed when it is not used any more.
            </summary>
            <param name="originalObject">object used to create the texture</param>
            <param name="hasTransparency">returns true if texture has transparent colors</param>
            <returns>ShaderResourceView wrapped by SharedDXResourceWrapper</returns>
        </member>
        <member name="M:Ab3d.DirectX.TextureCache.CacheTexture(SharpDX.Direct3D11.ShaderResourceView,System.Boolean,System.String)">
            <summary>
            CacheTexture stores the texture (as ShaderResourceView) as cached texture created from the originalObject.
            </summary>
            <param name="textureView">ShaderResourceView</param>
            <param name="hasTransparency">true if texture has transparent colors</param>
            <param name="textureFileName">file name of the texture</param>
            <returns>ShaderResourceView wrapped by SharedDXResourceWrapper</returns>
        </member>
        <member name="M:Ab3d.DirectX.TextureCache.CacheTexture(SharpDX.Direct3D11.ShaderResourceView,System.Boolean,System.Object)">
            <summary>
            CacheTexture stores the texture (as ShaderResourceView) as cached texture created from the originalObject.
            </summary>
            <param name="textureView">ShaderResourceView</param>
            <param name="hasTransparency">true if texture has transparent colors</param>
            <param name="originalObject">originalObject</param>
            <returns>ShaderResourceView wrapped by SharedDXResourceWrapper</returns>
        </member>
        <member name="M:Ab3d.DirectX.TextureCache.CleanupCache">
            <summary>
            Cleans all disposed objects from cache
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.TextureCache.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Lights.AmbientLight">
            <summary>
            AmbientLight is a lights that adds the specified color to all objects in the scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.AmbientLight.Color">
            <summary>
            Gets or sets an ambient color.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.AmbientLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.AmbientLight"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.AmbientLight.#ctor(SharpDX.Color3)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.AmbientLight"/> class.
            </summary>
            <param name="color">Color3</param>
        </member>
        <member name="M:Ab3d.DirectX.Lights.AmbientLight.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.AmbientLight"/> class.
            </summary>
            <param name="intensity">intensity can be from 0 to 1 - 0 means Black color, 1 means White color</param>
        </member>
        <member name="M:Ab3d.DirectX.Lights.AmbientLight.SetIntensity(System.Single)">
            <summary>
            Sets the intensity of the ambient light - intensity can be from 0 to 1 - 0 means Black color, 1 means White color.
            </summary>
            <param name="intensity">intensity can be from 0 to 1 - 0 means Black color, 1 means White color</param>
        </member>
        <member name="M:Ab3d.DirectX.Lights.AmbientLight.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.Lights.DirectionalLight">
            <summary>
            DirectionalLight is a lights that shines from infinint and has a direction vector set.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.DirectionalLight.Direction">
            <summary>
            Gets or sets a Vector3 that specifies the direction of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.DirectionalLight.DiffuseColor">
            <summary>
            Gets or sets a Color3 that specifies the diffuse color of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.DirectionalLight.SpecularColor">
            <summary>
            Gets or sets a Color3 that specifies the specular color of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.DirectionalLight.IsCastingShadow">
            <summary>
            Gets or sets a Booleans that specifies if this light casts a shadow.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.DirectionalLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.DirectionalLight"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.DirectionalLight.#ctor(SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.DirectionalLight"/> class.
            </summary>
            <param name="direction">Vector3 that specifies the direction of this light</param>
        </member>
        <member name="M:Ab3d.DirectX.Lights.DirectionalLight.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.Lights.IShadowCastingLight">
            <summary>
            IShadowCastingLight interface represents a lights that can cast a shadow.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IShadowCastingLight.IsCastingShadow">
            <summary>
            Gets or sets a Booleans that specifies if this light casts a shadow.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Lights.LightBase">
            <summary>
            LightBase is a base light class
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.LightBase.ParentSceneNode">
            <summary>
            Gets or sets a parent SceneNode - the transformation of the parent SceneNode also affect this light. ParentSceneNode can be null.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.LightBase.IsEnabled">
            <summary>
            Gets or sets a boolean that specifies if this light is enabled (turned on).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.LightBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.LightBase"/> class.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Lights.PointLight">
            <summary>
            PointLight is a lights that emits light in all directions from a specifed position.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.PointLight.DiffuseColor">
            <summary>
            Gets or sets a Color3 that specifies a diffuse color of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.PointLight.SpecularColor">
            <summary>
            Gets or sets a Color3 that specifies a specular color of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.PointLight.Position">
            <summary>
            Gets or sets a Vector3 that specifies the positions of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.PointLight.Range">
            <summary>
            Gets or sets a range of this point light - range does not affect the light brightness but just disables light calculation for all pixels that are farther away.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.PointLight.Attenuation">
            <summary>
            Gets or sets a Vector3 that specifies the parameters for the quadratic light function - the Vector3 components are: constant, linear and quadratic parameter. Default value is (1, 0, 0)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.PointLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.PointLight"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.PointLight.#ctor(SharpDX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.PointLight"/> class.
            </summary>
            <param name="position">Vector3 that specifies the positions of this light</param>
            <param name="range">range of this point light - range does not affect the light brightness but just disables light calculation for all pixels that are farther away.</param>
        </member>
        <member name="M:Ab3d.DirectX.Lights.PointLight.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.Lights.SpotLight">
            <summary>
            SpotLight is a lights that emits lights that is positions in the specified positions and emits light in a specfied directon and with specified cone.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Lights.SpotLight.DefaultFallout">
            <summary>
            Default FallOff value for SpotLight
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.SpotLight.Direction">
            <summary>
            Gets or sets a Vector3 that specifies the direction of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.SpotLight.InnerConeAngle">
            <summary>
            Gets or sets an inner cone angle in degrees.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.SpotLight.OuterConeAngle">
            <summary>
            Gets or sets an outer cone angle in degrees.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.SpotLight.FallOff">
            <summary>
            Gets or sets a fallout value that specifies how the light intensity attenuates between inner and outer cone.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.SpotLight.IsCastingShadow">
            <summary>
            Gets or sets a Booleans that specifies if this light casts a shadow.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.SpotLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.SpotLight"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Lights.SpotLight.#ctor(SharpDX.Vector3,System.Single,SharpDX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Lights.SpotLight"/> class.
            </summary>
            <param name="position">Vector3 that specifies the positions of this light</param>
            <param name="range">range of this point light - range does not affect the light brightness but just disables light calculation for all pixels that are farther away</param>
            <param name="direction">Vector3 that specifies the direction of this light</param>
        </member>
        <member name="M:Ab3d.DirectX.Lights.SpotLight.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.Lights.IAmbientLight">
            <summary>
            IAmbientLight interface represents an ambient light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IAmbientLight.Color">
            <summary>
            Gets an ambient color.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Lights.IDirectionalLight">
            <summary>
            IDirectionalLight interface defines a lights that shines from infinint and has a direction vector set.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IDirectionalLight.Direction">
            <summary>
            Gets a Vector3 that specifies the direction of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IDirectionalLight.DiffuseColor">
            <summary>
            Gets a Color3 that specifies the diffuse color of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IDirectionalLight.SpecularColor">
            <summary>
            Gets a Color3 that specifies the specular color of this light.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Lights.ILight">
            <summary>
            ILight interface represents a 3D light
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.ILight.ParentSceneNode">
            <summary>
            Gets a parent SceneNode - the transformation of the parent SceneNode also affect this light. ParentSceneNode can be null.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.ILight.IsEnabled">
            <summary>
            Gets a boolean that specifies if this light is enabled (turned on).
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Lights.IPointLight">
            <summary>
            IPointLight interface represents a lights that emits light in all directions from a specifed position.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IPointLight.DiffuseColor">
            <summary>
            Gets a Color3 that specifies a diffuse color of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IPointLight.SpecularColor">
            <summary>
            Gets a Color3 that specifies a specular color of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IPointLight.Position">
            <summary>
            Gets a Vector3 that specifies the positions of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IPointLight.Range">
            <summary>
            Gets a range of this point light - range does not affect the light brightness but just disables light calculation for all pixels that are farther away.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.IPointLight.Attenuation">
            <summary>
            Gets a Vector3 that specifies the parameters for the quadratic light function - the Vector3 components are: constant, linear and quadratic parameter.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Lights.ISpotLight">
            <summary>
            ISpotLight interface defines a lights that emits lights that is positions in the specified positions and emits light in a specfied directon and with specified cone.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.ISpotLight.Direction">
            <summary>
            Gets a Vector3 that specifies the direction of this light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.ISpotLight.InnerConeAngle">
            <summary>
            Gets an inner cone angle in degrees.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.ISpotLight.OuterConeAngle">
            <summary>
            Gets an outer cone angle in degrees.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Lights.ISpotLight.FallOff">
            <summary>
            Gets a fallout value that specifies how the light intensity attenuates between inner and outer cone.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.ILightNode">
            <summary>
            ILightNode interface is used by SceneNodes that contain a light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ILightNode.Light">
            <summary>
            Gets the light defined by this SceneNode.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IConstantBuffersCache">
            <summary>
            IConstantBuffersCache interface can be implemented by a Material that supports cashing constant buffers.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IConstantBuffersCache.CachedConstantBuffers">
            <summary>
            Gets or sets an array of DirectX Constant buffers that can be created for this instance of Material.
            The buffers can be created in Effects and can be reused for multiple frames when the material is not changed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IConstantBuffersCache.ContantBuffesVersion">
            <summary>
            Gets or sets a version that was read from Material's Version at the time of creating the CachedConstantBuffers
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IHiddenLineMaterial">
            <summary>
            IHiddenLineMaterial interface provides a property that specify if the hidden part of the line will be rendered.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IHiddenLineMaterial.IsRenderingOnlyHiddenLines">
            <summary>
            Gets a boolean that specifies if line with this material will be rendered when it is in front of other 3D objects 
            (IsRenderingOnlyHiddenLines is false), or when the line is hidden - is behind other 3D objects (IsRenderingOnlyHiddenLines is true)
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IPixelMaterial">
            <summary>
            IPixelMaterial interface defines properties that define a pixel material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IPixelMaterial.PixelColor">
            <summary>
            Gets the color of the line that is determined from the WpfModel material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IPixelMaterial.PixelSize">
            <summary>
            Gets the width and height of the pixel in screen space units.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.ITransparentMaterial">
            <summary>
            ITransparentMaterial interface defines HasTransparency property that specifies if this material need to be rendered with alpha blending enabled.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ITransparentMaterial.HasTransparency">
            <summary>
            Gets a boolean that specifies if this material is semi-transparent and needs to be alpha blended with the scene.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IVertexColorMaterial">
            <summary>
            IVertexColorMaterial interface defines the VertexColorsVertexBufferBinding property that is used to specify vertex buffer for position colors array.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IVertexColorMaterial.VertexColorsVertexBufferBinding">
            <summary>
            Gets a VertexBufferBinding for an array of Color4 values where each value represents a color of one position.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IZBufferStateMaterial">
            <summary>
            IZBufferStateMaterial defines ReadZBuffer and WriteZBuffer properties that control how ZBuffer is used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IZBufferStateMaterial.ReadZBuffer">
            <summary>
            Gets a Boolean that specifies if Z buffer is read when rendering the object - if the depth test is done when rendering the object.
            If false then the object is rendered regardless of its depth - if is rendered even if it is behind some other 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IZBufferStateMaterial.WriteZBuffer">
            <summary>
            Gets a Boolean that specifies if Z buffer is written when rendering the object - if the object can occlude other 3D objects.
            If true then the objects behind the object will not be rendered. If false the object will not prevent rendering objects behind it.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IEnvironmentalMapMaterial">
            <summary>
            IEnvironmentalMapMaterial interface defines properties that define a material that show reflection of the environment defined by the EnvironmentalCubeMap.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IEnvironmentalMapMaterial.EnvironmentalCubeMap">
            <summary>
            Gets ShaderResourceView that defines the EnvironmentalCubeMap. 
            ShaderResourceView should define a cube map with 6 textures for each side of the cube.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IEnvironmentalMapMaterial.ReflectionFactor">
            <summary>
            Gets reflection factor from 0 to 1 that is used when <see cref="P:Ab3d.DirectX.Materials.IEnvironmentalMapMaterial.ReflectionMap"/> is not set (is null). 
            Values 1 means full reflection (only enviromental map will be shown) and 0 means that only diffuse material without environmental map is shown.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IEnvironmentalMapMaterial.ReflectionMap">
            <summary>
            Gets ShaderResourceView that defines the reflection map where white colors mean fully reflective image and black colors mean no reflection (fully diffuse).
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.HiddenLineMaterial">
            <summary>
            HiddenLineMaterial defines properties for 3D lines that will be rendered only in parts that should be hidden - line parts that are behind other 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.HiddenLineMaterial.LineColor">
            <summary>
            Gets or sets the color of the line that is determined from the WpfModel material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.HiddenLineMaterial.LineThickness">
            <summary>
            Gets or sets the thickness of the line in screen space units.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.HiddenLineMaterial.DepthBias">
            <summary>
            Gets or sets a float that specifies a bias that is used when doing a depth test.
            A bias is a value that is added to the line's depth value and can provide a small offset from another object to prevent Z-fighting that occurs when two objects have almost the same depth values.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.HiddenLineMaterial.IsRenderingOnlyHiddenLines">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Materials.HiddenLineMaterial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.HiddenLineMaterial.#ctor(SharpDX.Color4,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="lineColor">lineColor</param>
            <param name="lineThickness">lineThickness</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.HiddenLineMaterial.OnEffectChanged(Ab3d.DirectX.Effect,Ab3d.DirectX.Effect)">
            <summary>
            OnEffectChanged is called after the effect is changed - overridden methods can return false to prevent the change of effect.
            </summary>
            <param name="oldEffect">old Effect</param>
            <param name="newEffect">new Effect</param>
            <returns>false to prevent the change, true to allow the change</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.HiddenLineMaterial.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.HiddenLineMaterial.GetDefaultRenderingQueue(Ab3d.DirectX.DXScene)">
            <summary>
            Returns the RenderingQueue that should be used to render this material.
            </summary>
            <param name="parentDXScene">DXScene</param>
            <returns>RenderingQueue that should be used to render this material</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.HiddenLineMaterial.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.HiddenLineMaterial.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.Materials.PixelMaterial">
            <summary>
            PixelMaterial defines properties that define how 3D pixle are drawn with the PixelEffect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.PixelMaterial.PixelColor">
            <summary>
            Gets or sets the color of the line that is determined from the WpfModel material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.PixelMaterial.PixelSize">
            <summary>
            Gets or sets the width and height of the pixel in screen space units. This value is scaled with DPI scale factor.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.PixelMaterial.ReadZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is read when rendering the pixel - if the depth test is done when rendering the pixel.
            If false then the pixel is rendered regardless of its depth - if is rendered even if it is behind some other 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.PixelMaterial.WriteZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is written when rendering the pixel - if the pixel can occlude other 3D objects.
            If true then the objects behind the pixel will not be rendered. If false the line will not prevent rendering objects behind it.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.PixelMaterial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.PixelMaterial.#ctor(SharpDX.Color4,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="pixelColor">pixelColor</param>
            <param name="pixelSize">pixelSize</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.PixelMaterial.OnEffectChanged(Ab3d.DirectX.Effect,Ab3d.DirectX.Effect)">
            <summary>
            OnEffectChanged is called after the effect is changed - overridden methods can return false to prevent the change of effect.
            </summary>
            <param name="oldEffect">old Effect</param>
            <param name="newEffect">new Effect</param>
            <returns>false to prevent the change, true to allow the change</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.PixelMaterial.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.PixelMaterial.GetDefaultRenderingQueue(Ab3d.DirectX.DXScene)">
            <summary>
            Returns the RenderingQueue that should be used to render this material.
            </summary>
            <param name="parentDXScene">DXScene</param>
            <returns>RenderingQueue that should be used to render this material</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.PixelMaterial.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.PixelMaterial.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.Materials.LineMaterial">
            <summary>
            LineMaterial defines properties that define how 3D lines are drawn.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.LineMaterial.LineColor">
            <summary>
            Gets or sets the color of the line that is determined from the WpfModel material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.LineMaterial.LineThickness">
            <summary>
            Gets or sets the thickness of the line in screen space units. This value is scaled with DPI scale factor.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.LineMaterial.ReadZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is read when rendering the line - if the depth test is done when rendering the line.
            If false then the line is rendered regardless of its depth - if is rendered even if it is behind some other 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.LineMaterial.WriteZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is written when rendering the line - if the line can occlude other 3D objects.
            If true then the objects behind the line will not be rendered. If false the line will not prevent rendering objects behind it.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.LineMaterial.DepthBias">
            <summary>
            Gets or sets a float that specifies a bias that is used when doing a depth test.
            A bias is a value that is added to the line's depth value and can provide a small offset from another object to prevent Z-fighting that occurs when two objects have almost the same depth values.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.LineMaterial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.LineMaterial.#ctor(SharpDX.Color4,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="lineColor">lineColor</param>
            <param name="lineThickness">lineThickness</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.LineMaterial.OnEffectChanged(Ab3d.DirectX.Effect,Ab3d.DirectX.Effect)">
            <summary>
            OnEffectChanged is called after the effect is changed - overridden methods can return false to prevent the change of effect.
            </summary>
            <param name="oldEffect">old Effect</param>
            <param name="newEffect">new Effect</param>
            <returns>false to prevent the change, true to allow the change</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.LineMaterial.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.LineMaterial.GetDefaultRenderingQueue(Ab3d.DirectX.DXScene)">
            <summary>
            Returns the RenderingQueue that should be used to render this material.
            </summary>
            <param name="parentDXScene">DXScene</param>
            <returns>RenderingQueue that should be used to render this material</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.LineMaterial.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.LineMaterial.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.Materials.StandardMaterial">
            <summary>
            StandardMaterial is a material that defines the standard properties to show the diffuse, specular and emissive material properties.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.StandardMaterial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.HasTransparency">
            <summary>
            Gets or sets a boolean that specifies if this material is semi-transparent and needs to be alpha blended with the scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.Alpha">
            <summary>
            Gets or sets a float value that defines the alpha value for the material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.AmbientColor">
            <summary>
            Gets or sets a Color3 that specifies an color that defines how much ambient color is reflected by this material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.DiffuseColor">
            <summary>
            Gets or sets a Color3 that specifies the diffuse color of this material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.TextureResourceName">
            <summary>
            Gets or sets a string that can be used to specify the name of the texture - this can be a the file name of the texture file.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.DiffuseTextures">
            <summary>
            Gets or sets an array of ShaderResourceView that define the textures.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.SamplerStates">
            <summary>
            Gets or sets an array of SamplerState that define the state of the samplers.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.TextureBlendState">
            <summary>
            Gets a BlendState that is used to render the texture. If null a CommonStates.Opaque will be used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.HasSpecularColor">
            <summary>
            Gets a boolean that specifies if this material is using specular effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.SpecularColor">
            <summary>
            Gets or sets the Color3 that specifies the color used to draw the specular highlight effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.SpecularPower">
            <summary>
            Gets or sets a float that specifies the power of the specular effect. Zero values means that the specular effect is turned off.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.EmissiveColor">
            <summary>
            Gets or sets a Boolean that specifies if this material has only emissive color.
            If false than other material properties are also defined.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.StandardMaterial.HasOnlyEmissiveColor">
            <summary>
            Gets or sets a Color3 that that represents the emissive color - the color of the object regardless of the lights.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.StandardMaterial.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.Materials.VertexColorMaterial">
            <summary>
            Vertex color material can be used to render 3D objects with specifying color for each of its position.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.VertexColorMaterial.HasSpecularColor">
            <inheritdoc />
        </member>
        <member name="P:Ab3d.DirectX.Materials.VertexColorMaterial.SpecularColor">
            <inheritdoc />
        </member>
        <member name="P:Ab3d.DirectX.Materials.VertexColorMaterial.SpecularPower">
            <inheritdoc />
        </member>
        <member name="P:Ab3d.DirectX.Materials.VertexColorMaterial.HasTransparency">
            <inheritdoc />
        </member>
        <member name="P:Ab3d.DirectX.Materials.VertexColorMaterial.CreateDynamicBuffer">
            <summary>
            Gets or sets a Boolean that specifies if a dynamic vertex buffer will be created from <see cref="P:Ab3d.DirectX.Materials.VertexColorMaterial.PositionColors"/>.
            This can be used in case when the colors often change.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.VertexColorMaterial.PositionColors">
            <summary>
            Gets or sets the Color4 array that specifies the colors for each position of the object.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.VertexColorMaterial.VertexColorsVertexBufferBinding">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Materials.VertexColorMaterial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.VertexColorMaterial.#ctor(SharpDX.Color4[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.VertexColorMaterial.Update">
            <summary>
            Update method updates the DirectX vertex buffer from the current values of <see cref="P:Ab3d.DirectX.Materials.VertexColorMaterial.PositionColors"/>.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.VertexColorMaterial.OnEffectChanged(Ab3d.DirectX.Effect,Ab3d.DirectX.Effect)">
            <summary>
            OnEffectChanged is called after the effect is changed - overridden methods can return false to prevent the change of effect.
            </summary>
            <param name="oldEffect">old Effect</param>
            <param name="newEffect">new Effect</param>
            <returns>false to prevent the change, true to allow the change</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.VertexColorMaterial.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.VertexColorMaterial.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IDiffuseTextureMaterial">
            <summary>
            IDiffuseTextureMaterial interface defines properties that define a material with textures.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IDiffuseTextureMaterial.TextureResourceName">
            <summary>
            Gets a string that can be used to specify the name of the texture - this can be a the file name of the texture file.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IDiffuseTextureMaterial.DiffuseTextures">
            <summary>
            Gets an array of ShaderResourceView that define the textures.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IDiffuseTextureMaterial.SamplerStates">
            <summary>
            Gets an array of SamplerState that define the state of the samplers.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IDiffuseTextureMaterial.TextureBlendState">
            <summary>
            Gets a BlendState that is used to render the texture. If null a CommonStates.Opaque will be used.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.EffectMaterial">
            <summary>
            EffectMaterial is a material that uses the custom Effect to draw the material.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.EffectMaterial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.EffectMaterial.#ctor(Ab3d.DirectX.Effect)">
            <summary>
            Constructor
            </summary>
            <param name="effect">effect</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.EffectMaterial.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            OnInitializeResources
            </summary>
            <param name="dxDevice">DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.EffectMaterial.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IDiffuseMaterial">
            <summary>
            IDiffuseMaterial interface defines properties that define a material that reflect diffuse light.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IDiffuseMaterial.Alpha">
            <summary>
            Gets a float value that defines the alpha value for the material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IDiffuseMaterial.AmbientColor">
            <summary>
            Gets a Color3 that specifies an color that defines how much ambient color is reflected by this material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IDiffuseMaterial.DiffuseColor">
            <summary>
            Gets a Color3 that specifies the diffuse color of this material.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.IEmissiveMaterial">
            <summary>
            IEmissiveMaterial interface defines properties that define a material that emit the light in a specifed color - the object is always in the EmissiveColor regardless of the lights.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IEmissiveMaterial.HasOnlyEmissiveColor">
            <summary>
            Gets a Boolean that specifies if this material has only emissive color.
            If false than other material properties are also defined.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.IEmissiveMaterial.EmissiveColor">
            <summary>
            Gets a Color3 that that represents the emissive color - the color of the object regardless of the lights.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.ILineMaterial">
            <summary>
            ILineMaterial interface defines properties that define a line material - 3D object with this material will be rendered as wireframe.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ILineMaterial.LineColor">
            <summary>
            Gets the color of the line that is determined from the WpfModel material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ILineMaterial.LineThickness">
            <summary>
            Gets the thickness of the line in screen space units.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ILineMaterial.DepthBias">
            <summary>
            Gets a float that specifies a bias that is used when doing a depth test.
            A bias is a value that is added to the line's depth value and can provide a small offset from another object to prevent Z-fighting that occurs when two objects have almost the same depth values.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.ISpecularMaterial">
            <summary>
            ISpecularMaterial interface defines properties that define specular properties of the material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ISpecularMaterial.HasSpecularColor">
            <summary>
            Gets a boolean that specifies if this material is using specular effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ISpecularMaterial.SpecularColor">
            <summary>
            Gets the Color3 that specifies the color used to draw the specular highlight effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ISpecularMaterial.SpecularPower">
            <summary>
            Gets a float that specifies the power of the specular effect. Zero values means that the specular effect is turned off.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.ClonedRenderablePrimitive">
            <summary>
            ClonedRenderablePrimitive is rendered with the same resources as originalRenderablePrimitiveBase but with different Material.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ClonedRenderablePrimitive.OriginalRenderablePrimitive">
            <summary>
            OriginalRenderablePrimitive that was used to create this ClonedRenderablePrimitive
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ClonedRenderablePrimitive.#ctor(Ab3d.DirectX.RenderablePrimitive,Ab3d.DirectX.Material)">
            <summary>
            Constructor
            </summary>
            <param name="originalRenderablePrimitive">RenderablePrimitive that will be rendered again with new resources</param>
            <param name="material">New Material that will be used instead of Material defined in the originalRenderablePrimitiveBase</param>
        </member>
        <member name="M:Ab3d.DirectX.ClonedRenderablePrimitive.RenderGeometry(Ab3d.DirectX.RenderingContext)">
            <summary>
            RenderGeometry renders the geometry (executes draw calls but does not apply material settings)
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.GeometryMesh">
            <summary>
            GeometryMesh class is used to create Index and Vertex buffers from list of positions, normals, textureCoordinates and triangleIndices.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GeometryMesh.Positions">
            <summary>
            Gets or sets IList of Vector3 that represents the Positions.
            When this property is changed, the <see cref="M:Ab3d.DirectX.GeometryMesh.RecreateMesh"/> method must be called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GeometryMesh.Normals">
            <summary>
            Gets or sets IList of Vector3 that represents the Normals.
            When this property is changed, the <see cref="M:Ab3d.DirectX.GeometryMesh.RecreateMesh"/> method must be called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GeometryMesh.TextureCoordinates">
            <summary>
            Gets or sets IList of Vector2 that represents the TextureCoordinates.
            When this property is changed, the <see cref="M:Ab3d.DirectX.GeometryMesh.RecreateMesh"/> method must be called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GeometryMesh.TriangleIndices">
            <summary>
            Gets or sets IList of ints that represents the triangle indices.
            When this property is changed, the <see cref="M:Ab3d.DirectX.GeometryMesh.RecreateMesh"/> method must be called.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMesh.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMesh.#ctor(System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector3},System.Collections.Generic.IList{SharpDX.Vector2},System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions</param>
            <param name="normals">normals</param>
            <param name="textureCoordinates">textureCoordinates</param>
            <param name="triangleIndices">triangleIndices</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMesh.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMesh.RecreateMesh">
            <summary>
            RecreateMesh disposes the existing VertexBuffers and IndexBuffer and recreates the buffers.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMesh.UpdateBounds">
            <summary>
            Updates the Bounds of this mesh
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMesh.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.GeometryMeshGenerator">
            <summary>
            GeometryMeshGenerator contains static methods that can create Mesh objects.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMeshGenerator.CreateFullScreenQuad(System.String)">
            <summary>
            Creates a SimpleMash that defines a full screen quad (rectangle created with two triangles).
            </summary>
            <param name="name">name - FullScreenQuad by default</param>
            <returns>SimpleMesh</returns>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMeshGenerator.CreateViewportQuad(SharpDX.ViewportF,System.String)">
            <summary>
            Creates a SimpleMash that defines a quad (rectangle created with two triangles) from the specified coordinates - (0,0) is upper left corner, (1,1) is lower right corner.
            </summary>
            <param name="viewport">viewport</param>
            <param name="name">name - ViewportQuad by default</param>
            <returns>SimpleMesh</returns>
        </member>
        <member name="M:Ab3d.DirectX.GeometryMeshGenerator.CreateViewportQuad(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates a SimpleMash that defines a quad (rectangle created with two triangles) from the specified coordinates - x1 and y1 defines the bottom left position (-1, -1 for full screen); x2 and y2 define the upper right position (1, 1 for full screen).
            </summary>
            <param name="x1">x1</param>
            <param name="y1">y1 (-1 is bottom, 1 is top)</param>
            <param name="x2">x2</param>
            <param name="y2">y2</param>
            <param name="name">name - ViewportQuad by default</param>
            <returns>SimpleMesh</returns>
        </member>
        <member name="T:Ab3d.DirectX.RenderableInstancedObjectsNode">
            <summary>
            RenderableMesh class is a <see cref="T:Ab3d.DirectX.RenderablePrimitive"/> that can be used to render multiple instances of geometry based DXScene's <see cref="T:Ab3d.DirectX.ObjectNode"/>
            and where the instances are defined by VertexBufferBinding.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderableInstancedObjectsNode.InstanceBufferBinding">
            <summary>
            VertexBufferBinding that represents instances buffer
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderableInstancedObjectsNode.InstancesCount">
            <summary>
            The number of instances
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderableInstancedObjectsNode.StartInstanceLocation">
            <summary>
            The start index of the instances in InstanceBufferBinding
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderableInstancedObjectsNode.UseInstanceObjectColor">
            <summary>
            Defines the source of the object diffuse color: if true (by default) then color defined in instance buffer is used; if false color defined in IDiffuseMaterial is used for all instaces.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderableInstancedObjectsNode.#ctor(Ab3d.DirectX.ObjectNode,Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material,SharpDX.Direct3D11.VertexBufferBinding,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableInstancedObjectsNode"/> class.
            </summary>
            <param name="parentObjectNode">The parent ObjectNode</param>
            <param name="meshBase">MeshBase</param>
            <param name="material">Material</param>
            <param name="instanceBufferBinding">VertexBufferBinding that represents instances buffer</param>
            <param name="instancesCount">The number of instances</param>
            <param name="startInstanceLocation">The start index of the instances in InstanceBufferBinding</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableInstancedObjectsNode.RenderGeometry(Ab3d.DirectX.RenderingContext)">
            <summary>
            RenderGeometry renders the geometry (executes draw calls but does not apply material settings)
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderableObjectNodePrimitive">
            <summary>
            RenderableObjectNodePrimitive class is a <see cref="T:Ab3d.DirectX.RenderablePrimitive"/> that can be used to render 3D objects created from DXScene's <see cref="T:Ab3d.DirectX.ObjectNode"/> objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderableObjectNodePrimitive.ParentObjectNode">
            <summary>
            ObjectNode used to initialize this RenderableObjectNodePrimitive
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderableObjectNodePrimitive.#ctor(Ab3d.DirectX.ObjectNode,Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableObjectNodePrimitive"/> class.
            </summary>
            <param name="parentObjectNode">ObjectNode</param>
            <param name="meshBase">MeshBase</param>
            <param name="material">Material</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableObjectNodePrimitive.#ctor(Ab3d.DirectX.ObjectNode,Ab3d.DirectX.MeshBase,Ab3d.DirectX.SubMesh)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableObjectNodePrimitive"/> class.
            </summary>
            <param name="parentObjectNode">ObjectNode</param>
            <param name="meshBase">MeshBase</param>
            <param name="subMesh">SubMesh</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableObjectNodePrimitive.#ctor(Ab3d.DirectX.ObjectNode,Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableObjectNodePrimitive"/> class.
            </summary>
            <param name="parentObjectNode">ObjectNode</param>
            <param name="meshBase">MeshBase</param>
            <param name="material">material</param>
            <param name="indexCount">Number of indices to render</param>
            <param name="startIndexLocation">start index in IndexBuffer used in DrawIndexed method</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableObjectNodePrimitive.#ctor(Ab3d.DirectX.ObjectNode,Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material,System.Int32,System.Int32,SharpDX.Matrix@)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableObjectNodePrimitive"/> class.
            </summary>
            <param name="parentObjectNode">ObjectNode</param>
            <param name="meshBase">MeshBase</param>
            <param name="material">material</param>
            <param name="indexCount">Number of indices to render</param>
            <param name="startIndexLocation">start index in IndexBuffer used in DrawIndexed method</param>
            <param name="worldMatrix"></param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableObjectNodePrimitive.#ctor(Ab3d.DirectX.ObjectNode,Ab3d.DirectX.MeshBase,Ab3d.DirectX.SubMesh,SharpDX.Matrix@)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableObjectNodePrimitive"/> class.
            </summary>
            <param name="parentObjectNode">ObjectNode</param>
            <param name="meshBase">MeshBase</param>
            <param name="subMesh">SubMesh</param>
            <param name="worldMatrix">world matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableObjectNodePrimitive.#ctor(Ab3d.DirectX.ObjectNode,Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material,SharpDX.Matrix@)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableObjectNodePrimitive"/> class.
            </summary>
            <param name="parentObjectNode">ObjectNode</param>
            <param name="meshBase">MeshBase</param>
            <param name="material">Material</param>
            <param name="worldMatrix">world matrix</param>
        </member>
        <member name="T:Ab3d.DirectX.ScreenSpaceLineMesh">
            <summary>
            ScreenSpaceLineMesh class prepares the low level DirectX objects (Index and Vertex buffers) for rendering screen-space 3D lines.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ScreenSpaceLineMesh.Positions">
            <summary>
            Positions array that form 3D lines. 
            The lines are not connected. Each line is defined by two consecutive Vector3 items.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineMesh.#ctor(SharpDX.Vector3[],System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions array that form 3D lines</param>
            <param name="isLineStrip">if true than the lines are connected, if false than lines are not connected and each line is defined by two positions</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineMesh.#ctor(SharpDX.Vector3[],System.Boolean,SharpDX.BoundingBox,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions array that form 3D lines</param>
            <param name="isLineStrip">if true than the lines are connected, if false than lines are not connected and each line is defined by two positions</param>
            <param name="boundingBox">boundingBox</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineMesh.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineMesh.RecreateMesh">
            <summary>
            Creates the VertexBuffers from the specified positions.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineMesh.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.SimpleMesh`1">
            <summary>
            SimpleMesh class is used to create Index and Vertex buffers from a list of structs which type is defined by the type T.
            For example the following struct SimpleMesh&lt;PositionTexture&gt; is used to define a mesh from a List of PositionTexture structs.
            </summary>
            <typeparam name="T">struct that holds data for one vertex - for example Ab3d.DirectX.PositionNormalTexture</typeparam>
        </member>
        <member name="P:Ab3d.DirectX.SimpleMesh`1.VertexBufferArray">
            <summary>
            Gets or sets an array of T structs that define the vertex buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SimpleMesh`1.IndexBufferArray">
            <summary>
            Gets or sets an array that is used to define the index buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SimpleMesh`1.ArrayStride">
            <summary>
            Gets or sets an integer that specifies how many VertexBufferArray elements define one Vertex. Default value is 1. See remarks for more info.
            </summary>
            <remarks>
            <para>
            <b>ArrayStride</b> gets or sets an integer that specifies how many VertexBufferArray elements define one Vertex.
            </para>
            <para>
            When SimpleMesh is created with standard vertex buffer structs like <see cref="T:Ab3d.DirectX.PositionNormalTexture"/>, then the ArrayStride should be set to 1
            because on PositionNormalTexture element (one element in array) defines all the data needed to describe one Vertex.
            </para>
            <para>
            When SimpleMesh is created with basic types like float or byte, then more then one array element is needed to define one Vertex.
            For example if Simplemesh is defined with float and one Vertex data contains position, normal and texture, then the ArrayStride should be 3 + 3 + 2 = 8 (8 float values represent one Vertex).
            When using byte, the ArrayStride should be set to (3 + 3 + 2) * 4 = 32 (32 bytes for one Vertex; 1 flaot = 4 bytes)
            </para>
            <para>
            This value must be changed before the SimpleMesh is initialized. If the value is changed after that, the <see cref="M:Ab3d.DirectX.SimpleMesh`1.RecreateMesh(System.Boolean,System.Boolean,System.Boolean)"/> must be called.
            </para>
            <para>
            Default value is 1.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.SimpleMesh`1.CreateDynamicVertexBuffer">
            <summary>
            Gets or sets a Boolean that specifies if the vertex buffer is created as a dynamic buffer.
            This can provide slightly better performance for cases when vertex buffer is updated very often.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SimpleMesh`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.SimpleMesh`1.#ctor(`0[],System.Int32[],Ab3d.DirectX.InputLayoutType,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="vertexBufferArray">array of T structs that define the vertex buffer</param>
            <param name="indexBufferArray">array that is used to define the index buffer</param>
            <param name="inputLayoutType">InputLayoutType</param>
            <param name="name">name</param>
            <param name="createDynamicVertexBuffer">when true the vertex buffer is created a a dynamic buffer (can provide slightly better performance for cases when vertex buffer is updated very often)</param>
        </member>
        <member name="M:Ab3d.DirectX.SimpleMesh`1.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.SimpleMesh`1.RecreateMesh(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            RecreateMesh disposes the existing VertexBuffers and IndexBuffer and recreates the buffers.
            </summary>
            <param name="recreateVertexBuffer">when true the vertex buffer is re-created (or updated in case of dynamic vertex buffer)</param>
            <param name="recreateIndexBuffer">when true the index buffer is re.created</param>
            <param name="updateBounds">when true the bounds are re-calculated</param>
        </member>
        <member name="M:Ab3d.DirectX.SimpleMesh`1.CalculateBounds(System.Boolean)">
            <summary>
            Calculates and updates Bounds from the specified VertexBufferArray.
            The method can calculate bounds only when VertexBufferArray is of type PositionNormalTexture and PositionNormal.
            </summary>
            <param name="throwExceptionWhenUnsupported">when true (by default) the method will throw exception when the format of VertexBufferArray is not supported; when false the method will return false in case of unsupported format</param>
            <returns>true if the bounds were calculated (false if the format of VertexBufferArray is not supported)</returns>
        </member>
        <member name="M:Ab3d.DirectX.SimpleMesh`1.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.PostProcessing.BlackAndWhitePostProcess">
            <summary>
            BlackAndWhitePostProcess is a simple <see cref="T:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess"/> that converts the scene into black and white scene.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.BlackAndWhitePostProcess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PostProcessing.BlackAndWhitePostProcess"/> class.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess">
            <summary>
            SimpleBlurPostProcess applies horizontal or vertical simple blur post process.
            This blur simply set the color of each pixel with equally averaging its color with the neighboring colors.
            Number of neighboring colors is define by FilterWidth property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.IsVerticalBlur">
            <summary>
            Gets or sets a boolean that specifies if vertical blur is applied. if false than horizontal blur is applied. 
            Note that in order to get full blur two SimpleBlurPostProcess must be used - one with horizontal and one with vertical blur.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.FilterWidth">
            <summary>
            Gets or sets the width of the filter (how much pixels are used to calculate the average pixel color). Default value is 5.
            </summary>
            <value>
            The width of the filter.
            </value>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.StepSize">
            <summary>
            Gets or sets the size of the step. Default value is 1.
            </summary>
            <value>
            The size of the step.
            </value>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.TextureSize">
            <summary>
            Gets or sets the size of the texture.
            </summary>
            <value>
            The size of the texture.
            </value>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess"/> class.
            </summary>
            <param name="isVerticalBlur">if set to <c>true</c> the SimpleBlurPostProcess will render the vertical pass; otherwise a horizontal pass is rendered.</param>
            <param name="filterWidth">width of the filter (default value is 5)</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this PostProcess.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.ApplyCustomResources(Ab3d.DirectX.RenderingContext)">
            <summary>
            ApplyResources method can be overriden to set up constant buffers or additional textures.
            Note that the sampler state should be set with overring the GetSamplerState.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.GetSamplerState(Ab3d.DirectX.RenderingContext)">
            <summary>
            Gets a sampler state that will be used to sample the input texture (CommonStates.LinearClamp by default)
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <returns>sampler state that will be used to sample the input texture</returns>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.Render(Ab3d.DirectX.RenderingContext,SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Render renders the post process with using the sourceShaderResourceView as the source texture.
            It rendered the output to the CurrentRenderTargetView defined in the renderingContext.
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <param name="sourceShaderResourceView">ShaderResourceView that defines the source texture - the texture that is read and changed by this post process</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimpleBlurPostProcess.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.PostProcessing.ToonShadingPostProcess">
            <summary>
            ToonShadingPostProcess is a simple <see cref="T:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess"/> that reduces the amount of colors in the scene (combining similar colors into one color)
            and creating a look like the scene would be rendered for a cartoon.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.ToonShadingPostProcess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PostProcessing.ToonShadingPostProcess"/> class.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.PostProcessing.StandardPostProcess">
            <summary>
            StandardPostProcess class is a base abstract class for all post process effects that are created by rendering a full screen quad (rectangle with two triangles)
            and have the post process login in pixel shader that is defined by the derived classes.
            The StandardPostProcess by default uses the PostProcessingVertexShader.vs vertex shader that prepares the quad for the pixel shader.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PostProcessing.StandardPostProcess.vertexShaderSharedResource">
            <summary>
            VertexShader shared resource
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PostProcessing.StandardPostProcess.inputLayoutSharedResource">
            <summary>
            InputLayout shared resource
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PostProcessing.StandardPostProcess.fullScreenQuadRenderableMeshPrimitive">
            <summary>
            RenderableMeshPrimitive that represents the full screen quad (rectangle with two triangles)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.StandardPostProcess.Viewport">
            <summary>
            Gets or sets a part of the screen that will be affected by this PostProcess.
            The coordinates are defined in NDC space (Normalized Device Coordinates) that means that the full screen post process will be defined as (0,0,1,1).
            This is also a default value for Viewport;
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.StandardPostProcess.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PostProcessing.StandardPostProcess"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.StandardPostProcess.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this PostProcess.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.StandardPostProcess.CreateQuad">
            <summary>
            Creates the SimpleMesh that defines the full screen quad.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.StandardPostProcess.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.PostProcessing.PostProcessBase">
            <summary>
            PostProcessBase is a base class for all post processes in DXEngine.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.PostProcessBase.Render(Ab3d.DirectX.RenderingContext,SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Render renders the post process
            </summary>
            <param name="renderingContext">renderingContext</param>
            <param name="sourceShaderResourceView">sourceShaderResourceView</param>
        </member>
        <member name="T:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess">
            <summary>
            SimplePixelShaderPostProcess class defines post process effects that use a pixel shader to render the post process.
            The SimplePixelShaderPostProcess is derived from the <see cref="T:Ab3d.DirectX.PostProcessing.StandardPostProcess"/> that defines the vertex shader that prepares the full screen quad used by the pixel shader.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.pixelShaderResourceName">
            <summary>
            The pixel shader resource name
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess"/> class.
            </summary>
            <param name="pixelShaderResourceName">Name of the pixel shader resource.</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this PostProcess.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.GetPixelShader(Ab3d.DirectX.DXDevice)">
            <summary>
            GetPixelShader method returns the PixelShader as shared resource.
            The pixel shader is get from EffectsManager and defined by the pixelShaderResourceName used in the constructor of this class.
            The method can be overridden to provide its own way to get the pixel shader. 
            </summary>
            <param name="dxDevice">DXDevice used for ths pixel shader</param>
            <returns>PixelShader as shared resource</returns>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.Render(Ab3d.DirectX.RenderingContext,SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Render renders the post process with using the sourceShaderResourceView as the source texture.
            It rendered the output to the CurrentRenderTargetView defined in the renderingContext.
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <param name="sourceShaderResourceView">ShaderResourceView that defines the source texture - the texture that is read and changed by this post process</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.GetSamplerState(Ab3d.DirectX.RenderingContext)">
            <summary>
            Gets a sampler state that will be used to sample the input texture (CommonStates.LinearClamp by default)
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <returns>sampler state that will be used to sample the input texture</returns>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.ApplyCustomResources(Ab3d.DirectX.RenderingContext)">
            <summary>
            ApplyResources method can be overriden to set up constant buffers or additional textures.
            Note that the sampler state should be set with overring the GetSamplerState.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.SimplePixelShaderPostProcess.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess">
            <summary>
            GaussianBlurPostProcess applies horizontal or vertical gaussian blur post process.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.IsVerticalBlur">
            <summary>
            Gets or sets a boolean that specifies if vertical blur is applied. if false than horizontal blur is applied. 
            Note that in order to get full blur two SimpleBlurPostProcess must be used - one with horizontal and one with vertical blur.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.BlurStandardDeviation">
            <summary>
            Gets or sets a standard deviation value that is used to calculate the gaussian values. Default value is 2.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.TextureSize">
            <summary>
            Gets or sets the size of the texture.
            </summary>
            <value>
            The size of the texture.
            </value>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.#ctor(System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess"/> class.
            </summary>
            <param name="isVerticalBlur">if set to <c>true</c> the GaussianBlurPostProcess will render the vertical pass; otherwise a horizontal pass is rendered.</param>
            <param name="blurStandardDeviation">blur standard deviation (default value is 2)</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes this PostProcess.
            </summary>
            <param name="dxDevice">parent DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.Render(Ab3d.DirectX.RenderingContext,SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Render renders the post process with using the sourceShaderResourceView as the source texture.
            It rendered the output to the CurrentRenderTargetView defined in the renderingContext.
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <param name="sourceShaderResourceView">ShaderResourceView that defines the source texture - the texture that is read and changed by this post process</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.ApplyCustomResources(Ab3d.DirectX.RenderingContext)">
            <summary>
            ApplyResources method can be overridden to set up constant buffers or additional textures.
            Note that the sampler state should be set with overriding the GetSamplerState.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.GetSamplerState(Ab3d.DirectX.RenderingContext)">
            <summary>
            Gets a sampler state that will be used to sample the input texture (CommonStates.LinearClamp by default)
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <returns>sampler state that will be used to sample the input texture</returns>
        </member>
        <member name="M:Ab3d.DirectX.PostProcessing.GaussianBlurPostProcess.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.ChangeBackBufferRenderingStep">
            <summary>
            ChangeBackBufferRenderingStep can be used to change the current BackBuffer, RenderTargetView, DepthStencilView or Viewport.
            To set the new back buffer values use the <see cref="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.SetNewBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)"/> method. To set the new Viewport value set the <see cref="P:Ab3d.DirectX.ChangeBackBufferRenderingStep.NewViewport"/> property.
            When this rendering step is executed, the OutputMerger targets are chenged (if SetNewBackBuffer was called) and properties related to current back buffer in RenderingContext are changed.
            If NewViewport is set then also the Viewport in the RenderingContext and in Rasterizer are changed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ChangeBackBufferRenderingStep.NewBackBuffer">
            <summary>
            Gets the BackBuffer as Texture2D that will be used in the further rendering steps.
            This value is set with <see cref="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.SetNewBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)" /> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ChangeBackBufferRenderingStep.NewBackBufferDescription">
            <summary>
            Gets sets the description of the BackBuffer.
            This value is set with <see cref="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.SetNewBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)" /> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ChangeBackBufferRenderingStep.NewRenderTargetView">
            <summary>
            Gets the RenderTargetView that will be used in the further rendering steps.
            This value is set with <see cref="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.SetNewBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)" /> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ChangeBackBufferRenderingStep.NewDepthStencilView">
            <summary>
            Gets the DepthStencilView that will be used in the further rendering steps.
            This value is set with <see cref="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.SetNewBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)" /> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ChangeBackBufferRenderingStep.NewViewport">
            <summary>
            Gets or sets the viewport that will be used in the further rendering steps.
            If this property is not set, the Viewport in RenderingContext will not be changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.SetNewBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            Sets the BackBuffer its RenderTargetView and DepthStencilView that will be set changed by this RenderingStep.
            </summary>
            <param name="backBuffer">Texture2D of the back buffer</param>
            <param name="backBufferDescription">Texture2DDescription of the back buffer</param>
            <param name="renderTargetView">RenderTargetView of the back buffer</param>
            <param name="depthStencilView">DepthStencilView for the back buffer</param>
        </member>
        <member name="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.ChangeBackBufferRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="T:Ab3d.DirectX.CompleteRenderingStep">
            <summary>
            CompleteRendering is the last rendering step. It Presents SwapChain (if used) or prepares the output buffer that can be send to WPF or CPU memory.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.CompleteRenderingStep.DeviceContextFlushTimeoutMs">
            <summary>
            Time in milliseconds that is used as timeout when waiting until the DirectX completes the rendering of an image and before the rendered image is sent to WPF or main memory. 
            This timeout is not used when using SwapChain.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.CompleteRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.CompleteRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.CompleteRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="M:Ab3d.DirectX.CompleteRenderingStep.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.CustomActionRenderingStep">
            <summary>
            CustomActionRenderingStep can be used to execute custom method as part of rendering process.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.CustomActionRenderingStep.CustomActionHandler">
            <summary>
            Delegate that defined the CustomAction used by CustomActionRenderingStep.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="P:Ab3d.DirectX.CustomActionRenderingStep.CustomAction">
            <summary>
            Gets or sets a delegate that will be called when this rendering step is executed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.CustomActionRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.CustomActionRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.CustomRenderingContext">
            <summary>
            CustomRenderingContext is the same as it base <see cref="T:Ab3d.DirectX.RenderingContext"/> class, except that this class has two additional public methods: <see cref="M:Ab3d.DirectX.CustomRenderingContext.SetPerFrameData(System.Int32,Ab3d.DirectX.DXScene.ChangeNotifications)"/> and <see cref="M:Ab3d.DirectX.CustomRenderingContext.SetFinalBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/>.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.CustomRenderingContext.#ctor(Ab3d.DirectX.DXScene,SharpDX.Direct3D11.DeviceContext,Ab3d.DirectX.ContexStatesManager)">
            <summary>
            Constructor
            </summary>
            <param name="dxScene">DXScene</param>
            <param name="deviceContext">DeviceContext</param>
            <param name="contextStatesManager">ContexStatesManager</param>
        </member>
        <member name="M:Ab3d.DirectX.CustomRenderingContext.SetPerFrameData(System.Int32,Ab3d.DirectX.DXScene.ChangeNotifications)">
            <summary>
            SetPerFrameData
            </summary>
            <param name="frameNumber">frameNumber</param>
            <param name="renderReason">ChangeNotifications flags that were set on DXScene with NotifyChange method and describe the changes that lead to render</param>
        </member>
        <member name="M:Ab3d.DirectX.CustomRenderingContext.SetFinalBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)">
            <summary>
            SetFinalBackBuffer - a back buffer that will get the final rendering of the rendering process.
            </summary>
            <param name="finalBackBuffer">finalBackBuffer</param>
            <param name="finalBackBufferDescription">finalBackBufferDescription</param>
            <param name="finalRenderTargetView">finalRenderTargetView</param>
        </member>
        <member name="T:Ab3d.DirectX.InitializeRenderingStep">
            <summary>
            InitializeRendering is the first rendering step. It sets up the RenderingContext with current RenderTargets, resets statistics, etc.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.InitializeRenderingStep.IsInitializingFromDXScene">
            <summary>
            Gets or sets a Boolean that specifies if this InitializeRenderingStep sets BackBuffers, BackBuffer views, CurrentViewport and UsedCamera from DXScene.
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.InitializeRenderingStep.IsSortingRenderingQueues">
            <summary>
            Gets or sets a Boolean that specifies if this InitializeRenderingStep calls Sort method on all RenderingQueues that support sorting.
            Default value is true. It can be set to false to disable sorting RenderingQueues or manually sort RenderingQueues in some other rendering step.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.InitializeRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.InitializeRenderingStep"/> class.
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.InitializeRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.PreparePostProcessingRenderingStep">
            <summary>
            PreparePostProcessingRenderingStep prepares Shader resources and Render targets for <see cref="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.RenderPostProcessingRenderingStep"/>.
            </summary>
            <remarks>
            <para>
            <b>PreparePostProcessingRenderingStep</b> prepares Shader resources and Render targets for <see cref="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.RenderPostProcessingRenderingStep"/>.
            </para>
            <para>
            The purpose of having separate <b>PreparePostProcessingRenderingStep</b> and <see cref="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.RenderPostProcessingRenderingStep"/> is to allow you to 
            use custom rendering step that prepares some other buffers for post process rendering or to use the buffers perpared in this step for custom post process rendering.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingBuffer1">
            <summary>
            Gets the first Texture2D buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingBufferDescription1">
            <summary>
            Gets the description of the first Texture2D buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingRenderTargetView1">
            <summary>
            Gets the first RenderTargetView
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingShaderResourceView1">
            <summary>
            Gets the first ShaderResourceView
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingBuffer2">
            <summary>
            Gets the second Texture2D buffer (used when rendering more than one post process)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingBufferDescription2">
            <summary>
            Gets the description of the second Texture2D buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingRenderTargetView2">
            <summary>
            Gets the second RenderTargetView (used when rendering more than one post process)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.PostProcessingShaderResourceView2">
            <summary>
            Gets the second ShaderResourceView (used when rendering more than one post process)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PreparePostProcessingRenderingStep.RenderPostProcessingRenderingStep">
            <summary>
            Gets the RenderPostProcessingRenderingStep that will be initialized from this PreparePostProcessingRenderingStep.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PreparePostProcessingRenderingStep.#ctor(Ab3d.DirectX.RenderPostProcessingRenderingStep,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PreparePostProcessingRenderingStep"/> class.
            </summary>
            <param name="renderPostProcessingRenderingStep">The render post processing rendering step.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">renderPostProcessingRenderingStep</exception>
        </member>
        <member name="M:Ab3d.DirectX.PreparePostProcessingRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.PreparePostProcessingRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="M:Ab3d.DirectX.PreparePostProcessingRenderingStep.Dispose(System.Boolean)">
            <summary>
            Dispose any resources that are created in RenderingStep.
            </summary>
            <param name="isDisposing">isDisposing</param>
        </member>
        <member name="T:Ab3d.DirectX.PrepareRenderTargetsRenderingStep">
            <summary>
            PrepareRenderTargets is a rendering step that is usually called before objects are rendered.
            This step also calls DXScene's AfterFrameInitialized event.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PrepareRenderTargetsRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.PrepareRenderTargetsRenderingStep"/> class.
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.PrepareRenderTargetsRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.PrepareRenderTargetsRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderingContext">
            <summary>
            RenderingContext defines the context of the current rendering pass.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingContext.DXScene">
            <summary>
            Parent DXScene
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingContext.DXDevice">
            <summary>
            Used DXDevice
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingContext.DeviceContext">
            <summary>
            Currently used DeviceContext
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingContext.ContextStatesManager">
            <summary>
            Currently used DeviceContext
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingContext.CommonStates">
            <summary>
            Currently used CommonStates
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.CurrentRenderingStep">
            <summary>
            Gets currently executing RenderingStep
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.FinalBackBuffer">
            <summary>
            Gets the Texture2D that represents the BackBuffer that will contain the finally rendered image.
            FinalBackBuffer must not use multisampling and should not be a staging buffer. 
            When you need to copy the FinalBackBuffer to the main memory, set <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/>.
            FinalBackBuffer can be set with <see cref="M:Ab3d.DirectX.RenderingContext.SetFinalBackBufferInternal(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method that can be available from a class derived from RenderingContext - for example <see cref="T:Ab3d.DirectX.CustomRenderingContext"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.FinalBackBufferDescription">
            <summary>
            Gets the description of the <see cref="P:Ab3d.DirectX.RenderingContext.FinalBackBuffer"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.FinalRenderTargetView">
            <summary>
            Gets the RenderTargetView of the <see cref="P:Ab3d.DirectX.RenderingContext.FinalBackBuffer"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.SwapChain">
            <summary>
            Gets the SwapChain when DXEngine is using SwapChain or null when SwapChain is not used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.CurrentBackBuffer">
            <summary>
            Gets the currently used BackBuffer as Texture2D.
            The value of CurrentBackBuffer is initialized from DXScene.BackBuffer or DXScene.MSAABackBuffer (when multisampling is used) in the InitializeRenderingStep.
            The value can be changed with the <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.CurrentBackBufferDescription">
            <summary>
            Gets the description of the currently used BackBuffer.
            The value of CurrentBackBufferDescription is initialized from DXScene.BackBufferDescription or DXScene.MSAABackBufferDescription (when multisampling is used) in the InitializeRenderingStep.
            The value can be changed with the <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.CurrentRenderTargetView">
            <summary>
            Gets the currently used RenderTargetView.
            The value of CurrentRenderTargetView is initialized from DXScene.RenderTargetView in the InitializeRenderingStep.
            The value can be changed with the <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.CurrentDepthStencilView">
            <summary>
            Gets the currently used DepthStencilView.
            The value of CurrentDepthStencilView is initialized from DXScene.DepthStencilView in the InitializeRenderingStep.
            The value can be changed with the <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.CurrentViewport">
            <summary>
            Gets or sets the current Viewport that is used for the next DrawCall. 
            The value of CurrentViewport is initialized from DXScene.Viewport in the InitializeRenderingStep.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.UsedCamera">
            <summary>
            Gets or sets a camera that will be used to view the scene.
            Usually UsedCamera is set in the InitializeRenderingStep from the DXScene's Camera property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.FrameNumber">
            <summary>
            Current frame number
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.RenderReason">
            <summary>
            Gets or sets ChangeNotifications flags that were set on DXScene with NotifyChange method and describe the changes that lead to render 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.VirtualRealityContext">
            <summary>
            Gets the current VirtualRealityContext that is set when DXDEngine is using rendering for virtual reality (different images for left and right eye).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer">
            <summary>
            StagingBackBuffer is used to allow coping the FinalBackBuffer to the main memory. 
            This is done in the <see cref="T:Ab3d.DirectX.CompleteRenderingStep"/> where the FinalBackBuffer is first copied to StagingBackBuffer and then
            the StagingBackBuffer is mapped so that it can be accessed by the CPU and copied to main memory.
            The StagingBackBuffer is set with <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(Ab3d.DirectX.BackBufferReadyEventHandler)"/> or <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)"/> methods.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.StagingBackBufferDescription">
            <summary>
            Gets the description of the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingContext.StagingBackBufferMappedCallbacks">
            <summary>
            Get a list of BackBufferReadyEventHandler delegate that are called when the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/> has been mapped and is ready to be copied from GPU memory to the main memory.
            A delagate is added to this list with <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(Ab3d.DirectX.BackBufferReadyEventHandler)"/> or <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)"/> methods.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.#ctor(Ab3d.DirectX.DXScene,SharpDX.Direct3D11.DeviceContext,Ab3d.DirectX.ContexStatesManager,SharpDX.DXGI.SwapChain)">
            <summary>
            Constructor (with SwapChain)
            </summary>
            <param name="dxScene">DXScene</param>
            <param name="deviceContext">DeviceContext</param>
            <param name="contextStatesManager">ContexStatesManager</param>
            <param name="swapChain">SwapChain or null if no SwapChain is used</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.#ctor(Ab3d.DirectX.DXScene,SharpDX.Direct3D11.DeviceContext,Ab3d.DirectX.ContexStatesManager)">
            <summary>
            Constructor (without SwapChain)
            </summary>
            <param name="dxScene">DXScene</param>
            <param name="deviceContext">DeviceContext</param>
            <param name="contextStatesManager">ContexStatesManager</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)">
            <summary>
            Changes the current BackBuffer and its RenderTargetView and DepthStencilView.
            With setting bindNewRenderTargetsToDeviceContext to true, it is also possible to call SetRenderTargets method on the DeviceContext.OutputMerger and change the currently bind RenderTargetView and DepthStencilView.
            The specified back buffer will be used for the following rendering steps. 
            If the specified back buffer is different from the <see cref="P:Ab3d.DirectX.RenderingContext.FinalBackBuffer"/>, then the back buffer will be copied or resolved (in case of MSAA back buffer) into FinalBackBuffer at the end of rendering.
            </summary>
            <param name="backBuffer">Texture2D of the back buffer</param>
            <param name="backBufferDescription">Texture2DDescription of the back buffer</param>
            <param name="renderTargetView">RenderTargetView of the back buffer</param>
            <param name="depthStencilView">DepthStencilView for the back buffer</param>
            <param name="bindNewRenderTargetsToDeviceContext">if false, then only the properties of this RenderingContext are changed; if true, then the newly set renderTargetView and depthStencilView will be bind to the DeviceContext - the following line will be executed: DeviceContext.OutputMerger.SetRenderTargets(depthStencilView, renderTargetView)</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(Ab3d.DirectX.BackBufferReadyEventHandler)">
            <summary>
            RegisterBackBufferMapping method is used to register a specified callback delegate that is called only once when the next frame is rendered.
            The render frame is also rendered into a special staging back buffer and that buffer is mapped so it can be accessed by the CPU (copied into main memory).
            This method creates an ad-hoc staging back buffer that is disposed after the stagingBackBufferMappedCallback is called.
            If you want to get multiple frames or specify your own staging back buffer the use the <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)"/> method.
            </summary>
            <remarks>
            <para>
            <b>RegisterBackBufferMapping</b> method is used to register a specified callback delegate that is called only once when the next frame is rendered.
            The render frame is also rendered into a special staging back buffer and that buffer is mapped so it can be accessed by the CPU (copied into main memory).
            </para>
            <para>
            This method creates an ad-hoc staging back buffer that is disposed after the stagingBackBufferMappedCallback is called.
            </para>
            <para>
            If you want to get multiple frames or specify your own staging back buffer the use the <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)"/> method.
            </para>
            <para>
            If the method is called with null value for delegate, then this cancels the previously registered delegate and disposes all created buffers.
            </para>
            <para>
            The following example shows how to render the current scene to a WriteableBitmap (taken from Ab3d.DirectX.Client.Diagnostics project from DiagnosticsWindow.xaml.cs):
            </para>
            <example>
            // _renderedBitmap is a field of type WriteableBitmap and is used in the SaveRenderedBitmap (not shown here)
            // to save the rendered bitmap.
            
            DXView.DXScene.RenderingContext.RegisterBackBufferMapping(delegate (object sender, BackBufferReadyEventArgs e)
            {
                // We will copy rendered image into a new WriteableBitmap
                _renderedBitmap = new WriteableBitmap(e.Width, e.Height, 96, 96, PixelFormats.Bgra32, null);
            
                // delegate used by RenderToBitmap method - it is called when the scene is rendered to back buffer and it is available in main CPU memory
                _renderedBitmap.Lock();
            
                var viewportRect = new Int32Rect(0, 0, e.Width, e.Height);
            
                // Copy bitmap from e.Data.DataPointer to writeableBitmap
                _renderedBitmap.WritePixels(viewportRect, e.Data.DataPointer, e.Data.SlicePitch, e.Data.RowPitch);
            
                _renderedBitmap.AddDirtyRect(viewportRect);
                _renderedBitmap.Unlock();
            
                // We do not want to show SaveFileDialog inside a rendering pipeline.
                // So once we have the image in main memory in WriteableBitmap, we delay the invoke of saving bitmap and exit this callback 
                Dispatcher.BeginInvoke(DispatcherPriority.Normal, new Action(SaveRenderedBitmap));
            });
            
            // After we have subscribed to capture next frame, we can force rendering that frame
            DXView.Refresh();
            </example>
            </remarks>
            <param name="stagingBackBufferMappedCallback">Delegate that is called when the staging back buffer has been mapped and is ready to be copied from GPU memory to the main memory</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)">
            <summary>
            RegisterBackBufferMapping registers the FinalBackBuffer to be accessable to the main memory.
            This is done with specifying the stagingBackBuffer that is used as intermediate buffer that can be mapped and then accessed by the CPU.
            The stagingBackBuffer must be created with Usage set to Staging and CpuAccessFlags set to Read.
            When the stagingBackBuffer is ready to be accessed (is mapped), the stagingBackBufferMappedCallback delegate is called.
            </summary>
            <remarks>
            <para>
            <b>RegisterBackBufferMapping</b> registers the <see cref="P:Ab3d.DirectX.RenderingContext.FinalBackBuffer"/> to be accessable to the main memory.
            </para>
            <para>
            This is done with specifying the stagingBackBuffer that is used as intermediate buffer that can be mapped and then accessed by the CPU.
            The stagingBackBuffer must be created with Usage set to Staging and CpuAccessFlags set to Read.
            </para>
            <para>
            After the rendering is completed and the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/> is specified with this method,
            the <see cref="T:Ab3d.DirectX.CompleteRenderingStep"/> first copies the <see cref="P:Ab3d.DirectX.RenderingContext.FinalBackBuffer"/> into the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/>
            and then maps it. This makes it accessable to the CPU. When this is done, the stagingBackBufferMappedCallback delegate is called.
            </para>
            <para>
            It is possible to register multiple callback delegates with calling RegisterBackBufferMapping multiple times.
            But each call to RegisterBackBufferMapping must use the same StagingBackBuffer.
            To use another StagingBackBuffer, unregister the currently registered callbacks with <see cref="M:Ab3d.DirectX.RenderingContext.UnregisterBackBufferMapping(Ab3d.DirectX.BackBufferReadyEventHandler)"/> before registering a new StagingBuffer.
            </para>
            <para>
            To unregister back buffer mapping do one of the following:<br/>
            - set the <see cref="P:Ab3d.DirectX.BackBufferReadyEventArgs.IsRegisteredForBackBufferMapping"/> property to false in the BackBufferReadyEventHandler callback parameter or<br/>
            - call the <see cref="M:Ab3d.DirectX.RenderingContext.UnregisterBackBufferMapping(Ab3d.DirectX.BackBufferReadyEventHandler)"/> method.<br/>
            </para>
            <para>        
            After all the delegates are unregistered, the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/> will be set to null.
            </para>
            </remarks>
            <param name="stagingBackBuffer">Texture2D that specifies a StagingBackBuffer created with Usage set to Staging and CpuAccessFlags set to Read</param>
            <param name="stagingBackBufferDescription">Texture2DDescription of the stagingBackBuffer</param>
            <param name="stagingBackBufferMappedCallback">Delegate that is called when the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/> has been mapped and is ready to be copied from GPU memory to the main memory</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.UnregisterBackBufferMapping(Ab3d.DirectX.BackBufferReadyEventHandler)">
            <summary>
            Unregisters the stagingBackBufferMappedCallback delegate that was registered with the <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)"/> method.
            When all the callbacks are unregistered the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/> and <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBufferMappedCallbacks"/> are set to null and
            <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBufferDescription"/> is reset to empty values.
            </summary>
            <remarks>
            <para>
            <b>UnregisterBackBufferMapping</b> unregisters the stagingBackBufferMappedCallback delegate that was registered with the <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)"/> method.
            </para>
            <para>
            When all the callbacks are unregistered the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/> and <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBufferMappedCallbacks"/> are set to null and
            <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBufferDescription"/> is reset to empty values.
            </para>
            <para>
            It is also possible to unregister by setting the <see cref="P:Ab3d.DirectX.BackBufferReadyEventArgs.IsRegisteredForBackBufferMapping"/> property to false in the BackBufferReadyEventHandler callback parameter.<br/>
            </para>
            <para>
            It is also possible to unregister all registered callbacks with <see cref="M:Ab3d.DirectX.RenderingContext.UnregisterAllBackBufferMappings"/> method.
            </para>
            </remarks>
            <param name="stagingBackBufferMappedCallback">BackBufferReadyEventHandler that was used in the RegisterBackBufferMapping call</param>
            <returns>true if there are no more callbacks registered after this call (StagingBackBuffer was set to null), false if there are still some other callbacks registered.</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.UnregisterAllBackBufferMappings">
            <summary>
            Unregisters all delegates that were registered with the <see cref="M:Ab3d.DirectX.RenderingContext.RegisterBackBufferMapping(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,Ab3d.DirectX.BackBufferReadyEventHandler)"/> methods.
            The method also sets the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBuffer"/> to null and resets the <see cref="P:Ab3d.DirectX.RenderingContext.StagingBackBufferDescription"/> to empty values.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingContext.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderingStepBase">
            <summary>
            RenderingStepBase is an abstract base class that implements IRenderingStep. It does not define any rendering logic but provides handling BeforeRunningStep and AfterRunningStep event handling.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepBase.Description">
            <summary>
            Gets a description of this rendering step.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepBase.IsEnabled">
            <summary>
            Gets or sets a boolean that specifies if this rendering step is enabled. Note that if the step is not enabled than the step events will also not be triggered.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepBase.PreviousRenderingStep">
            <summary>
            Gets the previous RenderingStep.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepBase.NextRenderingStep">
            <summary>
            Gets the next RenderingStep.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.RenderingStepBase.BeforeRunningStep">
            <summary>
            BeforeRunningStep is raised before this rendering step is run.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.RenderingStepBase.AfterRunningStep">
            <summary>
            AfterRunningStep is raised after this rendering step is run.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.Run(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.OnBeforeRunningStep">
            <summary>
            OnBeforeRunningStep
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.OnAfterRunningStep">
            <summary>
            OnAfterRunningStep
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.OnIsEnabledChanged">
            <summary>
            OnIsEnabledChanged is called when the IsEnabled is changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.OnLoaded">
            <summary>
            OnLoaded is called when this rendering step is added to the RenderingStepsList.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.OnUnloaded">
            <summary>
            OnUnloaded is called when this rendering step is removed from the RenderingStepsList.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.GetLastRenderingStep(Ab3d.DirectX.RenderingStepBase)">
            <summary>
            Returns the last rendering step that is found with starting with startRenderingStep and then advancing to following rendering steps.
            Returns null if start rendering step is null.
            </summary>
            <param name="startRenderingStep">RenderingStepBase that will be the start rendering step</param>
            <returns>last rendering step</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.GetFirstRenderingStep(Ab3d.DirectX.RenderingStepBase)">
            <summary>
            Returns the first rendering step that is found with starting with startRenderingStep and then advancing to previous rendering steps.
            Returns null if start rendering step is null.
            </summary>
            <param name="startRenderingStep">RenderingStepBase that will be the start rendering step</param>
            <returns>first rendering step</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.IsRenderingStepConnected(Ab3d.DirectX.RenderingStepBase,Ab3d.DirectX.RenderingStepBase,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the renderingStepToFind is find with searching the renderings steps connected to startRenderingStep.
            </summary>
            <param name="renderingStepToFind">rendering step to find (must not be null)</param>
            <param name="startRenderingStep">rendering step that will be the start of the seach (must not be null)</param>
            <param name="searchGroupChildRenderingSteps">if true then also the child rendering steps in the RenderingStepsGroup will be checked (true by default)</param>
            <param name="searchOnlyForward">if true then the search is done only in forward direction; if false the the previous steps are also checked (false by default)</param>
            <returns>true if the renderingStepToFind is find with searching the renderings steps connected to startRenderingStep</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepBase.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.RenderingStepsFlowControl">
            <summary>
            RenderingStepsFlowControl is a class that defines a RenderingStep that can control the flow of rendering steps execution with dynamically changing the rendering step that will be exected next.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsFlowControl.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsFlowControl.GetNextExecutedRenderingStep">
            <summary>
            Returns the RenderingStepBase that will be executed after this rendering step.
            This method is called after the OnRun method is called.
            </summary>
            <returns>RenderingStepBase that will be executed after this rendering step</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsFlowControl.OnRenderingStepsListChanged">
            <summary>
            OnRenderingStepsListChanged method is called each time after the RenderingSteps list is changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsFlowControl.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.RenderingStepsGroup">
            <summary>
            RenderingStepsGroup is a rendering step that can group multiple rendering steps inside its <see cref="P:Ab3d.DirectX.RenderingStepsGroup.Children"/> list of rendering steps.
            </summary>
            <remarks>
            <para>
            <b>RenderingStepsGroup</b> is a rendering step that can group multiple rendering steps inside its <see cref="P:Ab3d.DirectX.RenderingStepsGroup.Children"/> list of rendering steps.
            </para>
            <para>
            RenderingStepsGroup differences from other rendering steps:<br/>
            - The <see cref="M:Ab3d.DirectX.RenderingStepsGroup.OnRun(Ab3d.DirectX.RenderingContext)"/> method is never called for RenderingStepsGroup<br/>
            - The event <see cref="E:Ab3d.DirectX.RenderingStepBase.BeforeRunningStep"/> is called before the first child is executed.<br/>
            - The event <see cref="E:Ab3d.DirectX.RenderingStepBase.AfterRunningStep"/> is called after the last child is executed.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepsGroup.Children">
            <summary>
            Gets RenderingStepsList that holds the child rendering steps.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsGroup.#ctor(System.String,Ab3d.DirectX.RenderingStepsList,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="parentRenderingStepsList">parentRenderingStepsList</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsGroup.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsGroup.Dispose(System.Boolean)">
            <summary>
            Dispose this rendering step and all child rendering steps
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsGroup.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.RenderingStepsList">
            <summary>
            RenderingStepsList is a collection of rendering steps. It provides additional methods to add rendering steps before and after specific rendering step.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepsList.Count">
            <summary>
            Gets number of rendering steps
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepsList.FirstRenderingStep">
            <summary>
            Gets first rendering step
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepsList.LastRenderingStep">
            <summary>
            Gets last rendering step
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.RenderingStepsList.RenderingStepsListChanged">
            <summary>
            RenderingStepsListChanged event is triggered each time this RenderingStepsList is changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.#ctor(Ab3d.DirectX.DXScene)">
            <summary>
            Constructor
            </summary>
            <param name="parentDXScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.Add(Ab3d.DirectX.RenderingStepBase)">
            <summary>
            Adds rendering step after the last rendering step
            </summary>
            <param name="renderingStepToAdd">rendering step to add</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.AddAfter(Ab3d.DirectX.RenderingStepBase,Ab3d.DirectX.RenderingStepBase)">
            <summary>
            Adds rendering step (renderingStepToAdd) after the specified rendering step (existingRenderingStep)
            </summary>
            <param name="existingRenderingStep">rendering step after which the renderingStepToAdd will be added</param>
            <param name="renderingStepToAdd">rendering step that will be added after the existingRenderingStep</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.AddBefore(Ab3d.DirectX.RenderingStepBase,Ab3d.DirectX.RenderingStepBase)">
            <summary>
            Adds rendering step (renderingStepToAdd) before the specified rendering step (existingRenderingStep)
            </summary>
            <param name="existingRenderingStep">rendering step before which the renderingStepToAdd will be added</param>
            <param name="renderingStepToAdd">rendering step that will be added before the existingRenderingStep</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.Add(Ab3d.DirectX.RenderingStepBase[])">
            <summary>
            Adds multiple rendering steps after the last rendering step
            </summary>
            <param name="renderingStepsToAdd">rendering steps to add</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.AddAfter(Ab3d.DirectX.RenderingStepBase,Ab3d.DirectX.RenderingStepBase[])">
            <summary>
            Adds multiple rendering steps after the specified rendering step (existingRenderingStep)
            </summary>
            <param name="existingRenderingStep">rendering step after which the renderingStepToAdd will be added</param>
            <param name="renderingStepsToAdd">rendering steps that will be added after the existingRenderingStep</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.AddBefore(Ab3d.DirectX.RenderingStepBase,Ab3d.DirectX.RenderingStepBase[])">
            <summary>
            Adds multiple rendering steps before the specified rendering step (existingRenderingStep)
            </summary>
            <param name="existingRenderingStep">rendering step before which the renderingStepToAdd will be added</param>
            <param name="renderingStepsToAdd">rendering steps that will be added before the existingRenderingStep</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.Clear">
            <summary>
            Removes all rendering steps
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.Contains(Ab3d.DirectX.RenderingStepBase)">
            <summary>
            Returns true if the specified rendering step exist in this RenderingStepList. 
            </summary>
            <param name="renderingStep">rendering step</param>
            <returns>true if the specified rendering step exist in this RenderingStepList</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.Remove(Ab3d.DirectX.RenderingStepBase)">
            <summary>
            Removes the specified rendering step from this list
            </summary>
            <param name="renderingStep">rendering step to remove</param>
            <returns>true if rendering step was removed; false if rendering step did not exist in this list</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.RemoveFirst">
            <summary>
            Removes the rendering list that is the first in this list
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.RemoveLast">
            <summary>
            Removes the rendering list that is the last in this list
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.CopyTo(Ab3d.DirectX.RenderingStepBase[],System.Int32)">
            <summary>
            Copies all rendering steps from this list into the specified array.
            The array must be preallocated to the number of elements in this list.
            </summary>
            <param name="renderingStepsArray">rendering steps array whose items will be set with rendering steps from this list</param>
            <param name="index">start index in the target array</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.FindFirst``1(System.Boolean)">
            <summary>
            Returns the first RenderingStep of the specified T type.
            </summary>
            <param name="searchInChildRenderingSteps">if true the method will also search in each child rendering step in the RenderingStepsGroup. Default value is false</param>
            <typeparam name="T">type of RenderingStep</typeparam>
            <returns>first RenderingStep of the specified T type</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.FindLast``1(System.Boolean)">
            <summary>
            Returns the last RenderingStep of the specified T type.
            </summary>
            <param name="searchInChildRenderingSteps">if true the method will also seach in each child rendering step in the RenderingStepsGroup. Default value is false</param>
            <typeparam name="T">type of RenderingStep</typeparam>
            <returns>last RenderingStep of the specified T type</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.ForEach(System.Action{Ab3d.DirectX.RenderingStepBase},System.Boolean)">
            <summary>
            ForEach executes the action for each rendering step and passes the rendering step as an argument to the action.
            </summary>
            <param name="action">Action that will be executed for each rendering step</param>
            <param name="executeInChildRenderingSteps">if true the action will be also executed for each child rendering step in the RenderingStepsGroup. Default value is false</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.OnRenderingStepsListChanged">
            <summary>
            OnRenderingStepsListChanged
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.RenderingStepsList.Enumerator">
            <summary>
            Enumerator for enumerating RenderingStepBase
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingStepsList.Enumerator.Current">
            <summary>
            Current
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.Enumerator.MoveNext">
            <summary>
            Move next
            </summary>
            <returns>true if next item exist</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsList.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Ab3d.DirectX.RenderingStepsLoop">
            <summary>
            RenderingStepsLoop can be used to create loops in RenderingsSteps list.
            The loop is created with specifiying the beginLoopRenderingStep that is the first RenderingStep in the loop.
            The beginLoopRenderingStep is executed when the loopPredicate returns true. 
            When the loopPredicate returns false, the execution will continue on the rendering step after this RenderingStepsLoop.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsLoop.#ctor(System.String,Ab3d.DirectX.RenderingStepBase,System.Predicate{Ab3d.DirectX.RenderingContext},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="beginLoopRenderingStep">RenderingStep that will be the executed when the loopPredicate condition is true</param>
            <param name="loopPredicate">Predicate that returns true when the loop should continue with executing beginLoopRenderingStep; false result will continue execution on the rendering step after this RenderingStepsLoop</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsLoop.GetNextExecutedRenderingStep">
            <summary>
            Returns the RenderingStepBase that will be executed after this rendering step.
            This method is called after the OnRun method is called.
            </summary>
            <returns>RenderingStepBase that will be executed after this rendering step</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsLoop.OnLoaded">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsLoop.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingStepsLoop.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.RenderObjectsRenderingStep">
            <summary>
            RenderObjects renders the objects
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.AllowMultipassRendering">
            <summary>
            Gets or sets a boolean that specifies if multipass rendering is used when number of light is bigger than
            the number of lights that can be rendered in one rendering pass. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.OverrideEffect">
            <summary>
            When OverrideEffect is set, than it renders all objects with this effect; else the effect defined by the object's material is used
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.OverrideStandardEffect">
            <summary>
            When OverrideStandardEffect is set, than the materials that does not have any specific effect specified will be rendered with it renders all objects with OverrideStandardEffect; otherwise the DXDevice.EffectsManager.GetStandardEffect() method will be used to get the standard effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.OverrideBlendState">
            <summary>
            When OverrideBlendState is set, the specified BlendState will be used to render all the objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.OverrideDepthStencilState">
            <summary>
            When OverrideDepthStencilState is set, the specified DepthStencilState will be used to render all the objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.OverrideRasterizerState">
            <summary>
            When OverrideRasterizerState is set, the specified RasterizerState will be used to render all the objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.FilterRenderingQueuesFunction">
            <summary>
            Gets or sets a filter function that can be used to filter RenderingQueue that will be rendered (returning false for RenderingQueue that are not rendered).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.FilterObjectsFunction">
            <summary>
            Gets or sets a filter function that can be used to filter the objects that will be rendered (returning false for object that are not rendered).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderObjectsRenderingStep.FilterLightsFunction">
            <summary>
            Gets or sets a filter function that can be used to filter lights used by this RenderObjectsRenderingStep - the function should return a List{ILight}
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderObjectsRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderObjectsRenderingStep"/> class.
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderObjectsRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderObjectsRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderPostProcessingRenderingStep">
            <summary>
            RenderPostProcessing renders the post processing effects.
            </summary>
            <remarks>
            <para>
            <b>RenderPostProcessing</b> renders the post processing effects that are defined in the <see cref="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.PostProcesses"/> list.
            </para>
            <para>
            Before using the RenderPostProcessingRenderingStep, the PostProcesses list must be set to the list of post processes.
            Also the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForSinglePostProcess(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> or the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method must be called to set the resources required to run the post processes.
            </para>
            <para>
            The PostProcesses list and the resources are usually automatically set in the <see cref="T:Ab3d.DirectX.PreparePostProcessingRenderingStep"/> that sets the resources based on the <see cref="P:Ab3d.DirectX.DXScene.PostProcesses"/> list on the <see cref="T:Ab3d.DirectX.DXScene"/> object.
            </para>
            <para>
            The RenderPostProcessingRenderingStep can be also used without <see cref="T:Ab3d.DirectX.PreparePostProcessingRenderingStep"/>. In this case the resources must be manually set.
            </para>
            <para>
            When rendering <b>only one post process</b>, the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForSinglePostProcess(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> can be called.
            This method requires only sourceShaderResourceView, destinationBackBuffer, destinationBackBufferDescription and destinationRenderTargetView.
            In this case the sourceShaderResourceView is rendered directly to the destinationBackBuffer.
            </para>
            <para>
            When having <b>more than one post process</b> the RenderPostProcessingRenderingStep much more resources that must be initialized with <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            This method can be also used for only one post process.
            </para>
            <para>
            The first post process will use <see cref="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.SourceShaderResourceView"/> and will render to <see cref="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.AdditionalRenderTargetView"/> (from source buffer to additional buffer).
            Than <see cref="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.AdditionalShaderResourceView"/> will be used as source and the next post process will render to <see cref="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.SourceRenderTargetView"/> (from additional buffer to source buffer).
            Than the source and destination will change after each post process. Except last post process that is always rendered to <see cref="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.DestinationRenderTargetView"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.SourceBackBuffer">
            <summary>
            Gets a source BackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.SourceBackBufferDescription">
            <summary>
            Gets a Description of the sourceBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.SourceRenderTargetView">
            <summary>
            Gets a RenderTargetView for the SourceBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.SourceShaderResourceView">
            <summary>
            Gets a ShaderResourceView for the SourceBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForSinglePostProcess(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> or <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> methods.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.AdditionalBackBuffer">
            <summary>
            Gets an additional BackBuffer that is used when more than one post process is rendered.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.AdditionalBackBufferDescription">
            <summary>
            Gets a Description of the AdditionalBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.AdditionalRenderTargetView">
            <summary>
            Gets a RenderTargetView for the AdditionalBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.AdditionalShaderResourceView">
            <summary>
            Gets a ShaderResourceView for the AdditionalBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.DestinationBackBuffer">
            <summary>
            Gets a destination BackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForSinglePostProcess(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> or <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> methods.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.DestinationBackBufferDescription">
            <summary>
            Gets a Description of the DestinationBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForSinglePostProcess(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> or <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> methods.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.DestinationRenderTargetView">
            <summary>
            Gets a RenderTargetView for the DestinationBackBuffer.
            This value can be set with the <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForSinglePostProcess(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> or <see cref="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)"/> methods.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderPostProcessingRenderingStep.PostProcesses">
            <summary>
            Gets or sets the post processes that will be rendered by this RenderPostProcessingRenderingStep.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderPostProcessingRenderingStep"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">postProcesses</exception>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.#ctor(System.String,System.Collections.Generic.IList{Ab3d.DirectX.PostProcessing.PostProcessBase},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderPostProcessingRenderingStep"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="postProcesses">IList of post processes</param>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">postProcesses</exception>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForSinglePostProcess(SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)">
            <summary>
            Initializes resources for rendering one PostProcess.
            Rendering one post process required much less resources then rendering multiple post processes.
            </summary>
            <param name="sourceShaderResourceView">ShaderResourceView of the source Texture2D</param>
            <param name="destinationBackBuffer">destination BackBuffer as Texture2D</param>
            <param name="destinationBackBufferDescription">description of destinationBackBuffer</param>
            <param name="destinationRenderTargetView">RenderTargetView of the destinationBackBuffer</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.InitializeResourcesForMultiplePostProcesses(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.ShaderResourceView,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView)">
            <summary>
            Initializes resources for rendering multiple PostProcesses.
            To render multiple post processes we need additional BackBuffer that is used as intermediate buffer.
            </summary>
            <param name="sourceBackBuffer">source BackBuffer as Texture2D</param>
            <param name="sourceBackBufferDescription">description of sourceBackBuffer</param>
            <param name="sourceRenderTargetView">RenderTargetView of the sourceBackBuffer</param>
            <param name="sourceShaderResourceView">ShaderResourceView of the sourceBackBuffer</param>
            <param name="additionalBackBuffer">additional BackBuffer as Texture2D</param>
            <param name="additionalBackBufferDescription">description of additionalBackBuffer</param>
            <param name="additionalRenderTargetView">RenderTargetView of the additionalBackBuffer</param>
            <param name="additionalShaderResourceView">ShaderResourceView of the additionalBackBuffer</param>
            <param name="destinationBackBuffer">destination BackBuffer as Texture2D</param>
            <param name="destinationBackBufferDescription">description of destinationBackBuffer</param>
            <param name="destinationRenderTargetView">RenderTargetView of the destinationBackBuffer</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.ClearBackBuffers">
            <summary>
            Clears all set back buffers
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderPostProcessingRenderingStep.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep">
            <summary>
            ResolveMultisampledBackBufferRenderingStep resolves the multi-sampled back buffer (MSAA) into a back buffer without multi-sampling.
            The source buffer is get from the renderingContext.CurrentBackBuffer.
            The destination buffer can be set defined by setting the <see cref="P:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.DestinationBuffer"/> property.
            If the DestinationBuffer is not specified (is null), then the renderingContext.FinalBackBuffer is used for destination buffer.
            The resolve is called only when the renderingContext.CurrentBackBuffer is using MSAA (SampleDescription.Count > 1)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.DestinationBuffer">
            <summary>
            Gets or sets a Buffer (Texture2D) that will get the resolved buffer.
            If null, then renderingContext.FinalBackBuffer is used for destination buffer.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep"/> class.
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="T:Ab3d.DirectX.UpdateStatusEventHandler">
            <summary>
            UpdateStatusEventHandler is an event handler with UpdateStatusEventArgs as event arguments
            </summary>
            <param name="sender">sender</param>
            <param name="e">RenderingReasonEventArgs</param>
        </member>
        <member name="T:Ab3d.DirectX.UpdateStatusEventArgs">
            <summary>
            UpdateStatusEventArgs is used in the <see cref="E:Ab3d.DirectX.DXScene.AfterUpdated"/> event and defines the DXScene's dirty flags and a Boolena that specifes if the new frame needs to be rendered (this value can be changed by the event subscriber).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.UpdateStatusEventArgs.DXSceneDirtyFlags">
            <summary>
            Gets the DXScene's dirty flags for this frame
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.UpdateStatusEventArgs.IsRenderNeeded">
            <summary>
            Gets or sets a Boolean that specifies if this a new frame needs to be rendered (true) or not (false).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.UpdateStatusEventArgs.#ctor(Ab3d.DirectX.DXScene.ChangeNotifications,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dxSceneDirtyFlags">DXScene's dirty flags for this frame</param>
            <param name="isRenderNeeded">is rendering needed (based on the dirty flags)</param>
        </member>
        <member name="T:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep">
            <summary>
            PrepareVarianceShadowMappingRenderingStep rendering step prepares other rendering steps for variance shadow rendering.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.RenderShadowDepthRenderingStepName">
            <summary>
            Name for RenderShadowDepthRenderingStep 
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.DepthBlurPostProcessingRenderingStepName">
            <summary>
            Name for DepthBlurPostProcessingRenderingStep
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.ChangeRenderTargetRenderingStepName">
            <summary>
            Name for ChangeRenderTargetRenderingStep
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.RenderShadowObjectsRenderingStepName">
            <summary>
            Name for RenderShadowObjectsRenderingStep
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.RenderNonShadowObjectsRenderingStepName">
            <summary>
            Name for RenderNonShadowObjectsRenderingStep
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.ShadowShaderResourceView">
            <summary>
            Gets ShaderResourceView for the shadow map buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.BluredShaderResourceView1">
            <summary>
            Gets ShaderResourceView for the first blured shadow map.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.BluredShaderResourceView2">
            <summary>
            Gets ShaderResourceView for the second blured shadow map.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.#ctor(System.String,Ab3d.DirectX.VarianceShadowRenderingProvider,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of this rendering step</param>
            <param name="varianceShadowRenderingProvider">VarianceShadowRenderingProvider</param>
            <param name="description">description of this rendering step</param>
        </member>
        <member name="M:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="M:Ab3d.DirectX.PrepareVarianceShadowMappingRenderingStep.Dispose(System.Boolean)">
            <summary>
            Dispose any resources that are created in RenderingStep.
            </summary>
            <param name="isDisposing">isDisposing</param>
        </member>
        <member name="T:Ab3d.DirectX.ShadowLightData">
            <summary>
            ShadowLightData class defines data that are required for shadow mapping and are generated from one shadow light.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShadowLightData.ShadowLight">
            <summary>
            Light that the data was created from.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShadowLightData.LightPosition">
            <summary>
            Position of the light.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShadowLightData.LightViewProjection">
            <summary>
            Light ViewProjection matrix
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ShadowLightData.ShadowDepthView">
            <summary>
            ShaderResourceView of the shadow map buffer
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ShadowLightData.#ctor(Ab3d.DirectX.Lights.ILight,SharpDX.Vector3,SharpDX.Matrix@,SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Constructor
            </summary>
            <param name="shadowLight">Light that the data was created from</param>
            <param name="lightPosition">Position of the light</param>
            <param name="lightViewProjection">Light ViewProjection matrix</param>
            <param name="shadowDepthView">ShaderResourceView of the shadow map buffer</param>
        </member>
        <member name="M:Ab3d.DirectX.ShadowLightData.Update(Ab3d.DirectX.Lights.ILight,SharpDX.Vector3,SharpDX.Matrix@,SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            Updates the data
            </summary>
            <param name="shadowLight">Light that the data was created from</param>
            <param name="lightPosition">Position of the light</param>
            <param name="lightViewProjection">Light ViewProjection matrix</param>
            <param name="shadowDepthView">ShaderResourceView of the shadow map buffer</param>
        </member>
        <member name="T:Ab3d.DirectX.SuperShadowShaderEffect">
            <summary>
            SuperShadowShaderEffect is an effect that can use <see cref="T:Ab3d.DirectX.Shaders.SuperShader"/> and configure it to render the scene with using the shadow mapping buffer that was rendered before.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SuperShadowShaderEffect.EffectName">
            <summary>
            Name of this effect
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SuperShadowShaderEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SuperShadowShaderEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SuperShadowShaderEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.SuperShadowShaderEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SuperShadowShaderEffect.SetShadowMappingParameters(Ab3d.DirectX.ShadowLightData[],System.Single,Ab3d.DirectX.RenderingContext)">
            <summary>
            SetShadowMappingParameters sets parameters needed for shadow mapping.
            This method must be called after the <see cref="M:Ab3d.DirectX.Effect.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method and enabled shadow rendering until the next call to <see cref="M:Ab3d.DirectX.Effect.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </summary>
            <param name="shadowLightsData">array of ShadowLightData - one element for each light</param>
            <param name="shadowTreshold">float value that helps prevent light bleeding</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.SuperShadowShaderEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.SuperShadowShaderEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.SuperShadowShaderEffect.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.ShadowRenderingProviderBase">
            <summary>
            ShadowRenderingProviderBase is an abstract class that is a base class for all shadow rendering providers that change DXEngine rendering steps with adding shadow rendering.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ShadowRenderingProviderBase.IsEnabled">
            <summary>
            Gets or sets a Boolean that specifies if this shadow rendering provider is enabled or not.
            Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsEnabled</b> gets or sets a Boolean that specifies if this shadow rendering provider is enabled or not.
            </para>
            <para>
            IsEnabled property can be used to quickly enable of disable shadow rendering. 
            </para>
            <para>
            When the ShadowRenderingProviderBase is disabled, the created DirectX resources are usually disposed, but the created rendering steps are still part of the DXScene.RenderingSteps.
            </para>
            <para>
            To remove all the created DirectX resources and also remove the rendering steps, call the Dispose method.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            OnInitializeResources is called from the DXScene.<see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/>.
            The method calls <see cref="M:Ab3d.DirectX.ShadowRenderingProviderBase.CreateResources(Ab3d.DirectX.DXScene)"/> and <see cref="M:Ab3d.DirectX.ShadowRenderingProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> methods.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.CreateResources(Ab3d.DirectX.DXScene)">
            <summary>
            CreateResources is called when the ShadowRenderingProviderBase is initialized and should create the DirectX resources.
            </summary>
            <remarks>
            <para>
            <b>CreateResources</b> is called when the ShadowRenderingProviderBase is initialized and should create the DirectX resources.
            </para>
            <para>
            This method is called after this shadow rendering provider is registered with calling the <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method. 
            This method then calls the <see cref="M:Ab3d.DirectX.DXSceneResource.InitializeResources(Ab3d.DirectX.DXScene)"/> and the <see cref="M:Ab3d.DirectX.ShadowRenderingProviderBase.OnInitializeResources(Ab3d.DirectX.DXScene)"/>.
            OnInitializeResources calls the this CreateResources method and then <see cref="M:Ab3d.DirectX.ShadowRenderingProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> method.
            </para>
            <para>
            This method usually creates required shaders, constant buffers and additional texture buffers.
            </para>
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)">
            <summary>
            InitializeRenderingSteps is called when the ShadowRenderingProviderBase is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            See remarks for more into.
            </summary>
            <remarks>
            <para>
            <b>InitializeRenderingSteps</b> is called when the ShadowRenderingProviderBase is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            </para>
            <para>
            It is recommended that the created rendering steps are protected or public with private setter.
            This way a derived class can override the InitializeRenderingSteps method and add the created rendering steps in some other was to the DXScene.RenderingSteps.
            </para>
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.OnIsEnabledChanged(System.Boolean)">
            <summary>
            OnIsEnabledChanged is called when the IsEnabled property is changed.
            </summary>
            <param name="newIsEnabledValue"></param>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.NotifyDXSceneChange">
            <summary>
            NotifyDXSceneChange calls NotifyChange on dxScene and sets the ShadowRenderingSettingsChanged flag.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.IsCastingShadow(Ab3d.DirectX.Lights.ILight)">
            <summary>
            Returns true if the light is casting shadow and is supported by current shadow rendering provider.
            </summary>
            <param name="light">ILight</param>
            <returns>true if the light is casting shadow, otherwise false</returns>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.CollectShadowLights(System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},System.Collections.Generic.List{Ab3d.DirectX.Lights.ILight})">
            <summary>
            Clears the filteredLights list and fills it with all lights that have IsCastingShadow set to true and implement ISpotLight interface.
            </summary>
            <param name="allSceneLights">allSceneLights</param>
            <param name="filteredLights">changed lights list</param>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.CollectNonShadowLights(System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},System.Collections.Generic.List{Ab3d.DirectX.Lights.ILight})">
            <summary>
            Clears the filteredLights list and fills it with all lights that have IsCastingShadow set to false (or do not define IsCastingShadow or ISpotLight interface).
            </summary>
            <param name="allSceneLights">allSceneLights</param>
            <param name="filteredLights">changed lights list</param>
        </member>
        <member name="M:Ab3d.DirectX.ShadowRenderingProviderBase.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.VarianceDepthBlurPostProcess">
            <summary>
            VarianceDepthBlurPostProcess is a post process that applies blur to depth data created with variance depth mapping.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.VarianceDepthBlurPostProcess.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.VarianceDepthBlurPostProcess"/> class.
            </summary>
            <param name="isVerticalBlur">if set to <c>true</c> the VarianceDepthBlurPostProcess will render the vertical pass; otherwise a horizontal pass is rendered.</param>
            <param name="filterWidth">width of the filter (default value is 5)</param>
        </member>
        <member name="M:Ab3d.DirectX.VarianceDepthBlurPostProcess.GetSamplerState(Ab3d.DirectX.RenderingContext)">
            <summary>
            Gets a sampler state that will be used to sample the input texture (CommonStates.LinearClamp by default)
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <returns>sampler state that will be used to sample the input texture</returns>
        </member>
        <member name="M:Ab3d.DirectX.VarianceDepthBlurPostProcess.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.VarianceShadowDepthEffect">
            <summary>
            VarianceShadowDepthEffect renders the objects with writing the object's depth and depth squared into the render target.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.VarianceShadowDepthEffect.EffectName">
            <summary>
            Name of this effect
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.VarianceShadowDepthEffect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowDepthEffect.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowDepthEffect.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowDepthEffect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowDepthEffect.SetShadowDepthParameters(Ab3d.DirectX.ShadowLightData)">
            <summary>
            Sets shadow light data to this effect
            </summary>
            <param name="shadowLightData">ShadowLightData</param>
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowDepthEffect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            This method also sets PassesCount.
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowDepthEffect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowDepthEffect.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.VarianceShadowRenderingProvider">
            <summary>
            VarianceShadowRenderingProvider provides support for rendering shadows with using Variance shadow rendering technique.
            Currently only one SpotLight or one DirectionalLight shadow casting light is supported.
            </summary>
            <remarks>
            <para>
            VarianceShadowRenderingProvider provides support for rendering shadows with using Variance shadow rendering technique.
            </para>
            <para>
            The used algorithm is based on the GPU Gems3 "Chapter 8. Summed-Area Variance Shadow Maps" (http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html)
            </para>
            <para>
            Currently only one SpotLight or one DirectionalLight shadow casting light is supported.
            </para>
            <example>
            <para>
            To enable shadow rendering the <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method must be called with an instance of VarianceShadowRenderingProvider.
            Then the light that casts the shadow need to be specified with setting the DXAttributeType.IsCastingShadow attribute on the light.
            The following code shows that:
            </para>    
            <code>
            // Create new VarianceShadowRenderingProvider
            var varianceShadowRenderingProvider = new VarianceShadowRenderingProvider()
            {
                ShadowMapSize = 512,
                ShadowDepthBluringSize = 4,
                ShadowTreshold = 0.2f
            };
            
            // Initialize shadow rendering with DXEngine
            MainDXViewportView.DXScene.InitializeShadowRendering(varianceShadowRenderingProvider);
            
            
            // Create a SpotLight
            var shadowSpotLight = new SpotLight()
            {
                Position = new Point3D(0, 100, -500),
                Direction = new Vector3D(0, -1, 5)
            };
            
            // Mark it for casting shadow (set IsCastingShadow DXEngine attribute to true)
            shadowSpotLight.SetDXAttribute(DXAttributeType.IsCastingShadow, true);
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.VarianceShadowRenderingProvider.ShadowMapSize">
            <summary>
            Gets or sets and integer value that represents the size of a shadow depth map texture. Default value is 512 and means that by default a 512 x 512 texture will be used.
            </summary>
            <remarks>
            <para>
            <b>ShadowMapSize</b> gets or sets and integer value that represents the size of a shadow depth map texture.
            </para>
            <para>
            The value defines the width and height of the texture. For example value 512 means that a 512 x 512 texture will be used.
            </para>
            <para>
            The shadow depth map texture is used to store depth information - distance of a pixel from the light.
            </para>
            <para>
            Bigger texture will produce more detailed shadows but will be slower to render.
            Also, to bigger texture will require bigger blur amount to achieve nice shoft edges.
            </para>
            <note type="note">
            The ShadowMapSize and <see cref="P:Ab3d.DirectX.VarianceShadowRenderingProvider.ShadowDepthBluringSize"/> values must be changed before the VarianceShadowRenderingProvider is initialized.
            To change the value of those two properties do the following:<br/>
            1) disable the existing VarianceShadowRenderingProvider with calling <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method with null parameter;<br/>
            2) create a new instance of VarianceShadowRenderingProvider with new values for ShadowMapSize and ShadowDepthBluringSize;<br/>
            3) Call the <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method again an pass the new instance of VarianceShadowRenderingProvider as parameter.
            </note>
            <para>
            Default value is 512.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.VarianceShadowRenderingProvider.ShadowDepthBluringSize">
            <summary>
            Gets or sets an integer that specifies the blur amout that is applied on the shadow depth map and can produce shadows with nice soft edges. Default value is 4.
            </summary>
            <remarks>
            <para>
            <b>ShadowDepthBluringSize</b> gets or sets an integer that specifies the blur amout that is applied on the shadow depth map and can produce shadows with nice soft edges.
            </para>
            <para>
            Default value is 4.
            </para>
            <note type="note">
            The <see cref="P:Ab3d.DirectX.VarianceShadowRenderingProvider.ShadowMapSize"/> and values must be changed before the VarianceShadowRenderingProvider is initialized.
            To change the value of those two properties do the following:<br/>
            1) disable the existing VarianceShadowRenderingProvider with calling <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method with null parameter;<br/>
            2) create a new instance of VarianceShadowRenderingProvider with new values for ShadowMapSize and ShadowDepthBluringSize;<br/>
            3) Call the <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method again an pass the new instance of VarianceShadowRenderingProvider as parameter.
            </note>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.VarianceShadowRenderingProvider.ShadowTreshold">
            <summary>
            Gets or sets a float value that helps prevent light bleeding (having areas that should be in shadow fully illuminated) for variance shadow mapping. Default value is 0.2f.
            </summary>
            <remarks>
            <para>
            Gets or sets a float value that helps prevent light bleeding (having areas that should be in shadow fully illuminated) for variance shadow mapping.
            </para>
            <para>
            The value is used to map all shadow values from 0 ... ShadowTreshold to 0 and then linearly rescale the values from ShadowTreshold to 1 into 0 to 1.
            </para>
            <para>
            For more info see "Shadow bleeding" in "Chapter 8. Summed-Area Variance Shadow Maps" (http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html)
            </para>
            <para>
            Default value is 0.2f.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowRenderingProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowRenderingProvider.CreateResources(Ab3d.DirectX.DXScene)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowRenderingProvider.InitializeRenderingSteps(Ab3d.DirectX.DXScene)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.VarianceShadowRenderingProvider.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.AnaglyphVirtualRealityProvider">
            <summary>
            AnaglyphVirtualRealityProvider is a VirtualRealityProvider that can render stereoscopic anaglyph images that can be viewed with colored glasses - for example red / cyan glasses.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.resolveAnaglyphImagesRenderingStep">
            <summary>
            SimpleResolveStereoscopicImagesRenderingStep that is created in the InitializeRenderingSteps method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.AnaglyphVirtualRealityProvider.ColorTransformation">
            <summary>
            Gets or sets a AnaglyphColorTransformation that defines how the anaglyph rendering combines colors from left and right eye.
            This is done by specifying the matrices that are used to multiply colors for left and right eye and with a gamma correction value.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.AnaglyphVirtualRealityProvider.AnaglyphColorTransformation">
            <summary>
            AnaglyphColorTransformation class defines the matrices that are used to multiply colors for left and right eye.
            It also defines the gamma value that is used to apply gamma correction before the matrix multiplication.
            </summary>
            <remarks>
            <para>
            AnaglyphColorTransformation class defines the matrices that are used to multiply colors for left and right eye.
            It also defines the gamma value that is used to apply gamma correction before the matrix multiplication.
            </para>
            <para>
            The meaning behind the number in the matrices is the following:
            </para>
            <para>
            The rows in the matrix represent the destination color. For example the left eye matrix defined above will output only red color because values are defined
            only in the first row (RGB means - 1st row = red, 2nd row = green, 3rd row = blue). The second and third row there are 0, 0, 0 - so left eye will not have any green or blue color.
            The right eye matrix defines values for green and blue colors (green + blue = cyan). So the right eye is best seen with cyan glasses.
            </para>
            <para>
            The columns in the matrix represent how the source color is used.
            For example the "0.299f, 0.587f, 0.114f" means that the output color will be get with using 29.9% red, 58.7% green and 11.4% blue
            </para>
            <para>
            The gamma values can be used to apply a gamma correction before the matrix calculations are applied.
            This "boost" specific colors.
            When value 1.0f is used for gamma, then this color will have any gamma correction.
            When gamma vector is 1, 1, 1 then a simplified and faster pixel shader without gamma correction is used.        
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.AnaglyphColorTransformation.LeftEyeMatrix">
            <summary>
            Matrix3x3 for colors rendered for left eye
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.AnaglyphColorTransformation.RightEyeMatrix">
            <summary>
            Matrix3x3 for colors rendered for right eye
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.AnaglyphColorTransformation.Gamma">
            <summary>
            Color3 that specifies gamma correction values for red, green and blue colors.
            1.0f means no gamma correction.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.AnaglyphColorTransformation.#ctor(SharpDX.Matrix3x3,SharpDX.Matrix3x3,SharpDX.Color3)">
            <summary>
            Constructor with specified gamma values
            </summary>
            <param name="leftEyeMatrix">Matrix3x3 for colors rendered for left eye</param>
            <param name="rightEyeMatrix">Matrix3x3 for colors rendered for right eye</param>
            <param name="gamma">Color3 that specifies gamma correction values for red, green and blue colors (1.0f means no gamma correction)</param>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.AnaglyphColorTransformation.#ctor(SharpDX.Matrix3x3,SharpDX.Matrix3x3)">
            <summary>
            Constructor without specified gamma values
            </summary>
            <param name="leftEyeMatrix">Matrix3x3 for colors rendered for left eye</param>
            <param name="rightEyeMatrix">Matrix3x3 for colors rendered for right eye</param>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.TrueAnaglyph">
            <summary>
            TrueAnaglyph
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.GrayAnaglyph">
            <summary>
            GrayAnaglyph 
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.ColorAnaglyph">
            <summary>
            ColorAnaglyph
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.HalfColorAnaglyph">
            <summary>
            HalfColorAnaglyph
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.LeftEye">
            <summary>
            LeftEye
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.RightEye">
            <summary>
            RightEye
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.OptimizedAnaglyph">
            <summary>
            OptimizedAnaglyph
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.AnaglyphVirtualRealityProvider.DuboisAnaglyph">
            <summary>
            DuboisAnaglyph
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.#ctor(System.Single,System.Single,Ab3d.DirectX.AnaglyphVirtualRealityProvider.AnaglyphColorTransformation)">
            <summary>
            Constructor
            </summary>
            <param name="eyeSeparation">distance between left and right eye</param>
            <param name="parallax">value in degrees that specifies an angle of the left and right eye look direction</param>
            <param name="anaglyphColorTransformation">AnaglyphColorTransformation that specifies how the left and right images are combined</param>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.CreateResources(Ab3d.DirectX.DXScene)">
            <summary>
            CreateResources is called when the VirtualRealityProvider is initialized and should create the DirectX resources.
            </summary>
            <remarks>
            <para>
            <b>CreateResources</b> is called when the VirtualRealityProvider is initialized and should create the DirectX resources.
            </para>
            <para>
            This method is called after this virtual reality provider is registered with calling the <see cref="M:Ab3d.DirectX.DXScene.InitializeVirtualRealityRendering(Ab3d.DirectX.VirtualRealityProviderBase)"/> method. 
            This method then calls the <see cref="M:Ab3d.DirectX.DXSceneResource.InitializeResources(Ab3d.DirectX.DXScene)"/> and the <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.OnInitializeResources(Ab3d.DirectX.DXScene)"/>.
            OnInitializeResources calls the this CreateResources method and then <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> method.
            </para>
            <para>
            This method usually creates pixel shaders and constant buffers.
            Other resources (back buffers and views) are usually created in <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)"/> where the size of the current back buffer is compared with the size of back buffers for virtual reality.
            </para>
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.InitializeRenderingSteps(Ab3d.DirectX.DXScene)">
            <summary>
            InitializeRenderingSteps is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            See remarks for more into.
            </summary>
            <remarks>
            <para>
            <b>InitializeRenderingSteps</b> is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            </para>
            <para>
            Usually the virtual reality rendering provider adds 3 rendering steps to existing rendering step:<br/>
            1) <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> is added before DXScene.DefaultPrepareRenderTargetsRenderingStep (prepares the rendering context for the currently rendered eys)<br/>
            2) <see cref="T:Ab3d.DirectX.RenderingStepsLoop"/> is added after DXScene.DefaultResolveMultisampledBackBufferRenderingStep (this renders the scene again for the other eye - jumps to BeginVirtualRealityRenderingStep)<br/>
            3) <see cref="T:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep"/> or similar step is added after RenderingStepsLoop (to render post-process effects after the VR resolve) or befor DXScene.DefaultCompleteRenderingStep (to render post-process effects before the VS resolve).
            </para>
            <para>
            It is recommended that the created rendering steps are protected or public with private setter.
            This way a derived class can override the InitializeRenderingSteps method and add the created rendering steps in some other was to the DXScene.RenderingSteps.
            </para>        
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.OnIsEnabledChanged(System.Boolean)">
            <summary>
            OnIsEnabledChanged is called when the IsEnabled property is changed.
            </summary>
            <param name="newIsEnabledValue"></param>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)">
            <summary>
            UpdateRenderingContext is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            See remarks for more info about the usual tasks that are preformed in this method.
            </summary>
            <remarks>
            <para>
            <b>UpdateRenderingContext</b> is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            </para>
            <para>
            This method is usually called from the <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> (when the virtual reality provider is enabled).
            </para>
            <para>
            Usually this method does the following:<br/>
            - Creates the back buffers and views that are needed for rendering 
            (the back buffers are also recreated if the size of <see cref="P:Ab3d.DirectX.RenderingContext.CurrentBackBufferDescription"/> is different from the size of previously created back buffers).<br/>
            - Updates the <see cref="P:Ab3d.DirectX.VirtualRealityContext.CurrentEye"/> property.<br/>
            - Sets the <see cref="P:Ab3d.DirectX.RenderingContext.UsedCamera"/> property to a <see cref="T:Ab3d.DirectX.Cameras.StereoscopicCamera"/><br/>
            - Calls <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method and sets the new back buffers.<br/>
            - Calls <see cref="P:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.DestinationBuffer"/> on the <see cref="P:Ab3d.DirectX.DXScene.DefaultResolveMultisampledBackBufferRenderingStep"/>.
            </para>
            </remarks>
            <param name="renderingContext">RenderingContext</param>
            <param name="isNewFrame">true if no eye was yet rendered for the current frame; false if the first eye was already rendered for the current frame and we need to render the second eye</param>
        </member>
        <member name="M:Ab3d.DirectX.AnaglyphVirtualRealityProvider.Dispose(System.Boolean)">
            <summary>
            Dispose the created resource and removes the added rendering steps.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep">
            <summary>
            BeginVirtualRealityRenderingStep is a rendering step that prepares the rendering context for rendering the current eye.
            It is usually added before DXScene.DefaultPrepareRenderTargetsRenderingStep.
            When the virtual reality provider defined in current VirtualRealityContext is enabled, this step calls the <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)"/> method.
            If virtual reality provider is not enabled this step does nothing.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.BeginVirtualRealityRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.BeginVirtualRealityRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.BackBufferReadyEventHandler">
            <summary>
            BackBufferReadyEventHandler is used to describe the BackBufferReady event handler
            </summary>
            <param name="sender">object</param>
            <param name="e">BackBufferReadyEventArgs</param>
        </member>
        <member name="T:Ab3d.DirectX.BackBufferReadyEventArgs">
            <summary>
            BackBufferReadyEventArgs is an event handler that is used for the BackBufferReady event.
            BackBufferReady event is fired when the scene is rendered to back buffer that is ready to be mapped and copy from graphics card to system memory.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.BackBufferReadyEventArgs.Width">
            <summary>
            Width of back buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.BackBufferReadyEventArgs.Height">
            <summary>
            Height of back buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.BackBufferReadyEventArgs.Format">
            <summary>
            Format of back buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.BackBufferReadyEventArgs.Data">
            <summary>
            BackBuffer Data as SharpDX DataBox
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.BackBufferReadyEventArgs.IsRegisteredForBackBufferMapping">
            <summary>
            Boolean that can be set to false by the subscriber of the <see cref="T:Ab3d.DirectX.BackBufferReadyEventHandler"/> to unregister from being called on the next frame.
            </summary>
            <remarks>
            <para>
            IsRegisteredForBackBufferMapping is a Boolean that is set to true by default.
            The subscriber of the <see cref="T:Ab3d.DirectX.BackBufferReadyEventHandler"/> can set it to false to unregister from being called on the next frame.
            </para>
            <para>
            This simplifies scenarios when only one frame is captured. 
            With setting the IsRegisteredForBackBufferMapping to false, the subscribed does not need to call the <see cref="M:Ab3d.DirectX.RenderingContext.UnregisterBackBufferMapping(Ab3d.DirectX.BackBufferReadyEventHandler)"/> method and does not need to provide the delegate as a method.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.BackBufferReadyEventArgs.#ctor(System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DataBox)">
            <summary>
            Constructor
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="format">format</param>
            <param name="data">data</param>
        </member>
        <member name="T:Ab3d.DirectX.Effect">
            <summary>
            Effect is a base class for all effects that can render a mesh (vertex and index buffer) with the material that defines the properties that defined the effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effect.RequiredInputLayoutType">
            <summary>
            Gets the input layout that is required to render this effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Effect.LastUsedFrameNumber">
            <summary>
            Gets the frame number when the ApplyPerFrameSettings was last called.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effect.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">effect name</param>
        </member>
        <member name="M:Ab3d.DirectX.Effect.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effect.OnApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Effect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Applies the material and object's world matrix to this effect.
            </summary>
            <remarks>
            <para>
            <b>ApplyMaterial</b> applies the material and object's world matrix to this effect.
            </para>
            <para>
            Usually effects define two constant buffers:<br/>
            - one that is can be changed only once per frame and contains data about lights,<br/>
            - one that is different for each material and object.
            </para>
            <para>
            The first constant buffer is set by calling <see cref="M:Ab3d.DirectX.Effect.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            </para>
            <para>
            The second constant buffer can be set by calling <see cref="M:Ab3d.DirectX.Effect.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)"/> method.
            This sets properties defined in Material.
            It also sets projection matrixes like world_view_projection and others.
            The device states (blend state, rasterizer state, etc.) are also set there.
            </para>
            </remarks>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive).</param>
        </member>
        <member name="M:Ab3d.DirectX.Effect.PreloadShaders">
            <summary>
            PreloadShaders can be called to load the shaders in advance before they are used.
            Calling this method increases the startup time, but when the 3D object needs to be shown, it is shown faster because all the shaders have already been created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Effect.ResetLastUsedFrameNumber">
            <summary>
            ResetLastUsedFrameNumber sets LastUsedFrameNumber to -1. This is used to prevent calling ApplyPerFrameSettings when this effect is used multiple times with different lights on one frame.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.EffectsManager">
            <summary>
            EffectsManager class help use the <see cref="T:Ab3d.DirectX.Effect"/> classes.
            It provides loading, caching and resuing the effects and shaders.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.EffectsManager.vertexShadersCache">
            <summary>
            vertexShadersCache
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.EffectsManager.pixelShadersCache">
            <summary>
            pixelShadersCache
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.EffectsManager.geometryShadersCache">
            <summary>
            geometryShadersCache
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.EffectsManager.inputLayoutCache">
            <summary>
            inputLayoutCache
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.EffectsManager.EffectsCount">
            <summary>
            Gets a number of registered effects
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.EffectsManager.Effects">
            <summary>
            Gets a readonly collection of all registered effects
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.EffectsManager.EffectRegistered">
            <summary>
            EffectRegistered event is fired when a new effect is registered
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.RegisterShaderResource(Ab3d.DirectX.ShaderBytecodeProvider)">
            <summary>
            Registers newShaderResource as source for shaders code. Returns true if resource was registered, false if the same resource was already registered.
            This method is the same as static <see cref="M:Ab3d.DirectX.EffectsManager.RegisterShaderResourceStatic(Ab3d.DirectX.ShaderBytecodeProvider)"/> method.
            </summary>
            <param name="newShaderResource">shader resource as ShaderResourceBase</param>
            <returns>true if resource was registered, false if the same resource was already registered</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.RegisterShaderResourceStatic(Ab3d.DirectX.ShaderBytecodeProvider)">
            <summary>
            Registers newShaderResource as source for shaders code. Returns true if resource was registered, false if the same resource was already registered.
            This method is the same as non-static <see cref="M:Ab3d.DirectX.EffectsManager.RegisterShaderResource(Ab3d.DirectX.ShaderBytecodeProvider)"/> method.
            </summary>
            <param name="newShaderBytecodeProvider">shader resource as ShaderResourceBase</param>
            <returns>true if resource was registered, false if the same resource was already registered</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.UnregisterShaderResource(Ab3d.DirectX.ShaderBytecodeProvider)">
            <summary>
            Unregisters shaderResource as source for shaders code. Returns true if resource was unregistered, false if the this resource was not registered and was therefore not unregistered.
            This method is the same as static <see cref="M:Ab3d.DirectX.EffectsManager.UnregisterShaderResourceStatic(Ab3d.DirectX.ShaderBytecodeProvider)"/> method.
            </summary>
            <param name="shaderResource">shader resource as ShaderResourceBase</param>
            <returns>true if resource was unregistered, false if the this resource was not registered and was therefore not unregistered</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.UnregisterShaderResourceStatic(Ab3d.DirectX.ShaderBytecodeProvider)">
            <summary>
            Unregisters shaderResource as source for shaders code. Returns true if resource was unregistered, false if the this resource was not registered and was therefore not unregistered.
            This method is the same as non-static <see cref="M:Ab3d.DirectX.EffectsManager.UnregisterShaderResource(Ab3d.DirectX.ShaderBytecodeProvider)"/> method.
            </summary>
            <param name="shaderBytecodeProvider">shader resource as ShaderResourceBase</param>
            <returns>true if resource was unregistered, false if the this resource was not registered and was therefore not unregistered</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetRegisteredShaderResourceNames">
            <summary>
            Returns an array of strings of all registered resource names.
            This method is the same as static <see cref="M:Ab3d.DirectX.EffectsManager.GetRegisteredShaderResourceNamesStatic"/> method.
            </summary>
            <returns>an array of strings of all registered resource names</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetRegisteredShaderResourceNamesStatic">
            <summary>
            Returns an array of strings of all registered resource names.
            </summary>
            <returns>an array of strings of all registered resource names</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetShaderBytes(System.String,System.Boolean)">
            <summary>
            Gets bytes array of the shader byte code. Before using this method, the shader resources need to be registered with <see cref="M:Ab3d.DirectX.EffectsManager.RegisterShaderResource(Ab3d.DirectX.ShaderBytecodeProvider)"/> method.
            </summary>
            <remarks>
            <para>
            Gets bytes array of the shader byte code. Before using this method, the shader resources need to be registered with <see cref="M:Ab3d.DirectX.EffectsManager.RegisterShaderResource(Ab3d.DirectX.ShaderBytecodeProvider)"/> method.
            </para>
            <para>
            EffectsManager by default registers the Ab3d.DXEngine assembly as an <see cref="T:Ab3d.DirectX.AssemblyShaderBytecodeProvider"/> that can provide many shaders stored as embedded resources in Ab3d.DXEngine assembly.
            </para>
            <para>
            You can register custom shader resources by creating your own instances of <see cref="T:Ab3d.DirectX.AssemblyShaderBytecodeProvider"/>, <see cref="T:Ab3d.DirectX.FileShaderBytecodeProvider"/> or <see cref="T:Ab3d.DirectX.DirectoryShaderBytecodeProvider"/> or any other class that is derived from <see cref="T:Ab3d.DirectX.ShaderBytecodeProvider"/>.
            </para>
            </remarks>
            <param name="resourceName">shader resource name</param>
            <param name="throwExceptionIfNotFound">if true than exception will be thrown when resourceName is not found; when false null is returned in this case</param>
            <exception name="throwExceptionIfNotFound">specifies if exception is found when the shader with resourceName cannot be found. If false (by default) and resource is not found, than null is returned.</exception>
            <returns>bytes array of the shader byte code</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.RegisterEffect(Ab3d.DirectX.Effect)">
            <summary>
            Registers the effect with EffectManager. Each used effect must be registered. Registering effect will also initialize it (called InitializeResources) if the effect was not initialized yet.
            </summary>
            <remarks>
            <para>
            <b>RegisterEffect</b> registers the effect with EffectManager. Each used effect must be registered.
            </para>
            </remarks>
            <param name="effect">Effect</param>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetEffect``1(System.Boolean)">
            <summary>
            Gets an effect by its type T. 
            If the effect was not yet registered by EffectsManager and if createNewEffectInstanceIfNotFound is true,
            then a new instance of effect T is created, registered with EffectsManager and returned.
            To get StandardEffect (effect that can render all possible lights), use <see cref="M:Ab3d.DirectX.EffectsManager.GetStandardEffect"/> method.
            NOTE: When the returned effect is not used any more, user must call Dispose (reference count is increased in GetEffect method).
            </summary>
            <param name="createNewEffectInstanceIfNotFound">if true (by default) and if type T is not found (already registered) then a new instance of the type T is created and registered by EffectsManager</param>
            <returns>Effect with specified name.</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetEffect(System.String)">
            <summary>
            Gets an effect by its name. The effect must be registered before it can be get with GetEffect. If the effect is not found null is returned.
            To get StandardEffect (effect that can render all possible lights), use <see cref="M:Ab3d.DirectX.EffectsManager.GetStandardEffect"/> method.
            NOTE: User must call Dispose on the get effect (reference count is increased in GetEffect method).
            </summary>
            <param name="effectName">name of the effect to return.</param>
            <returns>Effect with specified name.</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetStandardEffect">
            <summary>
            Gets a StandardEffect that can render many different lights and all standard materials.
            NOTE: User must call Dispose on the get effect (reference count is increased in GetEffect method).
            </summary>     
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.IsEffectRegistered(System.String)">
            <summary>
            Returns Boolean that specifies if the effect with effectName was already registered with this EffectsManager.
            </summary>
            <param name="effectName">name of the effect</param>
            <returns>Boolean that specifies if the effect with effectName was already registered with this EffectsManager</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.SetStandardEffect(Ab3d.DirectX.Effect)">
            <summary>
            Sets a StandardEffect that can render many different lights and all standard materials.
            If newStandardEffect is not yet registered by EffectsManager then this method also registrs the newStandardEffect.
            </summary>
            <param name="newStandardEffect">Effect that will be used as standard rendering effect</param>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetStandardSpriteEffect">
            <summary>
            Gets the SpriteEffect that is set as standard sprite effect.
            </summary>
            <returns>SpriteEffect</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetVertexShader(System.String,SharpDX.Direct3D11.InputElement[],Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.InputLayout}@,System.Boolean)">
            <summary>
            GetVertexShader returns a SharedDXResourceWrapper with VertexShader specified by the vertexShaderResourceName.
            </summary>
            <param name="vertexShaderResourceName">name of the resource</param>
            <param name="vertexLayoutDesc">vertex layout description as array of InputElements</param>
            <param name="inputLayoutSharedResource">out SharedDXResourceWrapper with InputLayout</param>
            <param name="throwExceptionIfNotFound">if true and exception is thrown if shader is not found; else null is returned</param>
            <returns>SharedDXResourceWrapper with VertexShader</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetPixelShader(System.String,System.Boolean)">
            <summary>
            GetPixelShader returns a SharedDXResourceWrapper with PixelShader specified by the pixelShaderResourceName.
            </summary>
            <param name="pixelShaderResourceName">name of the resource</param>
            <param name="throwExceptionIfNotFound">if true and exception is thrown if shader is not found; else null is returned</param>
            <returns>SharedDXResourceWrapper with PixelShader</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetGeometryShader(System.String,System.Boolean)">
            <summary>
            GetGeometryShader returns a SharedDXResourceWrapper with GeometryShader specified by the pixelShaderResourceName.
            </summary>
            <param name="geometryShaderResourceName">name of the resource</param>
            <param name="throwExceptionIfNotFound">if true and exception is thrown if shader is not found; else null is returned</param>
            <returns>SharedDXResourceWrapper with PixelShader</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetShaders(System.String,System.String,SharpDX.Direct3D11.InputElement[],Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.VertexShader}@,Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.PixelShader}@,Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.InputLayout}@,System.Boolean)">
            <summary>
            GetShaders loads vertex shader, pixel shader and creates an InputLayout from the specified resource names
            </summary>
            <param name="vertexShaderResourceName">vertex shader resource name</param>
            <param name="pixelShaderResourceName">pixel shader resource name</param>
            <param name="vertexLayoutDesc">vertex layout description as array of InputElements</param>
            <param name="vertexShaderSharedResource">out SharedDXResourceWrapper with VertexShader</param>
            <param name="pixelShaderSharedResource">out SharedDXResourceWrapper with PixelShader</param>
            <param name="inputLayoutSharedResource">out SharedDXResourceWrapper with InputLayout</param>
            <param name="throwExceptionIfShadersNotFound">if true and exception is thrown if shader is not found; else null is returned</param>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.GetShaders(System.String,System.String,System.String,SharpDX.Direct3D11.InputElement[],Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.VertexShader}@,Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.GeometryShader}@,Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.PixelShader}@,Ab3d.DirectX.SharedDXResourceWrapper{SharpDX.Direct3D11.InputLayout}@,System.Boolean)">
            <summary>
            GetShaders loads vertex shader, geometry shader, pixel shader and creates an InputLayout from the specified resource names
            </summary>
            <param name="vertexShaderResourceName">vertex shader resource name</param>
            <param name="geometryShaderResourceName">geometry shader resource name</param>
            <param name="pixelShaderResourceName">pixel shader resource name</param>
            <param name="vertexLayoutDesc">vertex layout description as array of InputElements</param>
            <param name="vertexShaderSharedResource">out SharedDXResourceWrapper with VertexShader</param>
            <param name="geometryShaderSharedResource">out SharedDXResourceWrapper with GeometryShader</param>
            <param name="pixelShaderSharedResource">out SharedDXResourceWrapper with PixelShader</param>
            <param name="inputLayoutSharedResource">out SharedDXResourceWrapper with InputLayout</param>
            <param name="throwExceptionIfShadersNotFound">if true and exception is thrown if shader is not found; else null is returned</param>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.ClearAllCachedShader">
            <summary>
            Clears all cached shaders that were created by the GetXXXShader method.
            After this method is called, the shaders will be created again (useful when shader bytecode is changed).
            To remove only one shader from the cache, use the <see cref="M:Ab3d.DirectX.EffectsManager.ClearShaderCache(System.String)"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.ClearShaderCache(System.String)">
            <summary>
            Clears the cached shader that was created by the GetXXXShader method.
            After this method is called, the shader with shaderName will be created again when needed (useful when shader bytecode is changed).
            To clear all caches shaders, use the <see cref="M:Ab3d.DirectX.EffectsManager.ClearAllCachedShader"/> method.
            </summary>
            <param name="shaderName">resourceName of the shader</param>
            <returns>true if shaderName was found and its cache was removed</returns>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.OnEffectRegistered(Ab3d.DirectX.Effect)">
            <summary>
            OnEffectRegistered
            </summary>
            <param name="registeredEffect">registeredEffect</param>
        </member>
        <member name="M:Ab3d.DirectX.EffectsManager.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderingQueue">
            <summary>
            RenderingQueue is a queue that is used to store renderable objects that have similar properties and are rendered one after another.
            Objects inside the queue can be reordered or sorted to improve performance or make sure that the rendered results are correct (for example for transparency sorting).
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.RenderingQueue.RenderingQueueSorterType">
            <summary>
            RenderingQueueSorterType defines types of sorting that can be used by a RenderingQueue
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingQueue.RenderingQueueSorterType.None">
            <summary>
            No sorting is performed - objects are rendering in the same order as they are added to the queue
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingQueue.RenderingQueueSorterType.CameraDistance">
            <summary>
            Objects are sorted by camera distance
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingQueue.RenderingQueueSorterType.Material">
            <summary>
            Objects are sorted in such a way so that objects with same material are rendered togather to reduce the number of needed state changes.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingQueue.Name">
            <summary>
            Name of this RenderingQueue
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingQueue.ContainsTransparentObjects">
            <summary>
            Gets or sets a boolean that specifies if this RenderingQueue contains transparent objects.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingQueue.renderableGeometries">
            <summary>
            List of renderable objects used by this RenderingQueue
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingQueue.Count">
            <summary>
            Count of renderable objects used by this RenderingQueue
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.RenderingQueue.Item(System.Int32)">
            <summary>
            Gets a RenderablePrimitiveBase with the specified index
            </summary>
            <param name="index">index of the itme in this queue</param>
            <returns>RenderablePrimitiveBase with the specified index</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="queueName">name of this RenderingQueue</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.Clear">
            <summary>
            Removes all renderable objects from this queue
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.Add(Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Adds renderable object to this queue
            </summary>
            <param name="renderable">renderable object</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.Remove(Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Removes renderable object to this queue
            </summary>
            <param name="renderable">renderable object</param>
            <returns>true if object was removed or false if object was not found</returns>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderingQueue.ToString">
            <summary>
            ToString
            </summary>
            <returns>description</returns>
        </member>
        <member name="T:Ab3d.DirectX.Material">
            <summary>
            Material is a base abstract class from which all DXEngine's material must be derived from.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Material.MaterialChanged">
            <summary>
            MaterialChanged
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Material.PreferedShaderQuality">
            <summary>
            Gets or sets a shader quality that should be used to render this material.
            When this property is set to any other value than Undefined (by default) it overrides the ShaderQuality setting set in GraphicsProfile.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Material.Effect">
            <summary>
            Gets or sets the Effect that is used to render this material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Material.Version">
            <summary>
            Gets the version number of this Material. Version is increased each time the material is changed. 
            Note: When material is changed a lot of times, the Version value can overflow from positive to negative numbers (to prevent problems do not check for bigger value but for not equal value)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Material.OnEffectChanged(Ab3d.DirectX.Effect,Ab3d.DirectX.Effect)">
            <summary>
            OnEffectChanged is called after the effect is changed - overridden methods can return false to prevent the change of effect.
            </summary>
            <param name="oldEffect">old Effect</param>
            <param name="newEffect">new Effect</param>
            <returns>false to prevent the change, true to allow the change</returns>
        </member>
        <member name="M:Ab3d.DirectX.Material.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            OnInitializeResources
            </summary>
            <param name="dxDevice">DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Material.OnMaterialChanged">
            <summary>
            OnMaterialChanged
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Material.GetDefaultRenderingQueue(Ab3d.DirectX.DXScene)">
            <summary>
            Returns the RenderingQueue that should be used to render this material.
            </summary>
            <param name="parentDXScene">DXScene</param>
            <returns>RenderingQueue that should be used to render this material</returns>
        </member>
        <member name="M:Ab3d.DirectX.Material.Refresh">
            <summary>
            Refresh method regenerates the material and the resources it created.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Material.Clone">
            <summary>
            Clones the current material with creating a shallow copy of this Material (properties are copied but referenced objects are preserved).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Material.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Ab3d.DirectX.MeshBase">
            <summary>
            MeshBase is a base class that defines the data about one 3D model that are stored in the DirectX structures that are used to draw the model.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.Materials">
            <summary>
            Array of Materials
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.VertexBufferBindings">
            <summary>
            Array of VertexBufferBinding
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.BaseVertexLocation">
            <summary>
            start index in VertexBuffer used in DrawIndexed method
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.IndexBuffer">
            <summary>
            IndexBuffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.PrimitiveTopology">
            <summary>
            PrimitiveTopology
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.InputLayoutType">
            <summary>
            InputLayoutType
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.StartIndexLocation">
            <summary>
            start index in IndexBuffer used in DrawIndexed method
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.IndexCount">
            <summary>
            number of indices to render 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.IndexBufferFormat">
            <summary>
            Format of the index buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.IsFrontCounterClockwise">
            <summary>
            True if triangles are oriented in counter clockwise orientation
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.Bounds">
            <summary>
            Bounds of the mesh
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshBase.SubMeshes">
            <summary>
            Array of Submesh objects
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.MeshBase.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.MeshBase.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.SubMesh">
            <summary>
            SubMesh is part of the <see cref="T:Ab3d.DirectX.MeshBase"/> that uses the same vertex and index buffers as the MeshBase but use its own Material, StartIndexLocation and IndexCount.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SubMesh.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SubMesh.MaterialIndex">
            <summary>
            Gets or sets an index of the material defined in the parent's Mesh Materials collection.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SubMesh.IndexBuffer">
            <summary>
            If IndexBuffer is set than this index buffer is used to render this SubMesh. If not set, than parent's Mesh IndexBuffer is used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SubMesh.StartIndexLocation">
            <summary>
            start index in IndexBuffer used in DrawIndexed method
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SubMesh.IndexCount">
            <summary>
            number of indices to render 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SubMesh.HasBounds">
            <summary>
             If false than SubMesh's Bounds are not calculated and parent Mesh's Bounds should be used.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SubMesh.Bounds">
            <summary>
            Bounds of this SubMesh
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SubMesh.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">optional name</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderablePrimitiveBase">
            <summary>
            RenderablePrimitiveBase is a base abstract class that represents a low level geometry object that is prepared to be rendered with DirectX.
            It contains all required DirectX buffers and required data to prepare the rendering states.
            RenderablePrimitiveBase objects are rendered in the <see cref="T:Ab3d.DirectX.RenderObjectsRenderingStep"/> rendering step and can be added to any <see cref="T:Ab3d.DirectX.RenderingQueue"/>.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.Material">
            <summary>
            Material
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.OverrideMaterial">
            <summary>
            OverrideMaterial can be set to override the Material when rendering but still preserve the original Material.
            It can be set by some other object that wanted to change the rendering behavior of this RenderablePrimitiveBase.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.IsFrontCounterClockwise">
            <summary>
            IsFrontCounterClockwise specifies the orientation of the positions in the 3D geometry - if true than the positions are oriented in a counter clockwise manner.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.IsBackFaceMaterial">
            <summary>
            IsBackFaceMaterial specifies if the material is used to render front (IsBackFaceMaterial == false) or back (IsBackFaceMaterial == true) faces.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.WorldMatrix">
            <summary>
            The world matrix
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.WorldInverseTransposeMatrix">
            <summary>
            The world matrix that is inversed and transposed (normals are multiplied with this matrix)
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.IsWorldMatrixIdentity">
            <summary>
            Boolean that specifies if WorldMatrix is identity
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitiveBase.Flags">
            <summary>
            Flags can be used by Materials to add some values that could be used to improve performace.
            Currently they are used by StandardEffect (DirectionalLightShader and SuperShader) to mark which constant buffer values are the same as in the previous RenderablePrimitiveBase.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveBase.#ctor(Ab3d.DirectX.Material)">
            <summary>
            Initializes a new instance of the RenderablePrimitiveBase class.
            </summary>
            <param name="material">material</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveBase.ClearFlags">
            <summary>
            Clears the Flags to its initial value (0)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveBase.RenderGeometry(Ab3d.DirectX.RenderingContext)">
            <summary>
            RenderGeometry renders the geometry (executes draw calls but does not apply material settings)
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitiveBase.CalculateWorldInverseTransposeMatrix">
            <summary>
            Calculates the WorldInverseTransposeMatrix from the World matrix
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.RenderableMeshPrimitive">
            <summary>
            RenderableMeshPrimitive class is a <see cref="T:Ab3d.DirectX.RenderablePrimitive"/> that can be used to render geometry based on the <see cref="F:Ab3d.DirectX.RenderableMeshPrimitive.MeshBase"/> and <see cref="F:Ab3d.DirectX.RenderableMeshPrimitive.SubMesh"/>.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderableMeshPrimitive.MeshBase">
            <summary>
            MeshBase used to initialize this RenderableMeshPrimitive
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderableMeshPrimitive.SubMesh">
            <summary>
            SubMesh used to initialize this RenderableMesh. Can be null when only MeshBase is used.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderableMeshPrimitive.#ctor(Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableMeshPrimitive"/> class.
            </summary>
            <param name="meshBase">MeshBase</param>
            <param name="material">Material</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableMeshPrimitive.#ctor(Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material,SharpDX.Matrix@)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableMeshPrimitive"/> class.
            </summary>
            <param name="meshBase">MeshBase</param>
            <param name="material">Material</param>
            <param name="worldMatrix">world matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableMeshPrimitive.#ctor(Ab3d.DirectX.MeshBase,Ab3d.DirectX.SubMesh,Ab3d.DirectX.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableMeshPrimitive"/> class.
            </summary>
            <param name="meshBase">MeshBase</param>
            <param name="submesh">SubMesh</param>
            <param name="material">Material</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderableMeshPrimitive.#ctor(Ab3d.DirectX.MeshBase,Ab3d.DirectX.SubMesh,Ab3d.DirectX.Material,SharpDX.Matrix@)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderableMeshPrimitive"/> class.
            </summary>
            <param name="meshBase">MeshBase</param>
            <param name="submesh">SubMesh</param>
            <param name="material">Material</param>
            <param name="worldMatrix">world matrix</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderablePrimitive">
            <summary>
            RenderablePrimitive is a base class that is derived from <see cref="T:Ab3d.DirectX.RenderablePrimitiveBase"/> and implements rendering geometry based on the
            resources defined by the RenderablePrimitive constructor.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.StateSortValue">
            <summary>
            The state sort value represent an unsigned Int32 number that is a short hash value calculated from the properties of this RenderablePrimitive 
            (mostly from material) and can be used to sort and group similar RenderablePrimitive. This can improve performance.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.Distance">
            <summary>
            The distance from the camera
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.OriginalObject">
            <summary>
            The original object that was used to create this RenderablePrimitive
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.PrimitiveTopology">
            <summary>
            PrimitiveTopology
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.InputLayoutType">
            <summary>
            InputLayoutType
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.VertexBufferBindings">
            <summary>
            Array of VertexBufferBinding
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.BaseVertexLocation">
            <summary>
            start index in VertexBuffer used in DrawIndexed method
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.IndexBuffer">
            <summary>
            IndexBuffer
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.IndexBufferFormat">
            <summary>
            Format of IndexBuffer
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.IndexCount">
            <summary>
            Number of indices to render
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.StartIndexLocation">
            <summary>
            start index in IndexBuffer used in DrawIndexed method
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.Bounds">
            <summary>
            Bounds
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderablePrimitive.Tag">
            <summary>
            Arbitrary tag
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitive.#ctor(System.Object,Ab3d.DirectX.Material,SharpDX.Direct3D.PrimitiveTopology,Ab3d.DirectX.InputLayoutType,SharpDX.Direct3D11.VertexBufferBinding[],SharpDX.Direct3D11.Buffer,SharpDX.DXGI.Format,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderablePrimitive"/> class.
            </summary>
            <param name="originalObject">The original object.</param>
            <param name="material">Material</param>
            <param name="primitiveTopology">PrimitiveTopology</param>
            <param name="inputLayoutType">InputLayoutType</param>
            <param name="vertexBufferBindings">array of VertexBufferBinding</param>
            <param name="indexBuffer">IndexBuffer</param>
            <param name="indexBufferFormat">format of IndexBuffer</param>
            <param name="indexCount">Number of indices to render</param>
            <param name="startIndexLocation">start index in IndexBuffer used in DrawIndexed method</param>
            <param name="baseVertexLocation">start index in VertexBuffer used in DrawIndexed method</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitive.#ctor(System.Object,Ab3d.DirectX.Material,SharpDX.Direct3D.PrimitiveTopology,Ab3d.DirectX.InputLayoutType,SharpDX.Direct3D11.VertexBufferBinding[],SharpDX.Direct3D11.Buffer,SharpDX.DXGI.Format,System.Int32,System.Int32,System.Int32,Ab3d.DirectX.Bounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderablePrimitive"/> class.
            </summary>
            <param name="originalObject">The original object.</param>
            <param name="material">Material</param>
            <param name="primitiveTopology">PrimitiveTopology</param>
            <param name="inputLayoutType">InputLayoutType</param>
            <param name="vertexBufferBindings">array of VertexBufferBinding</param>
            <param name="indexBuffer">IndexBuffer</param>
            <param name="indexBufferFormat">format of IndexBuffer</param>
            <param name="indexCount">Number of indices to render</param>
            <param name="startIndexLocation">start index in IndexBuffer used in DrawIndexed method</param>
            <param name="baseVertexLocation">start index in VertexBuffer used in DrawIndexed method</param>
            <param name="bounds">bounds</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitive.#ctor(System.Object,Ab3d.DirectX.Material,SharpDX.Direct3D.PrimitiveTopology,Ab3d.DirectX.InputLayoutType,SharpDX.Direct3D11.VertexBufferBinding[],SharpDX.Direct3D11.Buffer,SharpDX.DXGI.Format,System.Int32,System.Int32,System.Int32,SharpDX.Matrix@,Ab3d.DirectX.Bounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.RenderablePrimitive"/> class.
            </summary>
            <param name="originalObject">The original object.</param>
            <param name="material">Material</param>
            <param name="primitiveTopology">PrimitiveTopology</param>
            <param name="inputLayoutType">InputLayoutType</param>
            <param name="vertexBufferBindings">array of VertexBufferBinding</param>
            <param name="indexBuffer">IndexBuffer</param>
            <param name="indexBufferFormat">format of IndexBuffer</param>
            <param name="indexCount">Number of indices to render</param>
            <param name="startIndexLocation">start index in IndexBuffer used in DrawIndexed method</param>
            <param name="baseVertexLocation">start index in VertexBuffer used in DrawIndexed method</param>
            <param name="worldMatrix">world matrix</param>
            <param name="bounds">bounds</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitive.RenderGeometry(Ab3d.DirectX.RenderingContext)">
            <summary>
            RenderGeometry renders the geometry (executes draw calls but does not apply material settings)
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.RenderablePrimitive.SetMaterialSortHash">
            <summary>
            SetMaterialSortHash calculates the StateSortValue based on the current material and other properties of this RenderablePrimitive
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Eye">
            <summary>
            Represents left or right eye.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Eye.Left">
            <summary>
            Left eye
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Eye.Right">
            <summary>
            Right eye
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.ResolveStereoscopicImagesRenderingStep">
            <summary>
            ResolveStereoscopicImagesRenderingStep is a base class for presenting stereoscopic images for left and right eye to the final RenderTarget.
            The actual implementation of how the two images are presented must be defined in the derived class.
            This class provides properties that define ShaderResourceView for left and right eye.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ResolveStereoscopicImagesRenderingStep.LeftEyeShaderResourceView">
            <summary>
            Gets or sets a ShaderResourceView that represents the scene rendered through left eye.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ResolveStereoscopicImagesRenderingStep.RightEyeShaderResourceView">
            <summary>
            Gets or sets a ShaderResourceView that represents the scene rendered through right eye.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ResolveStereoscopicImagesRenderingStep.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.ResolveStereoscopicImagesRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep">
            <summary>
            SimpleResolveStereoscopicImagesRenderingStep is a RenderingStep that is using a pixel shader for presenting stereoscopic images for left and right eye to the final RenderTarget.
            This class provide basic logic with preparing the quad mesh and vertex shader.
            The user of the class must provide an Action that takes RenderingContext as parameter and binds a pixel shader and sets its constant buffers 
            (LeftEyeShaderResourceView and RightEyeShaderResourceView are already bind to slots 0 and 1 by this SimpleResolveStereoscopicImagesRenderingStep).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.vertexShaderSharedResource">
            <summary>
            VertexShader shared resource
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.inputLayoutSharedResource">
            <summary>
            InputLayout shared resource
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.fullScreenQuadRenderableMeshPrimitive">
            <summary>
            RenderableMeshPrimitive that represents the full screen quad (rectangle with two triangles)
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.ApplyPixelShaderAction">
            <summary>
            Action that takes RenderingContext as parameter and binds the pixel shader and sets its constant buffers (LeftEyeShaderResourceView and RightEyeShaderResourceView are already bind to slots 0 and 1).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.#ctor(System.String,System.Action{Ab3d.DirectX.RenderingContext},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="applyPixelShaderAction">Action that takes RenderingContext as parameter and binds the pixel shader and sets its constant buffers (LeftEyeShaderResourceView and RightEyeShaderResourceView are already bind to slots 0 and 1). This parameter must not be null.</param>
            <param name="description">description</param>
        </member>
        <member name="M:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.OnRun(Ab3d.DirectX.RenderingContext)">
            <summary>
            Runs the rendering step.
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.SaveExecutionTimeStatistics(System.Double,Ab3d.DirectX.RenderingStatistics)">
            <summary>
            SaveExecutionTimeStatistics is called when we are collecting statistics.
            The implementation of the method should save or add the elapsedMilliseconds to the corresponding property in the RenderingStatistics class.
            </summary>
            <param name="stepExecutionTimeInMilliseconds">time in milliseconds to execute this rendering step</param>
            <param name="renderingStatistics">RenderingStatistics</param>
        </member>
        <member name="M:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.SplitScreenVirtualRealityProvider">
            <summary>
            SplitScreenVirtualRealityProvider is a VirtualRealityProvider that can render stereoscopic images where image for the left eye is rendered in one half of the screen and image for the right is rendered in the other half of the screen.
            This type of 3D rendering can be seen by the 3D TV displays.
            The SplitScreenVirtualRealityProvider supports SideBySide (vertical) and TopAndBottom (horizontal) split screen.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.SplitScreenVirtualRealityProvider.SplitScreenType">
            <summary>
            SplitScreenType defines the possible types of split screen.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SplitScreenVirtualRealityProvider.SplitScreenType.SideBySide">
            <summary>
            Splits the screen vertically
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SplitScreenVirtualRealityProvider.SplitScreenType.TopAndBottom">
            <summary>
            Splits the screen horizontally
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SplitScreenVirtualRealityProvider.SplitScreen">
            <summary>
            Gets or sets the type of split screen.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SplitScreenVirtualRealityProvider.ImagesSeparationDistance">
            <summary>
            Gets or sets a float value that specifies the distance between stereoscopic images. 
            The value is specified in pixels. This property can be used to calibrate the images for 3D TV displays.
            For example when ImagesSeparationDistance is set to 4 and we have SideBySide type, the left image goes for two pixels to the left and right image goes for two pixels to the right - creating 4 pixels separation.
            </summary>
            <remarks>
            <para>
            <b>ImagesSeparationDistance</b> gets or sets a float value that specifies the distance between stereoscopic images.
            </para>
            <para>
            The value is specified in pixels. For example when ImagesSeparationDistance is set to 4 and we have SideBySide type, the left image goes for two pixels to the left and right image goes for two pixels to the right - creating 4 pixels separation.
            </para>
            <para>
            When Split-screen stereoscopic rendering is used to render the 3D scene on a 3D TV, it may be necessary to
            adjust the image separation distance before a good 3D effect can be achieved.
            </para>
            <para>
            Please use the following steps to calibrate the settings for 3D TV:<br/>
            - When using HDMI cable to connect computer and TV, make sure that the computer screeen is not cropped or too small(with black border on TV). You might need to adjust graphics card settings to achive the full computer screen is visible from one edge of the TV to the other.<br/>
            - Set EyeSeparation, Parallax angle and Separation distance to 0. This removes the 3D effect and produces the same images for left and right eye.<br/>
            - On the TV, turn the 3D mode on (use Side-by-side or Top-and-bottom mode).<br/>
            - Without wearing the 3D glasses the TV should be showing one clear image(because images for left and right eye are the same). If you see blurry left and right images that are shown one near another, then you need to adjust the image separation distance by clicking on '+' and '-' buttons.With clicking on the buttons, you need to bring the separate left and right images closer together and finnally the two images should combine into one clear image.For example some Samsung TVs work best with separation distance set to 42 for side-by-side and 22 for top-and-bottom.<br/>
            - When you see one clear image, then you can put the 3D glasses on(turn them on if you have active glasses; this is not needed for passive glasses).<br/>
            - Now you can increase the EyeSeparation and Parallax angle. Note that for stronger 3D effect you can increase parallax angle - this also requires increased eye separation.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.SplitScreenVirtualRealityProvider.#ctor(System.Single,System.Single,Ab3d.DirectX.SplitScreenVirtualRealityProvider.SplitScreenType)">
            <summary>
            Constructor
            </summary>
            <param name="eyeSeparation">distance between left and right eye</param>
            <param name="parallax">value in degrees that specifies an angle of the left and right eye</param>
            <param name="splitScreen">type of split screen</param>
        </member>
        <member name="M:Ab3d.DirectX.SplitScreenVirtualRealityProvider.CreateResources(Ab3d.DirectX.DXScene)">
            <summary>
            CreateResources is called when the VirtualRealityProvider is initialized and should create the DirectX resources.
            </summary>
            <remarks>
            <para>
            <b>CreateResources</b> is called when the VirtualRealityProvider is initialized and should create the DirectX resources.
            </para>
            <para>
            This method is called after this virtual reality provider is registered with calling the <see cref="M:Ab3d.DirectX.DXScene.InitializeVirtualRealityRendering(Ab3d.DirectX.VirtualRealityProviderBase)"/> method. 
            This method then calls the <see cref="M:Ab3d.DirectX.DXSceneResource.InitializeResources(Ab3d.DirectX.DXScene)"/> and the <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.OnInitializeResources(Ab3d.DirectX.DXScene)"/>.
            OnInitializeResources calls the this CreateResources method and then <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> method.
            </para>
            <para>
            This method usually creates pixel shaders and constant buffers.
            Other resources (back buffers and views) are usually created in <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)"/> where the size of the current back buffer is compared with the size of back buffers for virtual reality.
            </para>
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.SplitScreenVirtualRealityProvider.InitializeRenderingSteps(Ab3d.DirectX.DXScene)">
            <summary>
            InitializeRenderingSteps is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            See remarks for more into.
            </summary>
            <remarks>
            <para>
            <b>InitializeRenderingSteps</b> is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            </para>
            <para>
            Usually the virtual reality rendering provider adds 3 rendering steps to existing rendering step:<br/>
            1) <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> is added before DXScene.DefaultPrepareRenderTargetsRenderingStep (prepares the rendering context for the currently rendered eys)<br/>
            2) <see cref="T:Ab3d.DirectX.RenderingStepsLoop"/> is added after DXScene.DefaultResolveMultisampledBackBufferRenderingStep (this renders the scene again for the other eye - jumps to BeginVirtualRealityRenderingStep)<br/>
            3) <see cref="T:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep"/> or similar step is added after RenderingStepsLoop (to render post-process effects after the VR resolve) or befor DXScene.DefaultCompleteRenderingStep (to render post-process effects before the VS resolve).
            </para>
            <para>
            This method usually also created the pixel shaders and constant buffers.
            Other resources (back buffers and views) are usually created in <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)"/> where the size of the current back buffer is compared with the size of back buffers for virtual reality.
            </para>
            <para>
            It is recommended that the created rendering steps are protected or public with private setter.
            This way a derived class can override the InitializeRenderingSteps method and add the created rendering steps in some other was to the DXScene.RenderingSteps.
            </para>        
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.SplitScreenVirtualRealityProvider.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)">
            <summary>
            UpdateRenderingContext is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            See remarks for more info about the usual tasks that are preformed in this method.
            </summary>
            <remarks>
            <para>
            <b>UpdateRenderingContext</b> is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            </para>
            <para>
            This method is usually called from the <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> (when the virtual reality provider is enabled).
            </para>
            <para>
            Usually this method does the following:<br/>
            - Creates the back buffers and views that are needed for rendering 
            (the back buffers are also recreated if the size of <see cref="P:Ab3d.DirectX.RenderingContext.CurrentBackBufferDescription"/> is different from the size of previously created back buffers).<br/>
            - Updates the <see cref="P:Ab3d.DirectX.VirtualRealityContext.CurrentEye"/> property.<br/>
            - Sets the <see cref="P:Ab3d.DirectX.RenderingContext.UsedCamera"/> property to a <see cref="T:Ab3d.DirectX.Cameras.StereoscopicCamera"/><br/>
            - Calls <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method and sets the new back buffers.<br/>
            - Calls <see cref="P:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.DestinationBuffer"/> on the <see cref="P:Ab3d.DirectX.DXScene.DefaultResolveMultisampledBackBufferRenderingStep"/>.
            </para>
            </remarks>
            <param name="renderingContext">RenderingContext</param>
            <param name="isNewFrame">true if no eye was yet rendered for the current frame; false if the first eye was already rendered for the current frame and we need to render the second eye</param>
        </member>
        <member name="M:Ab3d.DirectX.SplitScreenVirtualRealityProvider.Dispose(System.Boolean)">
            <summary>
            Dispose the created resource and removes the added rendering steps.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.StereoscopicVirtualRealityProvider">
            <summary>
            StereoscopicVirtualRealityProvider is an abstract class and provides common logic to render stereoscopic images.
            </summary>
            <remarks>
            <para>
            <b>StereoscopicVirtualRealityProvider</b> is an abstract class and provides common logic to render stereoscopic images.
            </para>
            <para>
            The class provides basic properties to define the stereoscopic camera: <see cref="P:Ab3d.DirectX.StereoscopicVirtualRealityProvider.EyeSeparation"/>, <see cref="P:Ab3d.DirectX.StereoscopicVirtualRealityProvider.Parallax"/> and <see cref="P:Ab3d.DirectX.StereoscopicVirtualRealityProvider.InvertLeftRightView"/>.
            </para>
            <para>
            The class also provides basic implementation of <see cref="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> method.
            The method creates the protected <see cref="F:Ab3d.DirectX.StereoscopicVirtualRealityProvider.beginVirtualRealityRenderingStep"/> (of type <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/>) and 
            protected <see cref="F:Ab3d.DirectX.StereoscopicVirtualRealityProvider.renderingStepsLoop"/> (of type <see cref="T:Ab3d.DirectX.RenderingStepsLoop"/>) and also adds them to the RenderingSteps in the DXScene.
            </para>
            <para>    
            The position of the beginVirtualRealityRenderingStep is defined with the prepareRenderTargetsForEachEye parameter that is specified in the <see cref="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.#ctor(System.Single,System.Single,System.Boolean)">constructor</see>.
            If prepareRenderTargetsForEachEye is true, then the RenderTarget is cleared before each eye is rendered. 
            This is achieved with inserting the BeginVirtualRealityRenderingStep before the DefaultPrepareRenderTargetsRenderingStep (used for Anaglyph rendering).
            If prepareRenderTargetsForEachEye is false, then the RenderTarget is cleared only once per frame. 
            In this case the BeginVirtualRealityRenderingStep is added after the DefaultPrepareRenderTargetsRenderingStep (used for Split screen stereoscopic rendering) .
            </para>
            <para>
            The <see cref="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.CreateVirtualRealityContext(Ab3d.DirectX.RenderingContext)"/> method creates a default <see cref="T:Ab3d.DirectX.VirtualRealityContext"/> - calls its  constructor with current RenderingContext.
            It is possible to override this method to create an instance of your own class derived from VirtualRealityContext.
            </para>
            <para>
            The <see cref="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)"/> method does:<br/>
            - sets the virtualRealityContext.CurrentEye based on the isNewFrame parameter: isNewFrame == true => LeftEye else RightEye<br/>
            - ensures that stereoscopicCamera is created and sets its properties for the current eye and based on the current EyeSeparation, Parallax and InvertLeftRightView<br/>
            - sets renderingContext.UsedCamera = stereoscopicCamera
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.StereoscopicVirtualRealityProvider.beginVirtualRealityRenderingStep">
            <summary>
            BeginVirtualRealityRenderingStep that was created in the <see cref="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> method.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.StereoscopicVirtualRealityProvider.renderingStepsLoop">
            <summary>
            RenderingStepsLoop that was created in the <see cref="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> method.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.StereoscopicVirtualRealityProvider.stereoscopicCamera">
            <summary>
            StereoscopicCamera used to render stereoscopic scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.StereoscopicVirtualRealityProvider.EyeSeparation">
            <summary>
            Gets or sets a distance between left and right eye. The distance is specified in the same coordinate system as the camera.
            When rendering, the camera is first shifter to the left for the half of the EyeSeparation distance. Then the whole scene is rendered.
            The the camera is shifter to the right for half of the EyeSeparation distance.
            The best value for EyeSeparation is based on the size of objects in the scene, the size of the Viewport3D, monitor DPI settings and the actual distance between eyes of the user.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.StereoscopicVirtualRealityProvider.Parallax">
            <summary>
            Parallax defines a value in degrees that specifies an angle of the left and right eye look direction.
            If the parallax is zero, then the look directions of left and right cameras are parallel.
            If parallax is bigger then zero, then the left and right look directions are pointed to each other and they cross at some position in front of the camera (the bigger the angle the closer the crossing point).
            Usually the best 3D effect is producted when the parallax is set so that the look directions cross at the center of the scene - look directions of human eyes cross at the point of focus.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.StereoscopicVirtualRealityProvider.InvertLeftRightView">
            <summary>
            Gets or sets a Boolean that specifies if positions of the eyes are inverted.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="eyeSeparation">distance between left and right eye</param>
            <param name="parallax">value in degrees that specifies an angle of the left and right eye</param>
            <param name="prepareRenderTargetsForEachEye">specifies where the BeginVirtualRealityRenderingStep is inserted: true if current RenderTarget is cleared before each eye is rendered - two times per frame (BeginVirtualRealityRenderingStep is added before the DefaultPrepareRenderTargetsRenderingStep - used to Anaglyph rendering); false when the RenderTarget is cleared only once per frame - (BeginVirtualRealityRenderingStep is added after the DefaultPrepareRenderTargetsRenderingStep - used to Split screen stereoscopic rendering)</param>
        </member>
        <member name="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.InitializeRenderingSteps(Ab3d.DirectX.DXScene)">
            <summary>
            InitializeRenderingSteps is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            See remarks for more into.
            </summary>
            <remarks>
            <para>
            <b>InitializeRenderingSteps</b> is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            </para>
            <para>
            Usually the virtual reality rendering provider adds 3 rendering steps to existing rendering step:<br/>
            1) <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> is added before or after the DXScene.DefaultPrepareRenderTargetsRenderingStep (prepares the rendering context for the currently rendered eye). The position of the BeginVirtualRealityRenderingStep is defined by the prepareRenderTargetsForEachEye parameter specified in the constructor (see remarks of this class for more info).<br/>
            2) <see cref="T:Ab3d.DirectX.RenderingStepsLoop"/> is added after DXScene.DefaultResolveMultisampledBackBufferRenderingStep (this renders the scene again for the other eye - jumps to BeginVirtualRealityRenderingStep)<br/>
            3) <see cref="T:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep"/> or similar step is added after RenderingStepsLoop (to render post-process effects after the VR resolve) or befor DXScene.DefaultCompleteRenderingStep (to render post-process effects before the VS resolve).
            </para>
            <para>
            It is recommended that the created rendering steps are protected or public with private setter.
            This way a derived class can override the InitializeRenderingSteps method and add the created rendering steps in some other was to the DXScene.RenderingSteps.
            </para>        
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.CreateVirtualRealityContext(Ab3d.DirectX.RenderingContext)">
            <summary>
            CreateVirtualRealityContext method takes current RenderingContext as parameter and should create the VirtualRealityContext or a class derived from it.
            The returned VirtualRealityContext defines the context in which this virtual reality provider runs.
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <returns>VirtualRealityContext</returns>
        </member>
        <member name="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)">
            <summary>
            UpdateRenderingContext is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            See remarks for more info about the usual tasks that are preformed in this method.
            </summary>
            <remarks>
            <para>
            <b>UpdateRenderingContext</b> is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            </para>
            <para>
            This method is usually called from the <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> (when the virtual reality provider is enabled).
            </para>
            <para>
            Usually this method does the following:<br/>
            - Creates the back buffers and views that are needed for rendering 
            (the back buffers are also recreated if the size of <see cref="P:Ab3d.DirectX.RenderingContext.CurrentBackBufferDescription"/> is different from the size of previously created back buffers).<br/>
            - Updates the <see cref="P:Ab3d.DirectX.VirtualRealityContext.CurrentEye"/> property.<br/>
            - Sets the <see cref="P:Ab3d.DirectX.RenderingContext.UsedCamera"/> property to a <see cref="T:Ab3d.DirectX.Cameras.StereoscopicCamera"/><br/>
            - Calls <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method and sets the new back buffers.<br/>
            - Calls <see cref="P:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.DestinationBuffer"/> on the <see cref="P:Ab3d.DirectX.DXScene.DefaultResolveMultisampledBackBufferRenderingStep"/>.
            </para>
            </remarks>
            <param name="renderingContext">RenderingContext</param>
            <param name="isNewFrame">true if no eye was yet rendered for the current frame; false if the first eye was already rendered for the current frame and we need to render the second eye</param>
        </member>
        <member name="M:Ab3d.DirectX.StereoscopicVirtualRealityProvider.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.VirtualRealityProviderBase">
            <summary>
            VirtualRealityProviderBase is a base abstract class for all classes that provide virtual reality support to DXEngine.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.VirtualRealityProviderBase.IsEnabled">
            <summary>
            Gets or sets a Boolean that specifies if this Virtual reality provider is enabled or not.
            Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsEnabled</b> gets or sets a Boolean that specifies if this Virtual reality provider is enabled or not.
            </para>
            <para>
            IsEnabled property can be used to quickly enable of disable Virtual reality rendering. 
            </para>
            <para>
            When the VirtualRealityProvider is disabled, the created DirectX resources are usually disposed, but the created rendering steps are still part of the DXScene.RenderingSteps.
            </para>
            <para>
            To remove all the created DirectX resources and also remove the rendering steps, call the Dispose method.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            OnInitializeResources is called from  the DXScene.<see cref="M:Ab3d.DirectX.DXScene.InitializeVirtualRealityRendering(Ab3d.DirectX.VirtualRealityProviderBase)"/>.
            The method calls <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.CreateResources(Ab3d.DirectX.DXScene)"/> and <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> methods.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.CreateResources(Ab3d.DirectX.DXScene)">
            <summary>
            CreateResources is called when the VirtualRealityProvider is initialized and should create the DirectX resources.
            </summary>
            <remarks>
            <para>
            <b>CreateResources</b> is called when the VirtualRealityProvider is initialized and should create the DirectX resources.
            </para>
            <para>
            This method is called after this virtual reality provider is registered with calling the <see cref="M:Ab3d.DirectX.DXScene.InitializeVirtualRealityRendering(Ab3d.DirectX.VirtualRealityProviderBase)"/> method. 
            This method then calls the <see cref="M:Ab3d.DirectX.DXSceneResource.InitializeResources(Ab3d.DirectX.DXScene)"/> and the <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.OnInitializeResources(Ab3d.DirectX.DXScene)"/>.
            OnInitializeResources calls the this CreateResources method and then <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)"/> method.
            </para>
            <para>
            This method usually creates pixel shaders and constant buffers.
            Other resources (back buffers and views) are usually created in <see cref="M:Ab3d.DirectX.VirtualRealityProviderBase.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)"/> where the size of the current back buffer is compared with the size of back buffers for virtual reality.
            </para>
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.InitializeRenderingSteps(Ab3d.DirectX.DXScene)">
            <summary>
            InitializeRenderingSteps is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            See remarks for more into.
            </summary>
            <remarks>
            <para>
            <b>InitializeRenderingSteps</b> is called when the VirtualRealityProvider is initialized and should add customer rendering steps to the DXScene.RenderingSteps list.
            </para>
            <para>
            Usually the virtual reality rendering provider adds 3 rendering steps to existing rendering step:<br/>
            1) <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> is added before DXScene.DefaultPrepareRenderTargetsRenderingStep (prepares the rendering context for the currently rendered eys)<br/>
            2) <see cref="T:Ab3d.DirectX.RenderingStepsLoop"/> is added after DXScene.DefaultResolveMultisampledBackBufferRenderingStep (this renders the scene again for the other eye - jumps to BeginVirtualRealityRenderingStep)<br/>
            3) <see cref="T:Ab3d.DirectX.SimpleResolveStereoscopicImagesRenderingStep"/> or similar step is added after RenderingStepsLoop (to render post-process effects after the VR resolve) or befor DXScene.DefaultCompleteRenderingStep (to render post-process effects before the VS resolve).
            </para>
            <para>
            It is recommended that the created rendering steps are protected or public with private setter.
            This way a derived class can override the InitializeRenderingSteps method and add the created rendering steps in some other was to the DXScene.RenderingSteps.
            </para>
            </remarks>
            <param name="dxScene">parent DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.CreateVirtualRealityContext(Ab3d.DirectX.RenderingContext)">
            <summary>
            CreateVirtualRealityContext method takes current RenderingContext as parameter and should create the VirtualRealityContext or a class derived from it.
            The returned VirtualRealityContext defines the context in which this virtual reality provider runs.
            </summary>
            <param name="renderingContext">RenderingContext</param>
            <returns>VirtualRealityContext</returns>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.UpdateRenderingContext(Ab3d.DirectX.RenderingContext,System.Boolean)">
            <summary>
            UpdateRenderingContext is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            See remarks for more info about the usual tasks that are preformed in this method.
            </summary>
            <remarks>
            <para>
            <b>UpdateRenderingContext</b> is called from the BeginVirtualRealityRenderingStep and should update the properties in the RenderingContext according to the current eye.
            </para>
            <para>
            This method is usually called from the <see cref="T:Ab3d.DirectX.BeginVirtualRealityRenderingStep"/> (when the virtual reality provider is enabled).
            </para>
            <para>
            Usually this method does the following:<br/>
            - Creates the back buffers and views that are needed for rendering 
            (the back buffers are also recreated if the size of <see cref="P:Ab3d.DirectX.RenderingContext.CurrentBackBufferDescription"/> is different from the size of previously created back buffers).<br/>
            - Updates the <see cref="P:Ab3d.DirectX.VirtualRealityContext.CurrentEye"/> property.<br/>
            - Sets the <see cref="P:Ab3d.DirectX.RenderingContext.UsedCamera"/> property to a <see cref="T:Ab3d.DirectX.Cameras.StereoscopicCamera"/><br/>
            - Calls <see cref="M:Ab3d.DirectX.RenderingContext.SetBackBuffer(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView,System.Boolean)"/> method and sets the new back buffers.<br/>
            - Calls <see cref="P:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep.DestinationBuffer"/> on the <see cref="P:Ab3d.DirectX.DXScene.DefaultResolveMultisampledBackBufferRenderingStep"/>.
            </para>
            </remarks>
            <param name="renderingContext">RenderingContext</param>
            <param name="isNewFrame">true if no eye was yet rendered for the current frame; false if the first eye was already rendered for the current frame and we need to render the second eye</param>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.OnIsEnabledChanged(System.Boolean)">
            <summary>
            OnIsEnabledChanged is called when the IsEnabled property is changed.
            </summary>
            <param name="newIsEnabledValue"></param>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.NotifyDXSceneChange">
            <summary>
            NotifyDXSceneChange calls NotifyChange on dxScene and sets the VirtualRealitySettingsChanged flag.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityProviderBase.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.VirtualRealityContext">
            <summary>
            VirtualRealityContext provides base class for describing the context used for rendering a virtual reality scene.
            During rendering of the scene, the VirtualRealityContext can be read from the <see cref="P:Ab3d.DirectX.RenderingContext.VirtualRealityContext"/> property.
            The instace of VirtualRealityContext is created in the VirtualRealityProviderBase.CreateVirtualRealityContext method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.VirtualRealityContext.CurrentEye">
            <summary>
            Gets or sets the currently rendered eye.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.VirtualRealityContext.VirtualRealityProvider">
            <summary>
            Gets a VirtualRealityProviderBase.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.VirtualRealityContext.#ctor(Ab3d.DirectX.VirtualRealityProviderBase)">
            <summary>
            Constructor
            </summary>
            <param name="virtualRealityProvider">VirtualRealityProviderBase</param>
        </member>
        <member name="T:Ab3d.DirectX.DXScene">
            <summary>
            
            </summary>
            <remarks>
            <para>
            DXScene has the following tasks in the engine:<br/>
            - it represents a viewport that shows the scene (has a render target, buffers and other DirectX objects that are used to render the scene to)<br/>
            - it has the camera<br/>
            - it holds the hierarchical tree of the 3d objects<br/>
            - it creates lists of used materials and effects<br/>
            - it creates list of RenderQueues. Each RenderQueue is filled with IRenderable objects. List of RenderQueues is than passed to DXDevice that renderer the objects to the render targets specified by this DXScene.<br/>
            - it can get change notifications from 3d objects and updates the lists of materials, effects, and RenderQueues accordingly. It also triggers rendering when needed.
            </para>
            </remarks>   
        </member>
        <member name="F:Ab3d.DirectX.DXScene.Logger">
            <summary>
            Logger is not used in release build and is always null
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.HardwareAccelerate3DLines">
            <summary>
            Gets or sets a boolean that specifes if rendering 3D lines is hardware accelerated by DXEngine.
            </summary>
            <remarks>
            <para>
            <b>HardwareAccelerate3DLines</b> gets or sets a boolean that specifes if rendering 3D lines is hardware accelerated by DXEngine.
            Default value is true.
            </para>
            <para>
            When set to false, then 3D lines are rendered by Ab3d.PowerToys or by some other custom engine.
            </para>
            <para>
            NOTE:<br/>
            When setting HardwareAccelerate3DLines to false, this must be done before the 3D objects are initialized
            (after the DXScene was created; when using DXSceneView it is recommended to change the value of this property in DXSceneDeviceCreated event handler).
            The following examples shows how to do that when using DXViewportView (named MainDXViewportView):
            </para>
            <example>
            <code>
            MainDXViewportView.DXSceneDeviceCreated += delegate(object sender, EventArgs args)
            {
                // Called after DXScene and DXDevice were initialized and before SceneNodes are created
                if (MainDXViewportView.DXScene != null) // DXScene can be null in case of WPF rendering
                    MainDXViewportView.DXScene.HardwareAccelerate3DLines = false;
            };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.RenderConnectedLinesAsDisconnected">
            <summary>
            Gets or sets a boolean that specifes if all connected 3D lines (polylines, line arc, rectangle, etc.) are rendered as disconnected 3D lines (fully hardware accelerated).
            Default value is false.
            </summary>
            <remarks>
            <para>
            <b>RenderConnectedLinesAsDisconnected</b> gets or sets a boolean that specifes if all connected 3D lines (polylines, line arc, rectangle, etc.) are rendered as simple disconnected 3D lines (and hardware accelerated).
            Default value is false.
            </para>
            <para>
            Connected 3D lines are 3D lines where the end point of one line is the start point of the next line and where the connection between the lines is "smoothed".
            In Ab3d.PowerToys library the connected 3D lines are created with the following objects: PolyLineVisual3D, LineArcVisual3D, RectangleVisual3D, MultiPolyLineVisual3D, TextVisual3D, LineWithTextVisual3D, CenteredTextVisual3D.
            </para>
            <para>
            Disconnected 3D lines are simple 3D lines are not connected to each other. 
            In Ab3d.PowerToys library the connected 3D lines are created with the following objects: LineVisual3D, MultiLineVisual3D, WireBoxVisual3D, WireCrossVisual3D, WireGridVisual3D, WireframeVisual3D.
            </para>
            <para>
            One simple 3D line can be rendered with rendering a rectangle where rectangle's height would be set to LineThickness and its length to line length.
            A rectangle can be rendered on the graphics card with creating two triangles. This can be easily done on the graphics card in the geometry shader.
            </para>
            <para>
            But when connected lines are rendered, this also require to render additional triangle that will smooth the line connections and fill the gap between the lines.
            This is a moch more complicated operation and is not done on the graphics card. Therefore the MeshGeometry3D for connected lines needs to be prepared on the CPU.
            </para>
            <para>
            Because the connection triangle that is rendered between two connected lines is hardly visible when LineThickness is less or equal to 3,
            the DXEngine by default renders all connected lines with LineThickness is less or equal to 3 as disconnected lines.
            This value can be adjusted by changing the <see cref="P:Ab3d.DirectX.DXScene.RenderConnectedLinesAsDisconnectedLinesThicknessLimit"/> value.
            Also, setting the <see cref="P:Ab3d.DirectX.DXScene.RenderConnectedLinesAsDisconnected"/> property to true will render all connected lines as disconnected.
            </para>
            <para>
            Note that lines with arrows are never rendered with full hardware accelerated DXEngine.
            </para>
            <para>
            NOTE:<br/>
            RenderConnectedLinesAsDisconnectedLinesThicknessLimit and RenderConnectedLinesAsDisconnected properties
            must be set before the 3D lines are initialized and after the DXScene object is created and.
            This can be done in the DXSceneDeviceCreated event (here the DXScene and DXDevice are already created).
            </para>
            <example>
            <code>
            MainDXViewportView.DXSceneDeviceCreated += delegate(object sender, EventArgs args)
            {
               if (DXViewportView1.DXScene != null) // DXScene is null in case of WPF 3D rendering
               {
                   // Here the values are set to the default values - you can change them if you want.
                   DXViewportView1.DXScene.RenderConnectedLinesAsDisconnected = false;
                   DXViewportView1.DXScene.RenderConnectedLinesAsDisconnectedLinesThicknessLimit = 2;
               }
            };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.RenderConnectedLinesAsDisconnectedLinesThicknessLimit">
            <summary>
            Gets or sets the LineThickness value that will limit rendering connected 3D lines (polylines, line arc, rectangle, etc.),  as disconnected 3D lines (fully hardware accelerated).
            The connected 3D lines that have lower or equal LineThickness then the value of this property will be rendered as disconnected 3D line; 
            other connected lines will still be generated on the CPU by Ab3d.PowerToys library. Default value is 3.
            </summary>
            <remarks>
            <para>
            <b>RenderConnectedLinesAsDisconnectedLinesThicknessLimit</b> gets or sets the LineThickness value that will limit rendering connected 3D lines (polylines, line arc, rectangle, etc.),  as disconnected 3D lines (fully hardware accelerated).
            </para>
            <para>
            RenderConnectedLinesAsDisconnectedLinesThicknessLimit is not used when <see cref="P:Ab3d.DirectX.DXScene.RenderConnectedLinesAsDisconnected"/> is set to true.
            </para>
            <para>
            Default value is 3 which means that if connected line has LineThickness less or equal to 3, it will be rendered as disconnected 3D line.
            </para>
            <para>
            Connected 3D lines are 3D lines where the end point of one line is the start point of the next line and where the connection between the lines is "smoothed".
            In Ab3d.PowerToys library the connected 3D lines are created with the following objects: PolyLineVisual3D, LineArcVisual3D, RectangleVisual3D, MultiPolyLineVisual3D, TextVisual3D, LineWithTextVisual3D, CenteredTextVisual3D.
            </para>
            <para>
            Disconnected 3D lines are simple 3D lines are not connected to each other. 
            In Ab3d.PowerToys library the connected 3D lines are created with the following objects: LineVisual3D, MultiLineVisual3D, WireBoxVisual3D, WireCrossVisual3D, WireGridVisual3D, WireframeVisual3D.
            </para>
            <para>
            One simple 3D line can be rendered with rendering a rectangle where rectangle's height would be set to LineThickness and its length to line length.
            A rectangle can be rendered on the graphics card with creating two triangles. This can be easily done on the graphics card in the geometry shader.
            </para>
            <para>
            But when connected lines are rendered, this also require to render additional triangle that will smooth the line connections and fill the gap between the lines.
            This is a moch more complicated operation and is not done on the graphics card. Therefore the MeshGeometry3D for connected lines needs to be prepared on the CPU.
            </para>
            <para>
            Because the connection triangle that is rendered between two connected lines is hardly visible when LineThickness is less or equal to 3,
            the DXEngine by default renders all connected lines with LineThickness is less or equal to 3 as disconnected lines.
            This value can be adjusted by changing the <see cref="P:Ab3d.DirectX.DXScene.RenderConnectedLinesAsDisconnectedLinesThicknessLimit"/> value.
            Also, setting the <see cref="P:Ab3d.DirectX.DXScene.RenderConnectedLinesAsDisconnected"/> property to true will render all connected lines as disconnected.
            </para>
            <para>
            Note that lines with arrows are never rendered with full hardware accelerated DXEngine.
            </para>
            <para>
            NOTE:<br/>
            RenderConnectedLinesAsDisconnectedLinesThicknessLimit and RenderConnectedLinesAsDisconnected properties
            must be set before the 3D lines are initialized and after the DXScene object is created and.
            This can be done in the DXSceneDeviceCreated event (here the DXScene and DXDevice are already created).
            </para>
            <example>
            <code>
            MainDXViewportView.DXSceneDeviceCreated += delegate(object sender, EventArgs args)
            {
               if (DXViewportView1.DXScene != null) // DXScene is null in case of WPF 3D rendering
               {
                   // Here the values are set to the default values - you can change them if you want.
                   DXViewportView1.DXScene.RenderConnectedLinesAsDisconnected = false;
                   DXViewportView1.DXScene.RenderConnectedLinesAsDisconnectedLinesThicknessLimit = 2;
               }
            };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.UseGeometryShaderFor3DLines">
            <summary>
            Gets or sets a boolean that specifies if 3D lines are rendered with using GeometryShader that can create thick lines.
            If false, then all 3D lines will be rendered as simple DirectX lines with thickness 1. Default value is true.
            </summary>
            <remarks>
            <para>
            <b>UseGeometryShaderFor3DLines</b> gets or sets a boolean that specifies if 3D lines are rendered with using GeometryShader that can create thick lines.
            If false, then all 3D lines will be rendered as simple DirectX lines with thickness 1. Default value is true.
            </para>
            <para>
            Setting UseGeometryShaderFor3DLines to false can increase performance when showing many 3D lines.
            </para>
            <para>
            NOTE<br/>
            UseGeometryShaderFor3DLines must be set before the 3D objects are initialized
            (after the DXScene was created; when using DXSceneView it is recommended to change the value of this property in DXSceneDeviceCreated event handler).
            The following examples shows how to do that when using DXViewportView (named MainDXViewportView):
            </para>
            <example>
            <code>
            MainDXViewportView.DXSceneDeviceCreated += delegate(object sender, EventArgs args)
            {
                // Called after DXScene and DXDevice were initialized and before SceneNodes are created
                if (MainDXViewportView.DXScene != null) // DXScene can be null in case of WPF rendering
                    MainDXViewportView.DXScene.UseGeometryShaderFor3DLines = true;
            };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.RenderAntialiased3DLines">
            <summary>
            When false and <see cref="P:Ab3d.DirectX.DXScene.UseGeometryShaderFor3DLines"/> is also false, the 3D lines are rendered without antialiasing them.
            This greatly improves rendering performance. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.IsAutomaticallyUpdatingBeforeEachRender">
            <summary>
            Gets or sets a Boolean that specifies if Update method is automatically called before each rendering of the scene (if it was not yet manually called).
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.VirtualRealityProvider">
            <summary>
            Gets a virtual reality provider that is currently used by this DXScene. This property can be set by calling <see cref="M:Ab3d.DirectX.DXScene.InitializeVirtualRealityRendering(Ab3d.DirectX.VirtualRealityProviderBase)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.ShadowRenderingProvider">
            <summary>
            Gets a ShadowRenderingProvider that is currently used by this DXScene to render shadows. This property can be set by calling <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.RenderingQueues">
            <summary>
            RenderingQueues is a read only collection of rendering queues that represent queues of low lever objects that are prepared to be rendered with DirectX.
            RenderingQueue are rendered in the same order as in the RenderingQueues list.
            The rendering is done in the <see cref="T:Ab3d.DirectX.RenderObjectsRenderingStep"/> rendering step.
            </summary>
            <remarks>
            <para>
            <b>RenderingQueues</b> is a read only collection of rendering queues that represent queues of low lever objects that are prepared to be rendered with DirectX.
            </para>
            <para>
            RenderingQueue are rendered in the same order as in the RenderingQueues list. The rendering is done in the <see cref="T:Ab3d.DirectX.RenderObjectsRenderingStep"/> rendering step.
            </para>
            <para>
            NOTE: A new RenderingQueues instance is created each time a new RenderingQueue is added to removed to this collection. So do not store an instance of this collection locally.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.BackgroundRenderingQueue">
            <summary>
            Gets a RenderingQueue that is rendered first. Objects in this queue are not sorted and are rendered in the same order as they are added to the queue.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.GeometryRenderingQueue">
            <summary>
            Gets a RenderingQueue that contains standard opaque objects. Objects in this queue are sorted so that they are grouped by material to minimize state changes.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.TransparentRenderingQueue">
            <summary>
            Gets a RenderingQueue that contains transparent objects. Objects in this queue are sorted by their distance to the camera - farthest objects are rendered first. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.OverlayRenderingQueue">
            <summary>
            Gets a RenderingQueue that is rendered last. Objects in this queue are not sorted and are rendered in the same order as they are added to the queue.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.RenderingSteps">
            <summary>
            Gets a RenderingStepsList that represents the rendering steps that are executed to render the 3D scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultInitializeRenderingStep">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.InitializeRenderingStep"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultPrepareRenderTargetsRenderingStep">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.PrepareRenderTargetsRenderingStep"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultRenderObjectsRenderingStep">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.RenderObjectsRenderingStep"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultResolveMultisampledBackBufferRenderingStep">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.ResolveMultisampledBackBufferRenderingStep"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultCompleteRenderingStep">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.CompleteRenderingStep"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultRenderPostProcessingRenderingStepsGroup">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.RenderingStepsGroup"/> that groups PreparePostProcessing and RenderPostProcessing rendering steps.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultRenderPostProcessingRenderingStep">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.RenderPostProcessingRenderingStep"/>. This rendering step is defined in the DefaultRenderPostProcessingRenderingStepsGroup.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DefaultPreparePostProcessingRenderingStep">
            <summary>
            Gets a default <see cref="T:Ab3d.DirectX.PreparePostProcessingRenderingStep"/>.  This rendering step is defined in the DefaultRenderPostProcessingRenderingStepsGroup.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.IsMaterialSortingEnabled">
            <summary>
            Gets or sets if sorting objects by their materials is enabled.
            Sorting objects usually improves rendering performance because objects with same materials are rendered one after another and this reduces the required state changes.
            But sometimes user wants to have full control of the order in which the objects are sorted. In this case it is possible to disable material sorting.
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.RenderingContext">
            <summary>
            Gets the RenderingContext that defines the context information that are used during scene rendering.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.UseSharedWpfTexture">
            <summary>
            Gets or sets a boolean that is used only when using BackBuffer without SwapChain and specifies if DXScene is using shared resources (texture) that can be used by DirectX 11 and DirectX 9 (WPF).
            Using shared resources improves performance because the texture that is used to render the DirectX 11 image is shader with WPF composition engine.
            This means that the texture is not copied to main CPU memory and than back to GPU by WPF. 
            Default value is true.
            </summary>
            <remarks>
            <para>
            <b>UseSharedWpfTexture</b> gets or sets a boolean that is used only when using BackBuffer without SwapChain and specifies if DXScene is using shared resources (texture) that can be used by DirectX 11 and DirectX 9 (WPF).
            </para>
            <para>
            Using shared resources improves performance because the texture that is used to render the DirectX 11 image is shader with WPF composition engine. This means that the texture is not copied to main CPU memory and than back to GPU by WPF. 
            </para>
            <para>
            Default value is true.
            </para>
            </remarks>
            <example>
            <para>
            If you want to set the value of UseSharedWpfTexture to false, this needs to be done before the DirectX buffers and other resources are created.
            The best place to set the value is in the DXSceneDeviceCreated event handler.
            </para>
            <code>
            MainDXViewportView.DXSceneDeviceCreated += delegate(object sender, EventArgs e)
            {
                if (MainDXViewportView.DXScene != null) // DXScene can be null in case of WPF rendering
                    MainDXViewportView.DXScene.UseSharedWpfTexture = false;
            };
            </code>
            </example>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.PostProcesses">
            <summary>
            Gets a collection of post processes that will be applied after rendering the 3D scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.Device">
            <summary>
            Gets a DirectX device that is used by this DXScene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.IsInitialized">
            <summary>
            Gets a Boolean that is set to true when this DXScene is initialized - DXDevice are created and also required objects and collections are created: RenderingContext, RenderingQueues, PostProcessing.
            Also the SwapChain is created when the DXScene in initialized with InitializeSwapChain method (though the size of SwapChain buffers might not be final yet).
            Note that when IsInitialized is set to true, the DirectX buffers are initialized only when the size of viewport is already known.
            To see if buffers are initialized check the <see cref="P:Ab3d.DirectX.DXScene.BuffersInitialized"/> property.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.BuffersInitialized">
            <summary>
            Gets a Boolean that specifis if SwapChain and buffers are created.
            This property can be false when DXScene is initialized with zero width and height.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.IsSwapChainCreated">
            <summary>
            Gets a Boolean that specifis if DXScene will be using SwapChain to render the scene and if SwapChain is already created. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DXDevice">
            <summary>
            Gets a DXDevice that was used to initialize this DXScene.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.DXScene.AfterFrameInitialized">
            <summary>
            AfterFrameInitialized event is triggered after the RenderTargets have been set and cleared, Viewports have been set and default Rasterizer state has been set.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.DXScene.AfterObjectsRendered">
            <summary>
            AfterObjectsRendered event is triggered after all the objects have been rendered and before rendered objects are &quot;sent to the screen&quot; (Present method on SwapChain is called or the render target is prepared for D3DImage)
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.DXScene.AfterUpdated">
            <summary>
            AfterUpdated event is triggered after the SceneNode objects have been updated and before the decision is made to render the next frame or not.
            Subscriber to this event can prevent rendering frame or force rendering it with changing the <see cref="P:Ab3d.DirectX.UpdateStatusEventArgs.IsRenderNeeded"/> property in the event args.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.DXScene.AfterFrameRendered">
            <summary>
            AfterFrameRendered event is triggered after all the rendering activities for one frame have been finished.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.DXScene.BackBufferReady">
            <summary>
            BackBufferReady event is triggered when the rendered image is ready to be copied from graphic to main memory.
            This is used when DirectXImage presentation type is used and when DXEngine is using software rendering or when <see cref="P:Ab3d.DirectX.DXScene.UseSharedWpfTexture"/> is set to true.
            In those cases the DXEngine is rendering the image to a so called staging buffer and when the image in staging buffer is ready 
            the BackBufferReady is triggered. The event arguments contain the size of the image, its format and the mapped subresource.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.BackgroundColor">
            <summary>
            Gets or sets a Color4 that represents a background color for the scene. 
            The color values must be alpha premultiplied - each red, green and blue value must be multiplied with alpha value (for example a fully transparent value is (0, 0, 0, 0) and not (0, 255, 255, 255) as in WPF.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.Width">
            <summary>
            Gets an integer that represents a width of the Viewport
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.Height">
            <summary>
            Gets an integer that represents a height of the Viewport
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.Viewport">
            <summary>
            Gets or sets a Viewport that defines the area where the scene will be rendered.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.BackBuffer">
            <summary>
            Gets the BackBuffer as Texture2D
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.BackBufferDescription">
            <summary>
            Gets the Description of the BackBuffer 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.BackBufferRenderTargetView">
            <summary>
            Gets the RenderTargetView of the BackBuffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DepthStencilView">
            <summary>
            Gets the DepthStencilView
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.MSAABackBuffer">
            <summary>
            Gets the MSAA BackBuffer as Texture2D (set if multisampling is used)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.MSAABackBufferDescription">
            <summary>
            Gets the Description of the MSAABackBuffer 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.MSAABackBufferRenderTargetView">
            <summary>
            Get the RenderTargetView of the MSAA BackBuffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.StagingBackBuffer">
            <summary>
            Gets the StagingBackBuffer that is used when the final rendered image needs to be copied to main memory.
            This can be done only from staging buffer. When final render image in not copied to main memory the StagingBackBuffer is null.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.StagingBackBufferDescription">
            <summary>
            Gets the Description of the StagingBackBuffer 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.SwapChain">
            <summary>
            Gets the SwapChain or null if SwapChain is not used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DpiScaleX">
            <summary>
            Gets a float that represents a DPI scale factor in X direction: 1 means 96 DPI, 1.5 means 144 DPI, etc. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.DpiScaleY">
            <summary>
            Gets a float that represents a DPI scale factor in Y direction: 1 means 96 DPI, 1.5 means 144 DPI, etc. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.ShaderQuality">
            <summary>
            Gets or sets a quality settings that specifies the type of shader that should be used to render the scene.
            If DXScene is used with DXViewportView, then this value is set from used GraphicsProfile.
            NOTE: Changing this property after the DXDevice is initialized will have no effect.
            </summary>
            <remarks>
            <para>
            <b>ShaderQuality</b> gets or sets a quality settings that specifies the type of shader that should be used to render the scene.
            </para>
            <para>
            If DXScene is used with DXViewportView, then this value is set from used GraphicsProfile.
            </para>
            <para>
            ShaderQuality can be set to any value defined in the <see cref="P:Ab3d.DirectX.DXScene.ShaderQuality"/> enum.
            </para>
            <para>
            By default ShaderQuality is set to Normal value. This values tries to use per pixel lighting calculations.
            When ShaderQuality is set to Low, than per vertex lighting calculations are used.
            This increases performance because lighting is calculated only for each vertex (instead of each pixel) but reduces the rendering quality.
            </para>
            <para>
            When using shaders that come with DXDevice, the High quality value does not have any effect because DXDevice does not have any additional higher quality shaders but this setting can be used for custom shaders (for example for normal mapping shader that would also require additional mesh data).
            </para>
            <para>
            Changing ShaderQuality after the DXDevice is initialized will have no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.ExecutePixelShaderPerSample">
            <summary>
            Gets or sets a Boolean that specifies if pixel shader is executed for each multisampling sample instead of only once per pixel.
            Setting ExecutePixelShaderPerSample to true turns multisampling into supersampling which can improve rendering quality but can significantly reduce performance.
            If DXScene is used with DXViewportView, then this value is set from used GraphicsProfile.
            Default value is false.
            See remarks for more info.
            </summary>
            <remarks>
            <para>
            <b>ExecutePixelShaderPerSample</b> gets or sets a Boolean that specifies if pixel shader is executed for each multisampling sample instead of only once per pixel.
            </para>
            <para>
            Usually when multisampling is used, pixel shader is executed once for each pixel, while depth/stencil testing is executed for each sample (for example 8 times for 8xMSAA).
            This is very efficient for producing antialiased edges.
            </para>
            <para>
            With setting ExecutePixelShaderPerSample to true, the pixel shader is executed for each sample. This effectively turns multisampling into <b>supersampling</b>.
            This produces edges with the same quality as with multisampling, but supersampling provides better shading quality by invoking the pixel shader more frequently.
            This can improve the details of small parts of 3D models.
            </para>
            <para>
            Supersampling can also significantly reduce performance. The amount of performance reduction is determined by the complexity of executed pixel shader.
            This means that the performance will be the best when using up to three directional lights + one ambient light. This way the optimized directional light shader is used.
            When using more lights or point or spot lights, the general purpose shader is used that is not so optimized and calculates the lighting for each light. This can significantly reduce the performance.
            </para>
            <para>
            Supersampling can be used only for Normal and High shader quality (for PerPixel shader) and only when the hardware support at shader model 4.1 or later (feature level 10.1 or later).
            </para>
            <para>
            If DXScene is used with DXViewportView, then this value is set from used GraphicsProfile.
            </para>        
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.Lights">
            <summary>
            Gets a list of lights that are used in this DXScene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.UsedMultisamplingDescription">
            <summary>
            Gets a SampleDescription that describes what level of multisampling is used by the current DXScene.
            Multisampling is used to create antialiased images with rendering the multiple samples of the same pixel.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.MultisampleCount">
            <summary>
            Gets an integer that represents a used multisample count (used for anti-aliasing)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.IsEnabled">
            <summary>
            Gets or sets if this DXScene is enabled and is rendering the scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.OptimizeNearAndFarCameraPlanes">
            <summary>
            Gets or sets a boolean that specify if NearPlaneDistance and FarPlaneDistance are automatically set by scene bounds (true by default).
            This can prevent z-fighting problems. If you want that that NearPlaneDistance and FarPlaneDistance are set manually, this property must be set to false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.Camera">
            <summary>
            Gets or sets an ICamera that is used to show the scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.FrameNumber">
            <summary>
            Gets an integer that represents the last rendered frame number (increased after each rendered frame)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.Statistics">
            <summary>
            Gets RenderingStatistics class that contains various rendering statistics.
            Statistics is collected only when <see cref="P:Ab3d.DirectX.DXDiagnostics.IsCollectingStatistics"/> is set to true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXScene.RootNode">
            <summary>
            Gets or sets a root SceneNode - the first in the hierarchy.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.#ctor(Ab3d.DirectX.DXDevice,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dxDevice">DXDevice</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeSwapChain(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            InitializeWithSwapChain
            </summary>
            <param name="hWnd">window handle</param>
            <param name="width">width (if 0, swap chain and buffers will be created on first Resize)</param>
            <param name="height">height (if 0, swap chain and buffers will be created on first Resize)</param>
            <param name="preferedMultisampleCount">multisample count that is used if supported by device</param>
            <param name="dpiScaleX">float that represents a DPI scale factor in X direction: 1 means 96 DPI, 1.5 means 144 DPI, etc.</param>
            <param name="dpiScaleY">float that represents a DPI scale factor in Y direction: 1 means 96 DPI, 1.5 means 144 DPI, etc.</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeBackBuffer(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            InitializeWithBackBuffer
            </summary>
            <param name="width">width (if 0, swap chain and buffers will be created on first Resize)</param>
            <param name="height">height (if 0, swap chain and buffers will be created on first Resize)</param>
            <param name="preferedMultisampleCount">multisample count that is used if supported by device</param>
            <param name="dpiScaleX">float that represents a DPI scale factor in X direction: 1 means 96 DPI, 1.5 means 144 DPI, etc.</param>
            <param name="dpiScaleY">float that represents a DPI scale factor in Y direction: 1 means 96 DPI, 1.5 means 144 DPI, etc.</param>        
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeDevice">
            <summary>
            InitializeDevice is a virtual method that calls InitializeDevice on DXDevice if it was not yet initialized.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeSwapChain(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            InitializeSwapChain creates a SwapChain
            </summary>
            <param name="hWnd">handle to window that will be used by the SwapChain (must not be IntPtr.Zero)</param>
            <param name="width">width of the swap chain back buffer (if less or equal to 0, then 1 will be used)</param>
            <param name="height">height of the swap chain back buffer (if less or equal to 0, then 1 will be used)</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeBuffers(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            InitializeBuffers creates SwapChain (if needed) all required buffers and buffer views.
            </summary>
            <param name="width">width of the viewport</param>
            <param name="height">height of the viewport</param>
            <param name="dpiScaleX">X dpi scale (1.0 means 96 DPI)</param>
            <param name="dpiScaleY">Y dpi scale (1.0 means 96 DPI)</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.Resize(System.Int32,System.Int32)">
            <summary>
            Resize method resizes the buffers needed to render the DXScene (DpiScale values are preserved; to change or set DpiScale, call overloaded method that takes DpiScale parameters)
            </summary>
            <param name="newWidth">new width</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.Resize(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Resize method resizes the buffers needed to render the DXScene
            </summary>
            <param name="newWidth">new width</param>
            <param name="newHeight">new height</param>
            <param name="dpiScaleX">dpiScaleX</param>
            <param name="dpiScaleY">dpiScaleY</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.CreateAndUseStagingBuffer">
            <summary>
            CreateAndUseStagingBuffer creates a Staging buffer (used to copy the rendered back buffer to main memory) and set it to RenderingContext.
            </summary>
            <remarks>
            <para>
            <b>CreateAndUseStagingBuffer</b> creates a Staging buffer (used to copy the rendered back buffer to main memory) and set it to RenderingContext.
            </para>
            <para>
            This method can be called when we initially wanted to use Shared texture, but D3DImage initialization failed.
            In this case we need to switch to staging buffer where the back buffer is copied to main memory and used in WPF from there.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeVirtualRealityRendering(Ab3d.DirectX.VirtualRealityProviderBase)">
            <summary>
            InitializeVirtualRealityRendering initializes virtual reality rendering with using the specified virtualRealityProvider.
            To dispose virtual reality rendering pass null as virtualRealityProvider parameter.
            </summary>
            <param name="virtualRealityProvider">VirtualRealityProviderBase</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)">
            <summary>
            InitializeShadowRendering initializes shadow rendering with using the specified shadowRenderingProvider.
            To dispose shadow rendering rendering pass null as shadowRenderingProvider parameter.
            </summary>
            <param name="shadowRenderingProvider">ShadowRenderingProviderBase</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.CreateDefaultRenderingSteps">
            <summary>
            CreateDefaultRenderingSteps clears the current rendering step (<see cref="P:Ab3d.DirectX.DXScene.RenderingSteps"/>) and adds the default rendering steps to the RenderingSteps list.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.OnAfterUpdated(Ab3d.DirectX.UpdateStatusEventArgs)">
            <summary>
            OnAfterFrameInitialized
            </summary>
            <param name="updateStatusEventArgs">RenderingReasonEventArgs</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.OnAfterFrameRendered(Ab3d.DirectX.RenderingEventArgs)">
            <summary>
            OnAfterFrameRendered
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.OnBackBufferReady(Ab3d.DirectX.BackBufferReadyEventArgs)">
            <summary>
            OnBackBufferReady
            </summary>
            <param name="backBufferReadyEventArgs">BackBufferReadyEventArgs</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.OnAfterFrameInitialized(Ab3d.DirectX.RenderingEventArgs)">
            <summary>
            OnAfterFrameInitialized
            </summary>
            <param name="renderingEventArgs">RenderingEventArgs</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.OnAfterObjectsRendered(Ab3d.DirectX.RenderingEventArgs)">
            <summary>
            OnAfterObjectsRendered
            </summary>
            <param name="renderingEventArgs">RenderingEventArgs</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.FindNode(System.String)">
            <summary>
            FindNode searches SceneNode hierarchy starting from RootNode and tries to find the SceneNode with the nodeName. Null is returned if SceneNode is not found.
            </summary>
            <param name="nodeName">name of the SceneNode to find</param>
            <returns>found SceneNode or null if not found</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.InitializeRenderingQueues">
            <summary>
            InitializeRenderingQueues creates the default rendering queues.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.AddRenderingQueueAfter(Ab3d.DirectX.RenderingQueue,Ab3d.DirectX.RenderingQueue)">
            <summary>
            Adds the newRenderQueue after the already registered afterRenderQueue
            </summary>
            <param name="newRenderingQueue">RenderingQueue to add</param>
            <param name="afterRenderingQueue">RenderingQueue that is already registered in the RenderingQueues collection</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.AddRenderingQueueBefore(Ab3d.DirectX.RenderingQueue,Ab3d.DirectX.RenderingQueue)">
            <summary>
            Adds the newRenderQueue before the already registered afterRenderQueue
            </summary>
            <param name="newRenderingQueue">RenderingQueue to add</param>
            <param name="beforeRenderingQueue">RenderingQueue that is already registered in the RenderingQueues collection</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.RemoveRenderingQueue(Ab3d.DirectX.RenderingQueue)">
            <summary>
            Adds the newRenderQueue before the already registered afterRenderQueue
            </summary>
            <param name="renderingQueueToRemove">RenderingQueue to add</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.GetRenderingQueuesDumpString(System.Boolean)">
            <summary>
            Returns string that contains details about all objects inside rendering queues.
            </summary>
            <param name="dumpEmptyRenderingQueues">when false (by default) the empty rendering queues are not written to the returned string</param>
            <returns>string that contains details about all objects inside rendering queues.</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.GetSceneNodesDumpString(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns string that contains details about all DXScene's SceneNodes and their hierarchy.
            </summary>
            <param name="showBounds">true to show object bounds</param>
            <param name="showTransform">true to show object transformation</param>
            <param name="showDirtyFlags">true to show dirty flags</param>
            <param name="showStatistics">true to show SceneNode statistics (how many SceneNodes there are)</param>
            <returns>string that contains details about all DXScene's SceneNodes and their hierarchy.</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.LogUserMessage(System.String)">
            <summary>
            LogUserLabel can be used to add custom user message to DXEngine log file.
            This method work only with debug DXEngine build and with enabled logging. It added the "USER MESSAGE: " prefix to log entry.
            </summary>
            <param name="message">user message that will be added to log file</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.DumpRenderingQueues">
            <summary>
            Writes string that contains details about all objects inside rendering queues to the console (when the application is debugged in Visual Studio the string is written to Output window).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.DumpSceneNodes(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Writes string that contains details about all DXScene's SceneNodes and their hierarchy to the console (when the application is debugged in Visual Studio the string is written to Output window).
            </summary>
            <param name="showBounds">true to show object bounds</param>
            <param name="showTransform">true to show object transformation</param>
            <param name="showDirtyFlags">true to show dirty flags</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.DisposeBackBuffers">
            <summary>
            Disposes the back buffers and views that are defined in this DXScene
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.CreateSpriteBatch(System.Int32,System.String)">
            <summary>
            Creates a SpriteBatch that will be used in this DXScene.
            </summary>
            <param name="initialSpritesCapacity">initial capacity if the List used to store sprites (default value is 32)</param>
            <param name="name">name of the created SpriteBatch (optional)</param>
            <returns>created SpriteBatch</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.RenderScene(System.Boolean)">
            <summary>
            Renders the scene.
            </summary>
            <param name="forceRenderAll">when false the scene will not be rendered if there are no changes</param>
            <returns>true if scene was rendered</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext)">
            <summary>
            Renders the scene with using custom RenderingContext.
            This allows rendering to custom buffers and render targets.
            </summary>
            <param name="renderingContext">custom RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.RenderToBitmap(System.Int32,System.Int32,System.Int32,Ab3d.DirectX.BackBufferReadyEventHandler)">
            <summary>
            RenderToBitmap renders the 3D scene to bitmap with specified width, height and multisampling count (used if possible).
            When the scene is rendered the renderedTextureReadyCallback delegate is called - here it is possible to read the memory with the rendered buffer.
            </summary>
            <param name="width">width of the rendered bitmap</param>
            <param name="height">height of the rendered bitmap</param>
            <param name="preferedMultisampling">multisampling count that is used to render the image (used if possible)</param>
            <param name="renderedTextureReadyCallback">Delegate that is called when the scene is rendered. In this delegate it is possible to read the memory with the rendered buffer.</param>
            <example>
            <para>
            The following code uses RenderToBitmap to render to WPF's WriteableBitmap:
            </para>
            <code>
            var writeableBitmap = new WriteableBitmap(width, height, 96, 96, PixelFormats.Bgra32, null);
            this.DXScene.RenderToBitmap(width, height, preferedMultisampling, delegate (object sender, BackBufferReadyEventArgs e)
            {
                // delegate used by RenderToBitmap method - it is called when the scene is rendered to back buffer and it is available in main CPU memory
                writeableBitmap.Lock();
            
                var viewportRect = new Int32Rect(0, 0, e.Width, e.Height);
            
                // Copy bitmap from e.Data.DataPointer to writeableBitmap
                writeableBitmap.WritePixels(viewportRect, e.Data.DataPointer, e.Data.SlicePitch, e.Data.RowPitch);
            
                writeableBitmap.AddDirtyRect(viewportRect);
                writeableBitmap.Unlock();
            });
            </code>
            </example>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.CreateCustomRenderingContext(SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,SharpDX.Direct3D11.RenderTargetView,SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            Creates a <see cref="T:Ab3d.DirectX.CustomRenderingContext"/> from the specified back buffer, its render target view and depthStencilView.
            The created CustomRenderingContext can be used in <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext)"/> or <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext,System.Boolean)"/> methods.
            </summary>
            <param name="backBuffer">backBuffer</param>
            <param name="backBufferDescription">backBufferDescription</param>
            <param name="backBufferRenderTargetView">backBufferRenderTargetView</param>
            <param name="depthStencilView">depthStencilView</param>
            <returns>CustomRenderingContext with all needed DirectX buffers and views</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.CreateCustomRenderingContext(System.Int32,System.Int32,System.Int32,Ab3d.DirectX.BackBufferReadyEventHandler,Ab3d.DirectX.DisposeList@)">
             <summary>
             Creates a <see cref="T:Ab3d.DirectX.CustomRenderingContext"/> with all needed DirectX buffers and views that can be used to call RenderScene with custom RenderingContext.
             The created RenderingContext can be used in <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext)"/> or <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext,System.Boolean)"/> methods.
             </summary>
             <param name="width">width of the rendered bitmap</param>
             <param name="height">height of the rendered bitmap</param>
             <param name="preferedMultisampling">multisampling count that is used to render the image (used if possible)</param>
             <param name="renderedTextureReadyCallback">Delegate that is called when the scene is rendered. In this delegate it is possible to read the memory with the rendered buffer.</param>
             <param name="objectsToDispose">DisposeList with all the created objects that need to be disposed when they are no longer used</param>
             <example>
             <para>
             The following example shows how to use CreateCustomRenderingContext to render to WPF's WriteableBitmap:
             </para>
             <code>
             DisposeList objectsToDispose;
             
             int width = 512;
             int height = 512;
             int preferedMultisampling = 4;
             int frameNumber = 1; // increase that on each call
             
             var writeableBitmap = new WriteableBitmap(width, height, 96, 96, PixelFormats.Bgra32, null);
             
             // Create custom RenderingContext with the required buffers and other resources - stored in objectsToDispose
             // Also define the callback method that will be called when the rendered image is available in main CPU memory
             var renderingContext = CreateCustomRenderingContext(
                   width, 
                   height, 
                   preferedMultisampling, 
                   delegate (object sender, BackBufferReadyEventArgs e)
                   {
                       // delegate used by RenderToBitmap method - it is called when the scene is rendered to back buffer and it is available in main CPU memory
                       writeableBitmap.Lock();
            
                       var viewportRect = new Int32Rect(0, 0, e.Width, e.Height);
            
                       // Copy bitmap from e.Data.DataPointer to writeableBitmap
                       writeableBitmap.WritePixels(viewportRect, e.Data.DataPointer, e.Data.SlicePitch, e.Data.RowPitch);
            
                       writeableBitmap.AddDirtyRect(viewportRect);
                       writeableBitmap.Unlock();
                   },
                   out objectsToDispose);
            
             // Make sure that frameNumber is increased on each call to ensure that update is called
             renderingContext.SetPerFrameData(frameNumber, ChangeNotifications.All);
            
             // render the scene with custom RenderingContext
             RenderScene(renderingContext);
            
             objectsToDispose.Dispose();
             </code>
             </example>
             <returns>CustomRenderingContext with all needed DirectX buffers and views</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.CreateCustomRenderingContext(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.Format,Ab3d.DirectX.BackBufferReadyEventHandler,Ab3d.DirectX.DisposeList@)">
            <summary>
            Creates a <see cref="T:Ab3d.DirectX.CustomRenderingContext"/> with all needed DirectX buffers and views that can be used to call RenderScene with custom RenderingContext.
            The created RenderingContext can be used in <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext)"/> or <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext,System.Boolean)"/> methods.
            </summary>
            <param name="width">width of the rendered bitmap</param>
            <param name="height">height of the rendered bitmap</param>
            <param name="preferedMultisampling">multisampling count that is used to render the image (used if possible)</param>
            <param name="backBufferFormat">format of back buffer (DXEngine by default usues Format.B8G8R8A8_UNorm that is required for the texture to be shader by by WPF)</param>
            <param name="depthStencilFormat">format of depth stencil buffer (DXEngine by default usues Format.D32_Float)</param>
            <param name="renderedTextureReadyCallback">Delegate that is called when the scene is rendered. In this delegate it is possible to read the memory with the rendered buffer.</param>
            <param name="objectsToDispose">DisposeList with all the created objects that need to be disposed when they are no longer used</param>
            <example>
            <para>
            The following example shows how to use CreateCustomRenderingContext to render to WPF's WriteableBitmap:
            </para>
            <code>
            DisposeList objectsToDispose;
            
            int width = 512;
            int height = 512;
            int preferedMultisampling = 4;
            int frameNumber = 1; // increase that on each call
            
            var writeableBitmap = new WriteableBitmap(width, height, 96, 96, PixelFormats.Bgra32, null);
            
            // Create custom RenderingContext with the required buffers and other resources - stored in objectsToDispose
            // Also define the callback method that will be called when the rendered image is available in main CPU memory
            var renderingContext = CreateCustomRenderingContext(
                  width, 
                  height, 
                  preferedMultisampling, 
                  Format.B8G8R8A8_UNorm,
                  Format.D32_Float,
                  delegate (object sender, BackBufferReadyEventArgs e)
                  {
                      // delegate used by RenderToBitmap method - it is called when the scene is rendered to back buffer and it is available in main CPU memory
                      writeableBitmap.Lock();
            
                      var viewportRect = new Int32Rect(0, 0, e.Width, e.Height);
            
                      // Copy bitmap from e.Data.DataPointer to writeableBitmap
                      writeableBitmap.WritePixels(viewportRect, e.Data.DataPointer, e.Data.SlicePitch, e.Data.RowPitch);
            
                      writeableBitmap.AddDirtyRect(viewportRect);
                      writeableBitmap.Unlock();
                  },
                  out objectsToDispose);
            
            // Make sure that frameNumber is increased on each call to ensure that update is called
            renderingContext.SetPerFrameData(frameNumber, ChangeNotifications.All);
            
            // render the scene with custom RenderingContext
            RenderScene(renderingContext);
            
            objectsToDispose.Dispose();
            </code>
            </example>
            <returns>CustomRenderingContext with all needed DirectX buffers and views</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.CreateCustomRenderingContext(System.Int32,System.Int32,System.Int32,SharpDX.DXGI.Format,SharpDX.DXGI.Format,Ab3d.DirectX.BackBufferReadyEventHandler,Ab3d.DirectX.VirtualRealityProviderBase,Ab3d.DirectX.DisposeList@)">
            <summary>
            Creates a <see cref="T:Ab3d.DirectX.CustomRenderingContext"/> with all needed DirectX buffers and views that can be used to call RenderScene with custom RenderingContext.
            The created RenderingContext can be used in <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext)"/> or <see cref="M:Ab3d.DirectX.DXScene.RenderScene(Ab3d.DirectX.RenderingContext,System.Boolean)"/> methods.
            </summary>
            <param name="width">width of the rendered bitmap</param>
            <param name="height">height of the rendered bitmap</param>
            <param name="preferedMultisampling">multisampling count that is used to render the image (used if possible)</param>
            <param name="backBufferFormat">format of back buffer (DXEngine by default usues Format.B8G8R8A8_UNorm that is required for the texture to be shader by by WPF)</param>
            <param name="depthStencilFormat">format of depth stencil buffer (DXEngine by default usues Format.D32_Float)</param>
            <param name="renderedTextureReadyCallback">Delegate that is called when the scene is rendered. In this delegate it is possible to read the memory with the rendered buffer.</param>
            <param name="virtualRealityProvider">VirtualRealityProviderBase or null</param>
            <param name="objectsToDispose">DisposeList with all the created objects that need to be disposed when they are no longer used</param>
            <example>
            <para>
            The following example shows how to use CreateCustomRenderingContext to render to WPF's WriteableBitmap:
            </para>
            <code>
            DisposeList objectsToDispose;
            
            int width = 512;
            int height = 512;
            int preferedMultisampling = 4;
            int frameNumber = 1; // increase that on each call
            
            var writeableBitmap = new WriteableBitmap(width, height, 96, 96, PixelFormats.Bgra32, null);
            
            // Create custom RenderingContext with the required buffers and other resources - stored in objectsToDispose
            // Also define the callback method that will be called when the rendered image is available in main CPU memory
            var renderingContext = CreateCustomRenderingContext(
                  width, 
                  height, 
                  preferedMultisampling, 
                  Format.B8G8R8A8_UNorm,
                  Format.D32_Float,
                  delegate (object sender, BackBufferReadyEventArgs e)
                  {
                      // delegate used by RenderToBitmap method - it is called when the scene is rendered to back buffer and it is available in main CPU memory
                      writeableBitmap.Lock();
            
                      var viewportRect = new Int32Rect(0, 0, e.Width, e.Height);
            
                      // Copy bitmap from e.Data.DataPointer to writeableBitmap
                      writeableBitmap.WritePixels(viewportRect, e.Data.DataPointer, e.Data.SlicePitch, e.Data.RowPitch);
            
                      writeableBitmap.AddDirtyRect(viewportRect);
                      writeableBitmap.Unlock();
                  },
                  out objectsToDispose);
            
            // Make sure that frameNumber is increased on each call to ensure that update is called
            renderingContext.SetPerFrameData(frameNumber, ChangeNotifications.All);
            
            // render the scene with custom RenderingContext
            RenderScene(renderingContext);
            
            objectsToDispose.Dispose();
            </code>
            </example>
            <returns>CustomRenderingContext with all needed DirectX buffers and views</returns>
        </member>
        <member name="T:Ab3d.DirectX.DXScene.ChangeNotifications">
            <summary>
            ChangeNotifications enum defines flags that describe what changes have occur in the DXScene from last time the scene was rendered.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.CameraChanged">
            <summary>
            CameraChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.IsEnabledChanged">
            <summary>
            IsEnabledChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.LightsCountChanged">
            <summary>
            LightsCountChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.LightPropertiesChanged">
            <summary>
            LightPropertiesChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.EffectsChanged">
            <summary>
            EffectsChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.MaterialPropertiesChanged">
            <summary>
            MaterialPropertiesChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.SceneBoundsChanged">
            <summary>
            SceneBoundsChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.SceneNodesCountChanged">
            <summary>
            SceneNodesCountChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.SceneNodesPositionChanged">
            <summary>
            SceneNodesPositionChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.SceneNodesPropertiesChanged">
            <summary>
            SceneNodesPropertiesChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.SceneNodesWorldMatrixChanged">
            <summary>
            SceneNodesWorldMatrixChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.SizeChanged">
            <summary>
            SizeChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.BackgroundColorChanged">
            <summary>
            BackgroundColorChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.ShaderSettingsChanged">
            <summary>
            ShaderSettingsChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.RenderingStepsChanged">
            <summary>
            RenderingStepsChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.PostProcessChanged">
            <summary>
            PostProcessChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.VirtualRealitySettingsChanged">
            <summary>
            VirtualRealitySettingsChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.ShadowRenderingSettingsChanged">
            <summary>
            ShadowRenderingSettingsChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.RenderToBitmap">
            <summary>
            RenderToBitmap - used in RenderingContext.RenderReason when RenderToBitmap method is used.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.OtherChange">
            <summary>
            OtherChange
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXScene.ChangeNotifications.All">
            <summary>
            All
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.NotifyChange(Ab3d.DirectX.DXScene.ChangeNotifications,System.Object)">
            <summary>
            NotifyChange method adds the specified ChangeNotifications to all the changes flags
            </summary>
            <param name="changeType">ChangeNotifications</param>
            <param name="changedObject">object that produced the change (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.ClearChangeFlag(Ab3d.DirectX.DXScene.ChangeNotifications)">
            <summary>
            Removes the specified ChangeNotifications from the current changes flags
            </summary>
            <param name="changeTypeToClear">ChangeNotifications</param>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.IsChangeFlagSet(Ab3d.DirectX.DXScene.ChangeNotifications)">
            <summary>
            Returns true if the specified changeType is currently set
            </summary>
            <param name="changeType">ChangeNotifications</param>
            <returns>the specified changeType is currently set</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXScene.Update">
            <summary>
            Update calls Update method on all child nodes.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.MeshObjectNode">
            <summary>
            MeshObjectNode is an <see cref="T:Ab3d.DirectX.ObjectNode"/> that can render an object that is defined by object derived from <see cref="T:Ab3d.DirectX.MeshBase"/> class.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshObjectNode.Mesh">
            <summary>
            Gets a Mesh that defines the 3D object geometry.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.MeshObjectNode.Materials">
            <summary>
            Gets or sets an array of Material that can be set to override the materials defined in the Mesh.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.MeshObjectNode.#ctor(Ab3d.DirectX.MeshBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.MeshObjectNode"/> class.
            </summary>
            <param name="meshBase">MeshBase object that defines the 3D object geometry</param>
        </member>
        <member name="M:Ab3d.DirectX.MeshObjectNode.#ctor(Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.MeshObjectNode"/> class.
            </summary>
            <param name="meshBase">MeshBase object that defines the 3D object geometry</param>
            <param name="material">material used by this ObjectNode</param>
        </member>
        <member name="M:Ab3d.DirectX.MeshObjectNode.#ctor(Ab3d.DirectX.MeshBase,Ab3d.DirectX.Material[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.MeshObjectNode"/> class.
            </summary>
            <param name="mesh">MeshBase object that defines the 3D object geometry</param>
            <param name="materials">material used by this ObjectNode</param>
            <exception cref="T:System.ArgumentNullException">mesh;mesh is null.</exception>
        </member>
        <member name="M:Ab3d.DirectX.MeshObjectNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.MeshObjectNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.MeshObjectNode.CollectRenderableObjects">
            <summary>
            CollectRenderableObjects method gets the meshes from ObjectNode and creates IRenderableObject from them.
            For each created IRenderableObject, it calls the RenderingQueueSelector to get the RenderingQueue.
            Than it adds the created IRenderableObject to the get RenderingQueue.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.ObjectNode">
            <summary>
            ObjectNode is a <see cref="T:Ab3d.DirectX.SceneNode"/> that is used by scene nodes that can produce renderable objects (objects derived from RenderablePrimitiveBase class).
            Renderable objects are defined in the overridden <see cref="M:Ab3d.DirectX.ObjectNode.CollectRenderableObjects"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ObjectNode.IsAutomaticallyCollectingRenderableObjectsForChildNodes">
            <summary>
            Gets or sets a Boolean that specifies if CollectRenderableObjects will be automatically called for all ChildNodes of this ObjectNode. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ObjectNode.CustomRenderingQueue">
            <summary>
            Gets or sets a custom RenderingQueue that will contain the RenderablePrimitiveBase objects created by this ObjectNode.
            If CustomRenderingQueue is null, then the ObjectNode will be put into <see cref="P:Ab3d.DirectX.DXScene.GeometryRenderingQueue"/> or <see cref="P:Ab3d.DirectX.DXScene.TransparentRenderingQueue"/> based on the material.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ObjectNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.ObjectNode"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ObjectNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.ObjectNode"/> class.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.ObjectNode.CollectRenderableObjects">
            <summary>
            CollectRenderableObjects gets the meshes from this ObjectNode and creates the renderable objects from them (objects derived from RenderablePrimitiveBase class).
            Then it adds the renderable objects to the appropriate RenderingQueue (rendering queues are defined on parent DXScene)
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.RenderingEventHandler">
            <summary>
            RenderingEventHandler is an event handler with RenderingEventArgs as event arguments
            </summary>
            <param name="sender">sender</param>
            <param name="e">RenderingEventArgs</param>
        </member>
        <member name="T:Ab3d.DirectX.RenderingEventArgs">
            <summary>
            RenderingEventArgs contains the <see cref="F:Ab3d.DirectX.RenderingEventArgs.RenderingContext"/> and is used for AfterFrameInitialized and AfterObjectsRendered events on DXScene.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.RenderingEventArgs.RenderingContext">
            <summary>
            RenderingContext
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.RenderingEventArgs.#ctor(Ab3d.DirectX.RenderingContext)">
            <summary>
            Constructor
            </summary>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="T:Ab3d.DirectX.SceneNode">
            <summary>
            SceneNode class represents a basic component of a 3D scene that is composed of various SceneNodes organized in a hierarchical structure.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.Logger">
            <summary>
            Logger is always null in release build
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags">
            <summary>
            SceneNodeDirtyFlags enum defines the flags that are used to mark which part of the SceneNode was changed (is dirty).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.Unchanged">
            <summary>
            Unchanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.ParentChanged">
            <summary>
            ParentChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.ChildAdded">
            <summary>
            ChildAdded
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.ChildRemoved">
            <summary>
            ChildRemoved
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.ChildMoved">
            <summary>
            ChildMoved
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.ChildChanged">
            <summary>
            ChildMoved
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.IsActiveChanged">
            <summary>
            IsActiveChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.TransformChanged">
            <summary>
            Used when Transform on this SceneNode is changed. This should not be confused with WorldMatrixChanged that is changed also if the parent's transform is changed.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.WorldMatrixChanged">
            <summary>
            Used when Transform on this or one of the parent SceneNodes is changed. This should not be confused with TransformChanged that is used only when Transform is changed on this SceneNode.
            WorldMatrixChanged should not be set from NotifyChange but only from UpdateWorldMatrix method.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.BoundsChanged">
            <summary>
            The Bounds property has changed.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.ChildBoundsChanged">
            <summary>
            Bounds of a child node was changed - the Bounds of this SceneNode need to be updated accordingly.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.MaterialChanged">
            <summary>
            MaterialChanged
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.MeshPositionsChanged">
            <summary>
            Used when only positions are changed (texture coordinates and triangle indices are the same)
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.MeshChanged">
            <summary>
            Used when the whole mesh needs to be recreated
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.RenderingQueueChanged">
            <summary>
            Used when the rendering queue has been changed
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.OtherChange">
            <summary>
            OtherChange
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.SceneNodeCreated">
            <summary>
            SceneNodeCreated
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.All">
            <summary>
            Everything was changed
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.DirtyFlags">
            <summary>
            Gets the current dirty flags
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.ParentDXScene">
            <summary>
            Gets the parent DXScene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.Transform">
            <summary>
            Gets or sets the Transformation.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.worldMatrix">
            <summary>
            Final world matrix that is calculated from the parent's world matrix and this node's transformation matrix
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.isWorldMatrixIdentity">
            <summary>
            true is final world matrix is identity
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.Bounds">
            <summary>
            Bounds of this object (in world space).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.IsActive">
            <summary>
            Gets or sets a Boolean that specified is this SceneNode is active - if it is visible in the scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.Tag">
            <summary>
            Tag can contain any arbitrary data.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.ParentNode">
            <summary>
            Gets or sets the parent SceneNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.IsLocked">
            <summary>
            Gets or sets a boolean that specified is this SceneNode can be changed or not. If true than this SceneNode cannot be changed any more. 
            This also prevents checking DirtyFlags and calling Update method (calling NotifySceneNodeChange has no effect).
            SceneNode can be made locked with calling Lock method. It can be un-locked with calling UnLock method.
            Note that we can also lock only child nodes with calling LockChildNodes method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.IsChildNodesListLocked">
            <summary>
            Gets a boolean that specifies if ChildNodes for this SceneNode can be changed.
            This property is set to true with calling LockChildNodes method. After locking the child nodes, they cannot be unlocked any more.
            Note that this property is different from IsLocked property - that one prevent any change to SceneNode and can be unlocked.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.SceneNode.childNodes">
            <summary>
            Protected list of SceneNodes
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.ChildNodes">
            <summary>
            Gets a readonly collection of child SceneNodes
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SceneNode.ChildNodesCount">
            <summary>
            Gets a number of child SceneNodes count
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.SceneNode.ChildNodesChanged">
            <summary>
            Occurs when list of ChildNode is changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.SceneNode"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.SceneNode"/> class.
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.NotifySceneNodeChange(Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags)">
            <summary>
            Add the SceneNodeDirtyFlags to this SceneNode's DirtyFlags flags.
            This methods also calls NotifyChange on parent DXScene.
            </summary>
            <param name="changeType">SceneNodeDirtyFlags</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.NotifyAllParentSceneNodesChange(Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags,System.Boolean)">
            <summary>
            Add the changeType to all parent SceneNodes.
            This does not change this SceneNode's dirty flags.
            </summary>
            <param name="changeType">SceneNodeDirtyFlags</param>
            <param name="updateOnlyUntilSetFlag">if true, than setting the flag is stopped when a parent with already set flag is found</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.NotifyAllChildSceneNodesChange(Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags,System.Boolean)">
            <summary>
            Add the changeType to all child SceneNodes.
            This does not change this SceneNode's dirty flags.
            </summary>
            <param name="changeType">SceneNodeDirtyFlags</param>
            <param name="updateOnlyUntilSetFlag">if true, than setting the flag is stopped when a child with already set flag is found</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.ClearDirtyFlag(Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags)">
            <summary>
            Removes the dirtyFlagToClear from the current DirtyFlags
            </summary>
            <param name="dirtyFlagToClear">SceneNodeDirtyFlags</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.CleanAllDirtyFlags(System.Boolean)">
            <summary>
            Clean dirty flags on this and child nodes.
            This is called after a frame was rendered.
            </summary>
            <param name="clearChildNodeFlags">true to clear dirty flags from all child nodes also (true by default)</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.IsDirtyFlagSet(Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags)">
            <summary>
            Returns a Boolean that specifies if the dirtyFlag that is passed as parameter is set in this SceneNode
            </summary>
            <param name="dirtyFlag">dirty flag as SceneNodeDirtyFlags</param>
            <returns>true if the dirtyFlag that is passed as parameter is set in this SceneNode</returns>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.Lock">
            <summary>
            Locks the SceneNode which make it unchangable.
            Note that Lock can be called only when the DirtyFlags are Unchanged - there are no changes made on this SceneNode.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.UnLock">
            <summary>
            Unlocks the SceneNode.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.LockChildNodes">
            <summary>
            LockChildNodes method locks ChildNodes and prevents changing them. After locking SceneNodes they cannot be unlocked again.
            This is used mostly by SceneNodes that does not contain any ChildNodes - for example for MeshObjectNode.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.CheckIsChangeAllowed">
            <summary>
            This method throws InvalidOperationException when IsLocked is true.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.CheckIsChildNodeChangeAllowed">
            <summary>
            This method throws InvalidOperationException when IsLocked or IsChildNodesListLocked is true.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.AddChildren(System.Collections.Generic.IEnumerable{Ab3d.DirectX.SceneNode})">
            <summary>
            Adds child SceneNodes to the ChildNodes collection of this SceneNode
            </summary>
            <param name="childNodesToAdd">IEnumerable of SceneNodes</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.AddChild(Ab3d.DirectX.SceneNode)">
            <summary>
            Adds the specified SceneNode to the ChildNodes collection of this SceneNode
            </summary>
            <param name="childNode">SceneNode that is added to the ChildNodes collection</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.InsertChild(System.Int32,Ab3d.DirectX.SceneNode)">
            <summary>
            Inserts the specified SceneNode to the ChildNodes collection to the specified index
            </summary>
            <param name="index">index at which the child node is inserted; if -1 than the childNode is added to the end</param>
            <param name="childNode">SceneNode that is inserted to the ChildNodes collection</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.RemoveChild(Ab3d.DirectX.SceneNode)">
            <summary>
            Removes the specified SceneNode from the ChildNodes collection
            </summary>
            <param name="childNode">SceneNode that is removed to the ChildNodes collection</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.RemoveChildAt(System.Int32)">
            <summary>
            Removes the SceneNode at the specified index from the ChildNodes collection
            </summary>
            <param name="childIndex">index at which the child node is removed</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.ReplaceChild(Ab3d.DirectX.SceneNode,Ab3d.DirectX.SceneNode)">
            <summary>
            Replaces the currentChildNode with the newChildNode
            </summary>
            <param name="currentChildNode">SceneNode that will be replaced by newChildNode</param>
            <param name="newChildNode">SceneNode that replacest the currentChildNode</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.ReplaceChild(System.Int32,Ab3d.DirectX.SceneNode)">
            <summary>
            Replaces the SceneNode at the specified index with the newChildNode
            </summary>
            <param name="currentChildNodeIndex">index at which the SceneNode is replaced</param>
            <param name="newChildNode">SceneNode that replacest the SceneNode at the specified index</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.ClearChildNodes">
            <summary>
            Removes all SceneNodes from the ChildNodes collection
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.FindNode(System.String)">
            <summary>
            Searches the ChildNodes recursivelly and returns the SceneNode with the specified name if found; else returns null.
            </summary>
            <param name="nodeName">name of the SceneNode</param>
            <returns>SceneNode with the specified name if found; else returns null</returns>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.UpdateWorldMatrix(System.Boolean)">
            <summary>
            UpdateWorldMatrix checks if dirty flags indicate that the final world matrix for this SceneNode needs to be recalculated.
            </summary>
            <param name="forceUpdate">if true than the final world matrix is always recalculated</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.OnDisconnectingFromDXScene">
            <summary>
            OnDisconnectingFromDXScene is called when the SceneNode is about to be disconnected from DXScene (parentDXScene is not yet null).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.GetAllDescendantNodes">
            <summary>
            Returns an enumerable of this SceneNode and all SceneNode that are children of this SceneNode and its children - gets all SceneNode in the hierarchy tree below this SceneNode as flat IEnumerable.
            </summary>
            <returns>IEnumerable of SceneNodes</returns>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.GetSceneNodesBounds(Ab3d.DirectX.SceneNode,System.Func{Ab3d.DirectX.SceneNode,System.Boolean})">
            <summary>
            Returns the Bounds of the scene nodes that are children of the rootSceneNode. The sceneNodesFilter Func can be used to choose which scene nodes to use.
            </summary>
            <param name="rootSceneNode">root scene node</param>
            <param name="sceneNodesFilter">Func that should return true for all SceneNodes that should be used to calculate Bounds</param>
            <returns>Bounds of the rootSceneNode child nodes</returns>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.OnChildNodesChanged(System.Collections.Specialized.NotifyCollectionChangedAction,Ab3d.DirectX.SceneNode)">
            <summary>
            OnChildNodesChanged
            </summary>
            <param name="action">NotifyCollectionChangedAction</param>
            <param name="changeSceneNode">change SceneNode</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.OnChildNodesChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IList{Ab3d.DirectX.SceneNode})">
            <summary>
            OnChildNodesChanged
            </summary>
            <param name="action">NotifyCollectionChangedAction</param>
            <param name="changeSceneNodes">IList of changed SceneNode</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Ab3d.DirectX.SceneNode.GetDetailsText(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns string that tells details about this SceneNode
            </summary>
            <param name="showBounds">if true than bounds of this SceneNode is shown</param>
            <param name="showTransform">if true than transformation matrix is shown when set</param>
            <param name="showDirtyFlags">if true than DirtyFlags are shown</param>
            <returns>string that tells details about this SceneNode</returns>
        </member>
        <member name="T:Ab3d.DirectX.ScreenSpaceLineNode">
            <summary>
            ScreenSpaceLineNode class is an ObjectNode that represent a 3D line that whose thickness is defined in screen space units.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ScreenSpaceLineNode.LineMaterial">
            <summary>
            Gets or sets an array of Material that can be set to override the materials defined in the Mesh.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineNode.#ctor(Ab3d.DirectX.ScreenSpaceLineMesh,Ab3d.DirectX.Materials.ILineMaterial,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="screenSpaceLineMesh">ScreenSpaceLineMesh</param>
            <param name="lineMaterial">lineMaterial</param>
            <param name="name">name (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineNode.#ctor(SharpDX.Vector3[],System.Boolean,System.Boolean,Ab3d.DirectX.Materials.ILineMaterial,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions</param>
            <param name="isLineStrip">true if lines are connected to each other; false if lines are disconnected</param>
            <param name="isLineClosed">true if the end of the last line is connected to the beginning of the first line</param>
            <param name="lineMaterial">lineMaterial</param>
            <param name="name">name (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineNode.#ctor(SharpDX.Vector3[],System.Boolean,System.Boolean,SharpDX.Color4,System.Single,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions</param>
            <param name="isLineStrip">true if lines are connected to each other; false if lines are disconnected</param>
            <param name="isLineClosed">true if the end of the last line is connected to the beginning of the first line</param>
            <param name="lineColor">color of the line</param>
            <param name="lineWidth">width of the line</param>
            <param name="name">name (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineNode.CollectRenderableObjects">
            <summary>
            CollectRenderableObjects method gets the meshes from ObjectNode and creates IRenderableObject from them.
            For each created IRenderableObject, it calls the RenderingQueueSelector to get the RenderingQueue.
            Than it adds the created IRenderableObject to the get RenderingQueue.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ScreenSpaceLineNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.AssemblyShaderBytecodeProvider">
            <summary>
            AssemblyShaderBytecodeProvider class provides access to compiled shaders stored as embedded resources in an assembly.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.AssemblyShaderBytecodeProvider.ResourceAssembly">
            <summary>
            Gets an assembly that was used to create this AssemblyShaderResources
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.AssemblyShaderBytecodeProvider.ResourceRootName">
            <summary>
            Gets string that specifies the root name of the shaders
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.AssemblyShaderBytecodeProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resourceAssembly">an assembly that was used to create this AssemblyShaderResources</param>
            <param name="resourceRootName">string that specifies the root name of the shaders</param>
        </member>
        <member name="M:Ab3d.DirectX.AssemblyShaderBytecodeProvider.GetShaderBytecode(System.String)">
            <summary>
            Gets bytes array of the compiled shader with resourceName or null if this class instance does not have this resource.
            </summary>
            <param name="resourceName">name of the resource</param>
            <returns>bytes array of the compiled shader or null if this instance does not have this resource</returns>
        </member>
        <member name="M:Ab3d.DirectX.AssemblyShaderBytecodeProvider.Equals(System.Object)">
            <summary>
            Overridden Equals compares this instance with obj by refrence and also by uses the same assembly and root name
            </summary>
            <param name="obj">obj</param>
            <returns>true if obj is equal by reference or is AssemblyShaderBytecodeProvider with the same assembly and root name</returns>
        </member>
        <member name="M:Ab3d.DirectX.AssemblyShaderBytecodeProvider.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current AssemblyShaderBytecodeProvider.
            </returns>
        </member>
        <member name="M:Ab3d.DirectX.AssemblyShaderBytecodeProvider.GetAllResourceNames">
            <summary>
            Returns an array of strings that represents the resource names available in this ShaderBytecodeProvider.
            </summary>
            <returns>an array of strings that represents the resource names available in this ShaderBytecodeProvider</returns>
        </member>
        <member name="T:Ab3d.DirectX.Shaders.DirectionalLightShader">
            <summary>
            DirectionalLightShader class is used by the <see cref="T:Ab3d.DirectX.Effects.StandardEffect"/> and is optimized to render up to 3 directional lights.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Shaders.DirectionalLightShader.IsCalculatingWorldViewProjectionInVertexShader">
            <summary>
            Gets or sets a boolean that specifies if WorldViewProjection matrix is calculated in vertex shader.
            If value is false then WorldViewProjection matrix is calculated in .Net code. Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsCalculatingWorldViewProjectionInVertexShader</b> gets or sets a boolean that specifies if WorldViewProjection matrix is calculated in vertex shader.
            If value is false then WorldViewProjection matrix is calculated in .Net code.
            </para>
            <para>
            Multipliying matrixes in .Net can be very expensive. 
            When we are rendering many objects with low positions count, it is better to calculate the matrixes on the graphics card in vertex shader (calculation is performed for every position).
            </para>
            <para>
            But when we are rendering object with a lot of positions it is better to calculate the matrix in .Net code.
            This is also true when we are using software rendering.
            </para>
            <para>
            Default value is true.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.DirectionalLightShader.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.DirectionalLightShader.PreloadShaders">
            <summary>
            Loads all the shaders
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.DirectionalLightShader.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.DirectionalLightShader.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Sets the content of the constant buffers based on the specified Material and other properties.
            </summary>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive)</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.DirectionalLightShader.ApplyConstantBuffersAndShaders(Ab3d.DirectX.ShaderQuality)">
            <summary>
            ApplyConstantBuffersAndShaders method sets the vertex and pixel shaders and prepair their constant buffers for rendering the objects. 
            Type of shader is defined by shaderQuality and by the previous call to SetMaterialConstantBuffer where it is determined if material has texture or not.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.DirectionalLightShader.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Shaders.IStandardShader">
            <summary>
            IStandardShader interface defines methods that need to be implemented by a Shader class that can be used as a material that can render standard materials.
            Standard materials support diffuse color with textures, specular color with specular power and emissive color.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.IStandardShader.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.IStandardShader.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Sets the content of the constant buffers based on the specified Material and other properties.
            </summary>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive)</param>
        </member>
        <member name="T:Ab3d.DirectX.Shaders.SuperInstancedShader">
            <summary>
            SuperInstancedShader can render many instances of a mesh and support many different lights (Directional, Point, Spot and Ambient light).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperInstancedShader.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperInstancedShader.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperInstancedShader.SetMaterialConstantBuffer(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase,System.Boolean,System.Boolean)">
            <summary>
            Sets the constent of the constant buffers based on the specified Material and other properties.
            </summary>
            <param name="material">Material</param>
            <param name="renderablePrimitive">RenderablePrimitiveBase</param>
            <param name="useInstanceObjectColor">if true (by default) then color defined in instance buffer is used; if false color defined in IDiffuseMaterial is used</param>
            <param name="hasAlphaBlend">true if the material has transparency</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperInstancedShader.ApplyShaders(System.Boolean)">
            <summary>
            ApplyShaders binds the appropriate shaders and their constant buffers and sets the states.
            </summary>
            <param name="isPerPixelShader">true when per pixel shader is used, else per vertex shader is used</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperInstancedShader.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Shaders.SuperShader">
            <summary>
            SuperInstancedShader class is used by the <see cref="T:Ab3d.DirectX.Effects.StandardEffect"/> and support many different lights (Directional, Point, Spot and Ambient light).
            The number of lights that can be rendered in single pass is defined by the <see cref="F:Ab3d.DirectX.Shaders.SuperShader.MaxLights"/> constant.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Shaders.SuperShader.MaxLights">
            <summary>
            Maximum number of lights that can be rendered by this SuperShader (Ambient light is not counted).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Shaders.SuperShader.MaxShadowLights">
            <summary>
            Gets the maximum number of lights that can cast shadow.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Shaders.SuperShader.ShadowTreshold">
            <summary>
            Gets or sets a float value that helps prevent light bleeding (having areas that should be in shadow fully illuminated) for variance shadow mapping.
            </summary>
            <remarks>
            <para>
            Gets or sets a float value that helps prevent light bleeding (having areas that should be in shadow fully illuminated) for variance shadow mapping.
            </para>
            <para>
            The value is used to map all shadow values from 0 ... ShadowTreshold to 0 and then linearly rescale the values from ShadowTreshold to 1 into 0 to 1.
            </para>
            <para>
            For more info see "Shadow bleeding" in "Chapter 8. Summed-Area Variance Shadow Maps" (http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html)
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.PreloadShaders">
            <summary>
            Loads all the shaders
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.GetRequiredRenderingPassesCount(System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Returns number of rendering passes that are required to render the specified lights.
            </summary>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
            <returns>number of rendering passes that are required to render the specified lights</returns>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)">
            <summary>
            Sets per frame settings for this effect (this sets camera, lights and other per frame settings).
            </summary>
            <param name="camera">camera</param>
            <param name="lights">list of lights</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.ApplyRenderingPass(System.Int32,Ab3d.DirectX.RenderingContext)">
            <summary>
            Prepares the lights constant buffer for the specified rendering pass.
            </summary>
            <param name="renderingPassIndex">rendering pass index</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.ApplyMaterial(Ab3d.DirectX.Material,Ab3d.DirectX.RenderablePrimitiveBase)">
            <summary>
            Sets the content of the constant buffers based on the specified Material and other properties.
            </summary>
            <param name="material">Material</param>
            <param name="renderableGeometry">object that the material is applied for (usually RenderablePrimitive)</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.SetShadowMappingParameters(Ab3d.DirectX.ShadowLightData[],Ab3d.DirectX.RenderingContext)">
            <summary>
            SetShadowMappingParameters sets parameters needed for shadow mapping.
            This method must be called before the <see cref="M:Ab3d.DirectX.Shaders.SuperShader.ApplyPerFrameSettings(Ab3d.DirectX.ICamera,System.Collections.Generic.IList{Ab3d.DirectX.Lights.ILight},Ab3d.DirectX.RenderingContext)"/> method.
            Shadow rendering is enabled only after the next call to ApplyPerFrameSettings and before another ApplyPerFrameSettings call.
            </summary>
            <param name="shadowLightsData">array of ShadowLightData - one element for each light</param>
            <param name="renderingContext">RenderingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Shaders.SuperShader.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.DirectoryShaderBytecodeProvider">
            <summary>
            DirectoryShaderBytecodeProvider class provides access to shaders stored as files in the specified directory on disk.
            The class can be registered by <see cref="T:Ab3d.DirectX.EffectsManager"/> and can used to generate shaders from the files registered by this class.
            Resources registered by this DirectoryShaderBytecodeProvider are available by file name with extension but without directory path.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DirectoryShaderBytecodeProvider.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DirectoryShaderBytecodeProvider.RefreshFiles">
            <summary>
            Refreshes the list of files in the directory. This method is thread safe.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DirectoryShaderBytecodeProvider.GetShaderBytecode(System.String)">
            <summary>
            Gets bytes array of the compiled shader with resourceName or null if this class instance does not have this resource.
            </summary>
            <param name="resourceName">name of the resource</param>
            <returns>bytes array of the compiled shader or null if this instance does not have this resource</returns>
        </member>
        <member name="M:Ab3d.DirectX.DirectoryShaderBytecodeProvider.GetAllResourceNames">
            <summary>
            Returns an array of strings that represents the resource names available in this ShaderBytecodeProvider.
            </summary>
            <returns>an array of strings that represents the resource names available in this ShaderBytecodeProvider</returns>
        </member>
        <member name="T:Ab3d.DirectX.FileShaderBytecodeProvider">
            <summary>
            FileShaderBytecodeProvider class provides access to shaders stored as files in file system.
            The class can be registered by <see cref="T:Ab3d.DirectX.EffectsManager"/> and can be used to generate shaders from the files registered by this class.
            Before the files can be accessed, the files must be registered by <see cref="M:Ab3d.DirectX.FileShaderBytecodeProvider.AddResourceFile(System.String,System.String)"/>, <see cref="M:Ab3d.DirectX.FileShaderBytecodeProvider.AddResourceFile(System.String)"/> or <see cref="M:Ab3d.DirectX.FileShaderBytecodeProvider.AddResourceFiles(System.Collections.Generic.IEnumerable{System.String})"/>.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.FileShaderBytecodeProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.FileShaderBytecodeProvider.AddResourceFile(System.String,System.String)">
            <summary>
            AddResourceFile registers the resourceName and associates it with the specified fullFileNameWithPath. This method is thread safe.
            </summary>
            <param name="resourceName">resourceName</param>
            <param name="fullFileNameWithPath">file name with full path to the file</param>
            <exception cref="T:System.IO.FileNotFoundException">exception is thrown when the file does not exist</exception>
        </member>
        <member name="M:Ab3d.DirectX.FileShaderBytecodeProvider.AddResourceFile(System.String)">
            <summary>
            AddResourceFile registers the file specified with fullFileNameWithPath with resource name that is generated from the file name (with extention).  This method is thread safe.
            </summary>
            <param name="fullFileNameWithPath">file name with full path to the file</param>
        </member>
        <member name="M:Ab3d.DirectX.FileShaderBytecodeProvider.AddResourceFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            AddResourceFiles registers files specified in fileNames enumerable collection. This method is thread safe.
            </summary>
            <param name="fileNames">IEnumerable of file names</param>
        </member>
        <member name="M:Ab3d.DirectX.FileShaderBytecodeProvider.GetShaderBytecode(System.String)">
            <summary>
            Gets bytes array of the compiled shader with resourceName or null if this class instance does not have this resource.
            </summary>
            <param name="resourceName">name of the resource</param>
            <returns>bytes array of the compiled shader or null if this instance does not have this resource</returns>
        </member>
        <member name="M:Ab3d.DirectX.FileShaderBytecodeProvider.GetAllResourceNames">
            <summary>
            Returns an array of strings that represents the resource names available in this ShaderBytecodeProvider.
            </summary>
            <returns>an array of strings that represents the resource names available in this ShaderBytecodeProvider</returns>
        </member>
        <member name="T:Ab3d.DirectX.DictionaryShaderBytecodeProvider">
            <summary>
            DictionaryShaderBytecodeProvider class provides access to shaders stored in a simple dictionary with shader name as key and its bytecode (byte array of compiled shader) as values.
            The class can be registered by <see cref="T:Ab3d.DirectX.EffectsManager"/> and can used to generate shaders added to this DictionaryShaderBytecodeProvider.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DictionaryShaderBytecodeProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DictionaryShaderBytecodeProvider.AddShaderBytecode(System.String,System.Byte[])">
            <summary>
            AddShaderBytecode add the shader name (specified as resourceName) with its bytecode to the shaders dictionary defined in this DictionaryShaderBytecodeProvider.
            If you add resourceName that was already added before, the old resourceName bytecode is overwritten by the new bytecode.
            This method is thread safe and can be called from any thread.
            </summary>
            <param name="resourceName">shader name</param>
            <param name="bytecode">byte array with compiled shader bytes</param>
        </member>
        <member name="M:Ab3d.DirectX.DictionaryShaderBytecodeProvider.GetShaderBytecode(System.String)">
            <summary>
            Gets bytes array of the compiled shader with resourceName or null if this class instance does not have this resource.
            </summary>
            <param name="resourceName">name of the resource</param>
            <returns>bytes array of the compiled shader or null if this instance does not have this resource</returns>
        </member>
        <member name="M:Ab3d.DirectX.DictionaryShaderBytecodeProvider.GetAllResourceNames">
            <summary>
            Returns an array of strings that represents the resource names available in this ShaderBytecodeProvider.
            </summary>
            <returns>an array of strings that represents the resource names available in this ShaderBytecodeProvider</returns>
        </member>
        <member name="T:Ab3d.DirectX.ShaderBytecodeProvider">
            <summary>
            ShaderBytecodeProvider is an abstract class that is a base class for all classes that represent the source of shader byte code.
            The <see cref="T:Ab3d.DirectX.EffectsManager"/> uses the <see cref="M:Ab3d.DirectX.ShaderBytecodeProvider.GetShaderBytecode(System.String)"/> to get the requested shader resource by its name.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ShaderBytecodeProvider.GetShaderBytecode(System.String)">
            <summary>
            Gets bytes array of the compiled shader with resourceName or null if this class instance does not have this resource.
            </summary>
            <param name="resourceName">name of the resource</param>
            <returns>bytes array of the compiled shader or null if this instance does not have this resource</returns>
        </member>
        <member name="M:Ab3d.DirectX.ShaderBytecodeProvider.GetAllResourceNames">
            <summary>
            Returns an array of strings that represents the resource names available in this ShaderBytecodeProvider.
            </summary>
            <returns>an array of strings that represents the resource names available in this ShaderBytecodeProvider</returns>
        </member>
        <member name="T:Ab3d.DirectX.SpriteBatch">
            <summary>
            SpriteBatch class defines a collection of sprites (textures) that can be very quickly rendered to the 3D scene defined by <see cref="T:Ab3d.DirectX.DXScene"/> object.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.SpriteBatch.SpritesCount">
            <summary>
            Gets the number of sprites (draw calls) defined in this SpriteBatch.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SpriteBatch.#ctor(Ab3d.DirectX.DXScene,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="parentDXScene">DXScene that will show this SpriteBatch</param>
            <param name="initialSpritesCapacity">initial capacity if the List used to store sprites (default value is 32)</param>
            <param name="name">name of the created SpriteBatch (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.SpriteBatch.Begin(SharpDX.Direct3D11.BlendState,SharpDX.Direct3D11.SamplerState,SharpDX.Direct3D11.DepthStencilState,SharpDX.Direct3D11.RasterizerState,Ab3d.DirectX.Effects.SpriteEffect)">
            <summary>
            Begin method must be called before any <see cref="M:Ab3d.DirectX.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.RectangleF,SharpDX.Color4)"/> call.
            The method sets common properties of all sprites that will be defined by Draw call.
            After all draw calls are done, the <see cref="M:Ab3d.DirectX.SpriteBatch.End"/> method must be called.
            </summary>
            <param name="blendState">BlendState</param>
            <param name="samplerState">SamplerState</param>
            <param name="depthStencilState">DepthStencilState</param>
            <param name="rasterizerState">RasterizerState</param>
            <param name="spriteEffect">SpriteEffect (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.SpriteBatch.Begin(SharpDX.Matrix@,SharpDX.Direct3D11.BlendState,SharpDX.Direct3D11.SamplerState,SharpDX.Direct3D11.DepthStencilState,SharpDX.Direct3D11.RasterizerState,Ab3d.DirectX.Effects.SpriteEffect)">
            <summary>
            Begin method must be called before any <see cref="M:Ab3d.DirectX.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.RectangleF,SharpDX.Color4)"/> call.
            The method sets common properties of all sprites that will be defined by Draw call.
            After all draw calls are done, the <see cref="M:Ab3d.DirectX.SpriteBatch.End"/> method must be called.
            </summary>
            <param name="transformMatrix">matrix transformation</param>
            <param name="blendState">BlendState</param>
            <param name="samplerState">SamplerState</param>
            <param name="depthStencilState">DepthStencilState</param>
            <param name="rasterizerState">RasterizerState</param>
            <param name="spriteEffect">SpriteEffect (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.SpriteBatch.End">
            <summary>
            End method ends adding sprites.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.SpriteBatch.Draw(SharpDX.Direct3D11.ShaderResourceView,SharpDX.RectangleF,SharpDX.Color4)">
            <summary>
            Draw method adds the specified texture to the destinationRectangle and with specified mask defined by the color parameter.
            Draw method must be called after Begin and End methods are called.
            </summary>
            <param name="texture">texture as ShaderResourceView</param>
            <param name="destinationRectangle">RectangleF that defined the destination rectangle</param>
            <param name="color">mask as Color4</param>
        </member>
        <member name="T:Ab3d.DirectX.CommonStates">
            <summary>
            CommonStates class defines that standard BlendStates, DepthStencilStates, RasterizerState and SamplerStates.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.CommonStates.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">DXDevice used to initialize resources</param>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.DefaultBlendState">
            <summary>
            Gets or sets the default BlendState - initially set to <see cref="P:Ab3d.DirectX.CommonStates.Opaque"/> BlendState.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.DefaultDepthStencilState">
            <summary>
            Gets or sets the default DepthStencilState - initially set to <see cref="P:Ab3d.DirectX.CommonStates.DepthReadWrite"/> DepthStencilState.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.DefaultRasterizerState">
            <summary>
            Gets or sets the default RasterizerState - initially set to <see cref="P:Ab3d.DirectX.CommonStates.CullClockwise"/> RasterizerState.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.TextureFiltering">
            <summary>
            Gets or sets an TextureFilteringTypes enum that specifies what sampler filter will be used to sample textures.
            Note that the TextureFiltering property cannot be changed after some sampler states have already been used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.Opaque">
            <summary>
            Opaque blend state - blending is disabled.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.PremultipliedAlphaBlend">
            <summary>
            Alpha blend used for pre-multiplied alpha (used for normal translucent objects, opaque sprites w/ alpha mask, etc.)
            D.rgb := aS.rgb * 1 + D.rgb * ( 1 - S.a )
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.PremultipliedAdditiveBlend">
            <summary>
            Additive blend for pre-multiplied alpha (used for light, fire, laser beam, lightning bolt, etc.)
            D.rgb := aS.rgb * 1 + D.rgb * 1
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.PremultipliedSubstractiveBlend">
            <summary>
            Substractive blend for pre-multiplied alpha (used for shadows, "negative lights", etc.)
            D.rgb := D.rgb * 1 - aS.rgb * 1
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.NonPremultipliedAlphaBlend">
            <summary>
            Alpha blend for non-pre-multiplied alpha (used for light, fire, laser beam, lightning bolt, etc.)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.DepthReadWrite">
            <summary>
            Gets a DepthStencilState with reading and writing to depth buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.DepthNone">
            <summary>
            Gets a DepthStencilState without reading and writing to depth buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.DepthRead">
            <summary>
            Gets a DepthStencilState with only reading and no writing to depth buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.DepthWrite">
            <summary>
            Gets a DepthStencilState with only writing and no reading to depth buffer
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.RenderOnlyHiddenObjects">
            <summary>
            Gets a DepthStencilState that will render only objects that are behind other objects (renders only "hidden" objects).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.CullNone">
            <summary>
            Gets a RasterizerState that does not cull any triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.CullClockwise">
            <summary>
            Gets a RasterizerState that culls clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.CullCounterClockwise">
            <summary>
            Gets a RasterizerState that culls counter-clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.WireframeCullClockwise">
            <summary>
            Gets a RasterizerState that renders the objects with wireframe and culls clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.WireframeCullCounterClockwise">
            <summary>
            Gets a RasterizerState that renders the objects with wireframe and culls counter-clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.WireframeCullNone">
            <summary>
            Gets a RasterizerState that renders the objects with wireframe and does not cull any triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.WireframeMultisampleCullNone">
            <summary>
            Gets a RasterizerState that renders the objects with wireframe with multisampling and does not cull any triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.WireframeMultisampleCullClockwise">
            <summary>
            Gets a RasterizerState that renders the objects with wireframe with multisampling and culls clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.WireframeMultisampleCullCounterClockwise">
            <summary>
            Gets a RasterizerState that renders the objects with wireframe with multisampling and culls counter-clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.CullNoneMultisample">
            <summary>
            Gets a RasterizerState that support multisampling and does not cull any triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.CullClockwiseMultisample">
            <summary>
            Gets a RasterizerState that support multisampling and culls clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.CullCounterClockwiseMultisample">
            <summary>
            Gets a RasterizerState that support multisampling and culls counter-clockwise oriented triangles
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.WrapSampler">
            <summary>
            Gets a SamplerState that uses <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Wrap"/>.
            Sampler filter and anisotropy count are set based on the <see cref="P:Ab3d.DirectX.CommonStates.TextureFiltering"/> value.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.ClampSampler">
            <summary>
            Gets a SamplerState that uses <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Clamp"/>.
            Sampler filter and anisotropy count are set based on the <see cref="P:Ab3d.DirectX.CommonStates.TextureFiltering"/> value.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.TransparentBorderColorSampler">
            <summary>
            Gets a SamplerState that uses <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Border"/> and sets the border color to transparent color (0, 0, 0, 0).
            Sampler filter and anisotropy count are set based on the <see cref="P:Ab3d.DirectX.CommonStates.TextureFiltering"/> value.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.MirrorSampler">
            <summary>
            Gets a SamplerState that uses <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Mirror"/>.
            Sampler filter and anisotropy count are set based on the <see cref="P:Ab3d.DirectX.CommonStates.TextureFiltering"/> value.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.MirrorXSampler">
            <summary>
            Gets a SamplerState that uses <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Mirror"/> for AddressU and <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Wrap"/> for AddressV and AddressW.
            Sampler filter and anisotropy count are set based on the <see cref="P:Ab3d.DirectX.CommonStates.TextureFiltering"/> value.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.CommonStates.MirrorYSampler">
            <summary>
            Gets a SamplerState that uses <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Mirror"/> for AddressV and <see cref="F:SharpDX.Direct3D11.TextureAddressMode.Wrap"/> for AddressU and AddressW.
            Sampler filter and anisotropy count are set based on the <see cref="P:Ab3d.DirectX.CommonStates.TextureFiltering"/> value.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.CommonStates.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.ContexStatesManager">
            <summary>
            ContexStatesManager is a helper class that is used to set the current BlendStates, DepthStencilStates, RasterizerState and SamplerStates.
            Before each state change it checks if the state already has the new state value and in this case prevents the actual DirectX state change call to improve performance.
            ContexStatesManager also collect state changes statistics.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.StateChangesCount">
            <summary>
            Gets number of state changes after last call to ResetChangesCount.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.ShaderChangesCount">
            <summary>
            Gets number of times shader is changes after last call to ResetChangesCount.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.VertexBuffersChangesCount">
            <summary>
            Gets number of times vertex buffer is changed after last call to ResetChangesCount.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.IndexBuffersChangesCount">
            <summary>
            Gets number of times index buffer is changed after last call to ResetChangesCount.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.ConstantBufferChangesCount">
            <summary>
            Gets number of times constant buffer is changed after last call to ResetChangesCount.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.IsBlendStateLocked">
            <summary>
            If set to true than the current BlendState cannot be changed until IsBlendStateLocked is set to false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.IsDepthStencilStateLocked">
            <summary>
            If set to true than the current DepthStencilState cannot be changed until IsDepthStencilStateLocked is set to false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.IsRasterizerStateLocked">
            <summary>
            If set to true than the current RasterizerState cannot be changed until IsRasterizerStateLocked is set to false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.IsSamplerStateLocked">
            <summary>
            If set to true than the current SamplerState cannot be changed until IsSamplerStateLocked is set to false.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.ContexStatesManager.ResetType">
            <summary>
            ResetType enum contain values that can be used to reset only some of the current values in ContexStatesManager.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.VertexShader">
            <summary>
            VertexShader
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.PixelShader">
            <summary>
            PixelShader
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.GeometryShader">
            <summary>
            GeometryShader
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.PrimitiveTopology">
            <summary>
            PrimitiveTopology
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.InputLayout">
            <summary>
            InputLayout
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.VertexBuffer">
            <summary>
            VertexBuffer
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.IndexBuffer">
            <summary>
            IndexBuffer
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.BlendState">
            <summary>
            BlendState
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.DepthStencilState">
            <summary>
            DepthStencilState
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.RasterizerState">
            <summary>
            RasterizerState
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.SamplerState">
            <summary>
            SamplerState
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.VertexShaderConstantBuffers">
            <summary>
            VertexShaderConstantBuffers
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.PixelShaderConstantBuffers">
            <summary>
            PixelShaderConstantBuffers
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.GeometryShaderConstantBuffers">
            <summary>
            GeometryShaderConstantBuffers
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.PixelShaderResources">
            <summary>
            PixelShaderResource
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.ContexStatesManager.ResetType.All">
            <summary>
            Reset all states
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.#ctor(Ab3d.DirectX.DXDevice,SharpDX.Direct3D11.DeviceContext)">
            <summary>
            Constructor
            </summary>
            <param name="parentDXDevice">parent DXDevice</param>
            <param name="deviceContext">DeviceContext</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.Reset">
            <summary>
            Resets the cached resource states.
            This is usually called at the beginning of rendering a frame because we do not know if any state changes were set after the last frame was rendered.
            NOTE: This does not change any state on the GPU!
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.Reset(Ab3d.DirectX.ContexStatesManager.ResetType)">
            <summary>
            Resets the specified cached resource states. 
            This can be called if some state were not set by ContexStatesManager but were directly set by the application so the current values stored in ContexStatesManager are not valid any more.
            NOTE: This does not change any state on the GPU!
            </summary>
            <param name="resetType">ResetType</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.ResetChangesCount">
            <summary>
            Resets the counter that counts how many state changes appeared in this ContexStatesManager
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.BlendState">
            <summary>
            Gets or sets the current BlendState
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.DepthStencilState">
            <summary>
            Gets or sets the current DepthStencilState
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.RasterizerState">
            <summary>
            Gets or sets the current RasterizerState
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.IsFrontCounterClockwise">
            <summary>
            Gets a boolean that is the same as the IsFrontCounterClockwise value in RasterizerState (this is an cached value and do not require a native GetDescription call on each getter call)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetRasterizerState(SharpDX.Direct3D11.RasterizerState,System.Nullable{System.Boolean})">
            <summary>
            It is possible to call this method to set rasterizer stat and also set the cached value of IsFrontCounterClockwise.
            This eliminates the need to call the native GetDescription call when IsFrontCounterClockwise check is needed.
            </summary>
            <param name="rasterizerState"></param>
            <param name="isFrontCounterClockwise">can be null</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.GetSamplerState(System.Int32)">
            <summary>
            Gets the SamplerState for the specified slot
            </summary>
            <param name="slot">slot number</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetSamplerState(SharpDX.Direct3D11.SamplerState,System.Int32)">
            <summary>
            Sets the SamplerState for the specified slot
            </summary>
            <param name="state">SamplerState</param>
            <param name="slot">slot number</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.GetPixelShaderResource(System.Int32)">
            <summary>
            Gets the ShaderResourceView for the specified slot in the pixel shader
            </summary>
            <param name="slot">slot number</param>
            <returns>ShaderResourceView</returns>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetPixelShaderResource(SharpDX.Direct3D11.ShaderResourceView,System.Int32)">
            <summary>
            Sets the ShaderResourceView for the specified slot in the pixel shader
            </summary>
            <param name="resourceView">ShaderResourceView</param>
            <param name="slot">slot number</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.GetVertexShaderConstantBuffer(System.Int32)">
            <summary>
            Gets the constant buffer as Buffer for the specified slot in the vertex shader
            </summary>
            <param name="slot">slot number</param>
            <returns>constant buffer as Buffer</returns>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetVertexShaderConstantBuffer(SharpDX.Direct3D11.Buffer,System.Int32,System.Boolean)">
            <summary>
            Sets the constant buffer for the specified slot in the vertex shader
            </summary>
            <param name="constantBuffer">constant buffer</param>
            <param name="slot">slot number</param>
            <param name="forceOverrideExistingBuffer">if true (by default) the constant buffer is set even if the reference for the existing constant buffer is the same - the values inside constant buffer are not checked for equality</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.GetPixelShaderConstantBuffer(System.Int32)">
            <summary>
            Gets the constant buffer as Buffer for the specified slot in the pixel shader
            </summary>
            <param name="slot">slot number</param>
            <returns>constant buffer as Buffer</returns>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetPixelShaderConstantBuffer(SharpDX.Direct3D11.Buffer,System.Int32,System.Boolean)">
            <summary>
            Sets the constant buffer for the specified slot in the pixel shader
            </summary>
            <param name="constantBuffer">constant buffer</param>
            <param name="slot">slot number</param>
            <param name="forceOverrideExistingBuffer">if true (by default) the constant buffer is set even if the reference for the existing constant buffer is the same - the values inside constant buffer are not checked for equality</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.GetGeometryShaderConstantBuffer(System.Int32)">
            <summary>
            Gets the constant buffer as Buffer for the specified slot in the geometry shader
            </summary>
            <param name="slot">slot number</param>
            <returns>constant buffer as Buffer</returns>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetGeometryShaderConstantBuffer(SharpDX.Direct3D11.Buffer,System.Int32,System.Boolean)">
            <summary>
            Sets the constant buffer for the specified slot in the geometry shader
            </summary>
            <param name="constantBuffer">constant buffer</param>
            <param name="slot">slot number</param>
            <param name="forceOverrideExistingBuffer">if true (by default) the constant buffer is set even if the reference for the existing constant buffer is the same - the values inside constant buffer are not checked for equality</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetVertexBuffer(System.Int32,SharpDX.Direct3D11.Buffer,System.Int32,System.Int32)">
            <summary>
            Sets vertex buffer. Note that only slot 0 and 1 are cached (changed only when different vertex buffer is set), other slots are changed on every call to this method.
            </summary>
            <param name="slot">vertex buffer slot</param>
            <param name="vertexBuffer">vertexBuffer</param>
            <param name="vertexStride">vertexStride</param>
            <param name="vertexOffset">vertexOffset in bytes</param>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetIndexBuffer(SharpDX.Direct3D11.Buffer,SharpDX.DXGI.Format,System.Int32)">
            <summary>
            SetIndexBuffer sets the index buffer to the new index buffer if it is changed.
            </summary>
            <param name="indexBuffer">indexBuffer</param>
            <param name="format">index buffer format</param>
            <param name="indexOffset">index buffer offset</param>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.VertexShader">
            <summary>
            Gets or sets the current VertexShader
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetVertexShader(SharpDX.Direct3D11.VertexShader)">
            <summary>
            Sets the vertex shader if it is different as previously set vertex shader.
            The same as setter for VertexShader property but this method returns true if vertex shader was changed.
            </summary>
            <param name="newVertexShader">new VertexShader</param>
            <returns>true if vertex shader was changed</returns>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.PixelShader">
            <summary>
            Gets or sets the current PixelShader
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetPixelShader(SharpDX.Direct3D11.PixelShader)">
            <summary>
            Sets the pixel shader if it is different as previously set pixel shader.
            The same as setter for PixelShader property but this method returns true if pixel shader was changed.
            </summary>
            <param name="newPixelShader">new PixelShader</param>
            <returns>true if PixelShader was changed</returns>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.GeometryShader">
            <summary>
            Gets or sets the current GeometryShader
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.SetGeometryShader(SharpDX.Direct3D11.GeometryShader)">
            <summary>
            Sets the geometry shader if it is different as previously set geometry shader.
            The same as setter for GeometryShader property but this method returns true if geometry shader was changed.
            </summary>
            <param name="newGeometryShader">new GeometryShader</param>
            <returns>true if GeometryShader was changed</returns>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.PrimitiveTopology">
            <summary>
            Gets or sets the current PrimitiveTopology
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.ContexStatesManager.InputLayout">
            <summary>
            Gets or sets the current InputLayout
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.ContexStatesManager.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Transformation">
            <summary>
            Transformation defines the Matrix that is used to transform the SceneNode.
            Transformation is optimized for cases where the Matrix is identity (no transformation).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Transformation.IsIdentity">
            <summary>
            Gets a Boolean that specifies if the Matrix is identity (there is no transformation).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Transformation.Value">
            <summary>
            Gets or sets a Matrix of this transformation
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.#ctor">
            <summary>
            Constructor that sets the Matrix to identity and IsIdentity to true.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.#ctor(SharpDX.Matrix)">
            <summary>
            Constructor
            </summary>
            <param name="matrix">matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.#ctor(SharpDX.Matrix@)">
            <summary>
            Constructor
            </summary>
            <param name="matrix">matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.Transform(SharpDX.Vector3@,SharpDX.Vector4@)">
            <summary>
            Transforms the source Vector3 with the current matrix and creates the destination as Vector4
            </summary>
            <param name="source">source as Vector3</param>
            <param name="destination">out destination as Vector4</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.Transform(SharpDX.Vector3@,SharpDX.Vector3@)">
            <summary>
            Transforms the source Vector3 with the current matrix and creates the destination as Vector3
            </summary>
            <param name="source">source as Vector3</param>
            <param name="destination">out destination as Vector3</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.SetIdentity">
            <summary>
            Sets this transformation as identity (no transformation).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.SetMatrix(SharpDX.Matrix)">
            <summary>
            Sets the matrix and sets IsIdentity to false (matrix is not checked for identity)
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.SetMatrix(SharpDX.Matrix@)">
            <summary>
            Sets the matrix and sets IsIdentity to false (matrix is not checked for identity)
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.SetMatrixAndCheckForIdentity(SharpDX.Matrix)">
            <summary>
            Checks the matrix if it is identity and sets the matrix
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.SetMatrixAndCheckForIdentity(SharpDX.Matrix@)">
            <summary>
            Checks the matrix if it is identity and sets the matrix
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.SetMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the matrix and sets IsIdentity to false (matrix is not checked for identity)
            </summary>
            <param name="M11">M11</param>
            <param name="M12">M12</param>
            <param name="M13">M12</param>
            <param name="M14">M14</param>
            <param name="M21">M21</param>
            <param name="M22">M22</param>
            <param name="M23">M23</param>
            <param name="M24">M24</param>
            <param name="M31">M31</param>
            <param name="M32">M32</param>
            <param name="M33">M33</param>
            <param name="M34">M34</param>
            <param name="M41">M41</param>
            <param name="M42">M42</param>
            <param name="M43">M43</param>
            <param name="M44">M44</param>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.LeftMultiply(Ab3d.DirectX.Transformation)">
            <summary>
            Returns a Matrix that is created by multiplying this matrix with rightTransform: result = this.Matrix * rightTransform
            </summary>
            <param name="rightTransform">Transformation</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.RightMultiply(Ab3d.DirectX.Transformation)">
            <summary>
            Returns a Matrix that is created by multiplying leftTransform with this matrix: result = leftTransform * this.Matrix
            </summary>
            <param name="leftTransform">Transformation</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.LeftMultiply(SharpDX.Matrix@)">
            <summary>
            Returns a Matrix that is created by multiplying this matrix with rightMatrix: result = this.Matrix * rightMatrix
            </summary>
            <param name="rightMatrix">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.Transformation.RightMultiply(SharpDX.Matrix@)">
            <summary>
            Returns a Matrix that is created by multiplying leftMatrix with this matrix: result = leftMatrix * this.Matrix
            </summary>
            <param name="leftMatrix">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:Ab3d.Common.DXEngine.LicenseInstaller">
            <summary>
            LicenseInstaller class is used by .Net compiler to embed the installed license key into the application.
            </summary>
        </member>
        <member name="M:Ab3d.Common.DXEngine.LicenseInstaller.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
    </members>
</doc>
