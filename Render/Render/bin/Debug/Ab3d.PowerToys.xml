<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ab3d.PowerToys</name>
    </assembly>
    <members>
        <member name="T:Ab3d.Cameras.BaseCamera">
            <summary>
            BaseCamera class is the base class for all Ab3d.Cameras. It defines common properties and methods.
            </summary>
        </member>
        <member name="T:Ab3d.Cameras.BaseCamera.EasingFunctionDelegate">
            <summary>
            EasingFunctionDelegate is used to define the easing function that can be used to with StartRotation and EndRotation methods.
            </summary>
            <param name="x">input value</param>
            <remarks>
            <para>
            <b>EasingFunctionDelegate</b> is used to define the easing function that can be used to with StartRotation and EndRotation methods.
            </para>
            <para>
            <see cref="T:Ab3d.Controls.MouseCameraController"/> is using the following cubic function to ease the camera rotation inertia:
            </para>
            <code>
            public static double CubicEaseOut(double x)
            {
                return (x - 1) * (x - 1) * (x - 1) + 1;
            }
            </code>        
            </remarks>
            <returns>eased value</returns>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.IsDesignTime">
            <summary>
            Gets a Boolean that specifies if design time is used.
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.IsRotating">
            <summary>
            Gets or sets a boolean that specifies if the camera is currently being animated.
            </summary>
            <remarks>
            <para>
            <b>IsRotating</b> property specifies if the camera is currently being animated.
            </para>
            <para>
            The animation can be started with <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double)"/> method.
            </para>
            <para>
            The animation can be stopped with <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation"/> method.
            </para>
            </remarks>
        </member>
        <member name="E:Ab3d.Cameras.BaseCamera.IsRotatingChanged">
            <summary>
            IsRotatingChanged event is fired when the IsRotating is changed.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.isDirty">
            <summary>
            if true the camera needs to be recalculated
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.isInitializing">
            <summary>
            if true the camera is being initialized
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.isWorldToViewportMatrixDirty">
            <summary>
            if true the worldToViewportMatrix needs to be recalculated. Used for Point3DTo2D and Rect3DTo2D.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.isworldToViewportMatrixValid">
            <summary>
            if false the WorldToViewportMatrix cannot be calculated (is not invertible, etc.) Used for Point3DTo2D and Rect3DTo2D.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.worldToViewportMatrix">
            <summary>
            WordlsToViewport matrix.  Used for Point3DTo2D and Rect3DTo2D.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.infoElement">
            <summary>
            info element that is displayed in design time
            </summary>
        </member>
        <member name="T:Ab3d.Cameras.BaseCamera.CameraTypes">
            <summary>
            CameraTypes contains possible camera types.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.CameraTypes.PerspectiveCamera">
            <summary>
            PerspectiveCamera
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.CameraTypes.OrthographicCamera">
            <summary>
            OrthographicCamera
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.CameraTypeProperty">
            <summary>
            CameraTypeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.CameraType">
            <summary>
            Gets or sets a type of camera. The default camera type value is PerspectiveCamera. The camera type can be also OrthographicCamera.
            </summary>
            <remarks>
            <para>
            The most used camera types in WPF are <b>PerspectiveCamera</b> and <b>OrthographicCamera</b>. 
            The PerspectiveCamera creates a camera that is similar to the real world where the objects that are farther way from the camera appear smaller.
            The OrthographicCamera is different because with that camera the distance does not change the objects size. 
            The rendered objects do not appear so real as with PerspectiveCamera.
            That advantage of OrthographicCamera is that the objects sizes are preserved and the lines that are parallel in 3D stay parallel in 2D.
            </para>
            <para>
            Because of those differences, some of the properties to control the camera are different for each camera type.
            The PerspectiveCamera uses <see cref="P:Ab3d.Cameras.BaseCamera.FieldOfView"/> and <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> properties.
            The OrthographicCamera uses <see cref="P:Ab3d.Cameras.BaseCamera.CameraWidth"/> property (Note that original WPF's OrthographicCamera uses Width property. But because Ab3d.Cameras are derived from FrameworkElement and therefore already contain Width property, the CameraWidth name is used for that.)
            </para>
            <para>
            Because changing <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> does not affect the objects shown with OrthographicCamera, the <see cref="P:Ab3d.Cameras.BaseCamera.CameraWidth"/> property is changed instead of <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> when the camera is controller by the <see cref="T:Ab3d.Controls.MouseCameraController"/> or <see cref="T:Ab3d.Controls.CameraControlPanel"/>
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CameraTypePropertyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when CameraType is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.FieldOfViewProperty">
            <summary>
            FieldOfViewProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.FieldOfView">
            <summary>
            Gets or sets a value that represents the camera's horizontal field of view. The property is used when the camera type is set to PerspectiveCamera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.FieldOfViewPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when FieldOfView is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.CameraWidthProperty">
            <summary>
            FieldOfViewProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.CameraWidth">
            <summary>
            Gets or sets the width of the camera's viewing box. The property is used when the camera type is set to OrthographicCamera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CameraWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when CameraWidth is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.FarPlaneDistanceProperty">
            <summary>
            FarPlaneDistanceProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.FarPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's far clip plane. This is a dependency property.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.FarPlaneDistancePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when FarPlaneDistance is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.NearPlaneDistanceProperty">
            <summary>
            NearPlaneDistanceProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.NearPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's near clip plane. This is a dependency property.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.NearPlaneDistancePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when NearPlaneDistance is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabledProperty">
            <summary>
            IsAutoViewport3DFindingEnabledProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled">
            <summary>
            Gets or sets a Boolean which specifies that if the <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> property is not manually set the first Viewport3D is automatically find from the current UserControl, Page or Window. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.TargetViewport3DProperty">
            <summary>
            TargetViewport3DProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.TargetViewport3D">
            <summary>
            Gets or sets a Viewport3D whose Camera is controlled by this Ab3d.Camera.
            </summary>
            <remarks>
            <para>
            TargetViewport3D can be also set by setting <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> property.
            </para>
            <para>
            If TargetViewport3D or <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> is not set and <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/> is set to true (by default) the TargetViewport3D is automatically find from the current UserControl, Page or Window.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.TargetViewport3DPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property that updates the camera is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.TargetViewport3DNameProperty">
            <summary>
            TargetViewport3DNameProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName">
            <summary>
            Gets or sets a name of the Viewport3D whose Camera is controlled by this Ab3d.Camera.
            </summary>
            <remarks>
            <para>
            Setting TargetViewport3DName also sets the <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> property.
            </para>
            <para>
            If <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> or TargetViewport3DName is not set and <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/> is set to true (by default) the TargetViewport3D is automatically find from the current UserControl, Page or Window.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.OffsetProperty">
            <summary>
            OffsetProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.Offset">
            <summary>
            Gets or sets a Vector3D that specifies an offset of the camera's position.
            </summary>
            <remarks>
            <para>
            <b>Offset</b> property is used to change the position of the camera. This is useful for moving the camera.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.CameraChangedEvent">
            <summary>
            CameraChangedChangedEvent
            </summary>
        </member>
        <member name="T:Ab3d.Cameras.BaseCamera.CameraChangedRoutedEventHandler">
            <summary>
            CameraChangedRoutedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">CameraChangedRoutedEventArgs</param>
        </member>
        <member name="E:Ab3d.Cameras.BaseCamera.CameraChanged">
            <summary>
            Notify that the current camera has changed
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.PeviewCameraChangedEvent">
            <summary>
            PeviewCameraChangedEvent
            </summary>
        </member>
        <member name="T:Ab3d.Cameras.BaseCamera.PreviewCameraChangedRoutedEventHandler">
            <summary>
            PreviewCameraChangedRoutedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">PreviewCameraChangedRoutedEventArgs</param>
        </member>
        <member name="E:Ab3d.Cameras.BaseCamera.PreviewCameraChanged">
            <summary>
            Notify that the current camera is about to change - user can set Handled property to true to prevent the change.
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.CurrentCamera">
            <summary>
            Gets the WPF's ProjectionCamera that is controlled by this Camera.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.IsDesignTimeInfoIconShownProperty">
            <summary>
            IsDesignTimeInfoIconShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.IsDesignTimeInfoIconShown">
            <summary>
            Gets or sets a Boolean that specifies if Camera info icon is visible in design time. Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsDesignTimeInfoIconShown</b> specifies if Camera info icon is visible in design time. 
            The info icon shows which type of camera is used.
            With the icon user can click on the icon in designer to select the camera in XAML.
            </para>
            <para>
            The icon is never visible in run-time.
            </para>
            <para>
            Setting <b>IsDesignTimeInfoIconShown</b> to false can be useful for custom controls that internally use Ab3d.Camera and where the camera icon would mess the design time rendering of the control.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.IsDesignTimeInfoIconShownPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsDesignTimeInfoIconShown is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.ShowCameraLight">
            <summary>
            Gets or sets a <see cref="T:Ab3d.Common.Cameras.ShowCameraLightType"/> that specifies when the Cameras light is shown. The default value is ShowCameraLightType.Auto.
            </summary>
            <remarks>
            <para>
            Camera light is a Light that is added to the Viewport3D and is positioned at the same position as the camera and is looking at the cameras direction. In the real world this would be a light that is mounted to the camera. This way the 3D objects that are viewed with the camera are always illuminated regardless of the cameras position.
            </para>
            <para>
            The ShowCameraLight defines when the camera light is shown. The possible values are:
            </para>
            <list type="bullet">
            <item><term>Never</term><description>Never add additional camera light</description></item>
            <item><term>Auto</term><description>(Default value) Show camera light only if there is no other light defined in the Viewport3D controlled by the camera.</description></item>
            <item><term>Always</term><description>Always add a camera light</description></item>
            </list>          
            <para>
            The default value ShowCameraLightType.Auto. It means that if the TargetViewport3D does not define any light, a Camera light will be added.
            </para>
            <para>
            To change the color of the light set the <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> property to some other DirectionalLight.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.ShowCameraLightProperty">
            <summary>
            ShowCameraLightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.CameraLight">
            <summary>
            Gets or sets a Light that is used as a Camera Light. The default value is White DirectionalLight.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> property is by default a DirectionalLight with White color. The value can be set to a new DirectionalLight with some other color. Other types of Lights are not supported - will not change according to the camera's changed.
            </para>
            <para>
            To set when the Camera light is used set the <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Cameras.BaseCamera.CameraLightProperty">
            <summary>
            CameraLightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.LookDirection">
            <summary>
            Gets or sets a Vector3D which defines the upward direction of the camera.
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.BaseCamera.UpDirection">
            <summary>
            Gets a Vector3D that represents the upward direction in the scene projection.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.OnCameraLoaded">
            <summary>
            OnCameraLoaded methods ensures that the CurrentCamera is set
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.RefreshCurrentCamera">
            <summary>
            Refreshes the CurrentCamera - check if TargetViewport3D is null and tries to find it, also creates a new camera is necessary
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.Refresh">
            <summary>
            Refresh method refreshes the camera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CreateFrom(System.Windows.Media.Media3D.Camera)">
            <summary>
            Creates an Ab3d.Camera from a WPF's Camera.
            </summary>
            <param name="originalCamera">originalCamera as WPF's Camera</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetCameraPosition">
            <summary>
            Gets the position of the camera.
            </summary>
            <returns>position of the camera</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.RotateCamera(System.Double,System.Double)">
            <summary>
            Rotates the camera for the specified heading and attitude
            </summary>
            <param name="headingChange">heading change in degrees</param>
            <param name="attitudeChange">attitude change in degrees</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double)">
            <summary>
            StartRotation method immediately starts Heading and Attitude animation for this camera.
            To slowly start the camera rotation and than accelerating the rotation, use the <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double,System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method.
            </summary>
            <param name="headingChangeInSecond">How many degrees the heading will be changed in one second</param>
            <param name="attitudeChangeInSecond">How many degrees the attitude will be changed in one second</param>
            <remarks>
            <para>
            <b>StartRotation</b> method immediately starts Heading and Attitude animation for this camera.
            </para>
            <para>
            To slowly start the camera rotation and than accelerating the rotation, use the <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double,System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method.
            </para>
            <para>
            The method can be used to simply rotate the camera around.
            </para>
            <para>
            In contrast to the WPF animation, the Heading and Attitude values are not locked during animation.
            This way the camera can be still freely controlled by user with <see cref="T:Ab3d.Controls.MouseCameraController"/> or <see cref="T:Ab3d.Controls.CameraControlPanel"/>.
            </para>
            <para>
            To check if the camera is currently being rotated, see the value of the <see cref="P:Ab3d.Cameras.BaseCamera.IsRotating"/> property.
            Note that after calling <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method and specifying the decelerationSpeed, the IsRotating is still true until the camera rotation is stopped.
            </para>
            <para>
            The animation can be stopped with <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation"/> or <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> methods.
            It is also automatically stopped when the camera is Unloaded (when the Unload even occurs).        
            </para>
            <para>
            When StartRotation is called when the rotation is already animated, <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation"/> will be called and than the animation will start again.
            </para>        
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double,System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)">
            <summary>
            StartRotation method immediately starts Heading and Attitude animation for this camera.
            To slowly start the camera rotation and than accelerating the rotation, use the <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double,System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method.
            </summary>
            <param name="headingChangeInSecond">How many degrees the heading will be changed in one second</param>
            <param name="attitudeChangeInSecond">How many degrees the attitude will be changed in one second</param>
            <param name="accelerationSpeed">number of degrees the velocity will change per one second (if no easing function would be used)</param>
            <param name="easingFunction">if not null the delegate will be used to ease the acceleration value</param>     
            <remarks>
            <para>
            <b>StartRotation</b> method immediately starts Heading and Attitude animation for this camera.
            </para>
            <para>
            To slowly start the camera rotation and than accelerating the rotation, use the <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double,System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method.
            </para>        
            <para>
            The method can be used to simply rotate the camera around.
            </para>
            <para>
            In contrast to the WPF animation, the Heading and Attitude values are not locked during animation.
            This way the camera can be still freely controlled by user with <see cref="T:Ab3d.Controls.MouseCameraController"/> or <see cref="T:Ab3d.Controls.CameraControlPanel"/>.
            </para>
            <para>
            To check if the camera is currently being rotated, see the value of the <see cref="P:Ab3d.Cameras.BaseCamera.IsRotating"/> property.
            Note that after calling <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method and specifying the decelerationSpeed, the IsRotating is still true until the camera rotation is stopped.
            </para>
            <para>
            The animation can be stopped with <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation"/> or <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> methods.
            It is also automatically stopped when the camera is Unloaded (when the Unload even occurs).
            </para>
            <para>
            When StartRotation is called when the rotation is already animated, <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation"/> will be called and than the animation will start again.
            </para>
            <para></para>
            <para>
            <b>Controlling the acceleration speed</b>
            </para>
            <para>
            The acceleration speed is configured by accelerationSpeed and easingFunction parameters.
            </para>
            <para>
            <b>accelerationSpeed</b> specifies the number of degrees the velocity will change per one second (if no easing function would be used).
            </para>
            <para>
            <b>easingFunction</b> can be set to null to disable easing or set to a delegate of type <see cref="T:Ab3d.Cameras.BaseCamera.EasingFunctionDelegate"/> to specify the easing function.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.StopRotation">
            <summary>
            StopRotation immediately stops the animation of the camera.
            To slowly stop the camera rotation with preserving the camera's inertia, use the <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method.
            </summary>
            <remarks>
            <para>
            <b>StopRotation</b> immediately stops the animation of the camera.
            </para>
            <para>
            To slowly stop the camera rotation with preserving the camera's inertia, use the <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method.
            </para>
            <para>
            The animation can be started with <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double)"/> or <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double,System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> methods.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)">
            <summary>
            StopRotation slowly stops the animation of the camera with preserving the rotation inertia.
            </summary>
            <param name="decelerationSpeed">number of degrees the velocity will change per one second (if no easing function would be used)</param>
            <param name="easingFunction">if not null the delegate will be used to ease the deceleration value</param>        
            <remarks>
            <para>
            <b>StopRotation</b> slowly stops the animation of the camera with preserving the rotation inertia.
            </para>
            <para>
            The inertia is configured by decelerationSpeed and easingFunction parameters.
            </para>
            <para>
            <b>decelerationSpeed</b> specifies the number of degrees the velocity will change per one second (if no easing function would be used).
            For example the default value used by <see cref="T:Ab3d.Controls.MouseCameraController"/> is 1000.
            </para>
            <para>
            <b>easingFunction</b> can be set to null to disable easing or set to a delegate of type <see cref="T:Ab3d.Cameras.BaseCamera.EasingFunctionDelegate"/> to specify the easing function.
            </para>
            <para>
            For example the <see cref="T:Ab3d.Controls.MouseCameraController"/> is using the following cubic function to ease the camera rotation inertia:
            </para>
            <code>
            public static double CubicEaseOut(double x)
            {
                return (x - 1) * (x - 1) * (x - 1) + 1;
            }
            </code>  
            <para>
            To check if the camera is currently being rotated, see the value of the <see cref="P:Ab3d.Cameras.BaseCamera.IsRotating"/> property.
            Note that after calling <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method and specifying the decelerationSpeed, the IsRotating is still true until the camera rotation is stopped.
            </para>       
            <para>
            The animation can be started with <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double)"/> or <see cref="M:Ab3d.Cameras.BaseCamera.StartRotation(System.Double,System.Double,System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> methods.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.SubscribeRenderingEvent">
            <summary>
            Subscribe to Rendering event
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.UnsubscribeRenderingEvent">
            <summary>
            Unsubscribe to Rendering event
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.OnRendering">
            <summary>
            Called when Rendering event is subscribed
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.OnIsRotatingChanged">
            <summary>
            OnIsRotatingChanged is caled to fire IsRotatingChanged event.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.UpdateCameraLight">
            <summary>
            Updates the camera light if needed
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.UpdateCameraLightData">
            <summary>
            Updates the CameraLight based on the current camera position
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.OnTargetViewport3DChanged(System.Windows.Controls.Viewport3D,System.Windows.Controls.Viewport3D)">
            <summary>
            OnTargetViewport3DChanged is called when the TargetViewport3D is changed
            </summary>
            <param name="oldViewport3D">old Viewport3D value</param>
            <param name="newViewport3D">new Viewport3D value</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.BaseCreateFrom(System.Windows.Media.Media3D.Camera)">
            <summary>
            This method is called from CreateFrom method and actually sets the properties on this camera.
            </summary>
            <remarks>
            <para>
            The CreateFrom method first call BeginInit, than the BaseCreateFrom method and than EndInit. This way all the creating process updates the camera only once (in the EndInit call).
            </para>
            <para>
            All overridden BaseCreateFrom methods should call base.BaseCreateFrom method.
            </para>
            </remarks>
            <param name="originalCamera">originalCamera as WPF's Camera</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetWPFCameraDirections(System.Windows.Media.Media3D.Camera,System.Windows.Media.Media3D.Vector3D@,System.Windows.Media.Media3D.Vector3D@)">
            <summary>
            The method gets lookDirection and upDirection from WPF's camera
            </summary>
            <param name="camera">WPF camera</param>
            <param name="lookDirection">lookDirection</param>
            <param name="upDirection">upDirection</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetWPFCameraPosition(System.Windows.Media.Media3D.Camera)">
            <summary>
            Returns a Position of the WPF camera.
            </summary>
            <param name="camera">WPF camera</param>
            <returns>Position of the camera</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.ForceRefresh">
            <summary>
            Forces a refresh of the camera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the CurrentCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.BeginCameraUpdate">
            <summary>
            BeginCameraUpdate method must be called in each UpdateCamera method, to ensure that the CameraChanged event is fired after all the UpdateCamera methods in all child cameras are called.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.EndCameraUpdate">
            <summary>
            EndCameraUpdate method must be called in each UpdateCamera method, to ensure that the CameraChanged event is fired after all the UpdateCamera methods in all child cameras are called.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CreateNewCamera(System.Windows.Controls.Viewport3D)">
            <summary>
            Creates a new Camera for the viewport3D
            </summary>
            <param name="viewport3D">viewport3D</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CreateNewCamera(System.Windows.Controls.Viewport3D,Ab3d.Cameras.BaseCamera.CameraTypes)">
            <summary>
            Creates a new Camera for the viewport3D and cameraType.
            </summary>
            <param name="viewport3D">viewport3D</param>
            <param name="cameraType">type of camera to create</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CreateNewCamera(Ab3d.Cameras.BaseCamera.CameraTypes)">
            <summary>
            Creates a new Camera for the cameraType.
            </summary>
            <param name="cameraType">type of camera to create</param>
            <returns>new ProjectionCamera</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.BeginInit">
            <summary>
            BeginInit
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.EndInit">
            <summary>
            EndInit
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.TryToUpdate">
            <summary>
            Update the Camera if it is already initialized and is not in a batch updated (using BeginInit)
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CameraPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property that updates the camera is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.OnPreviewCameraChanged(Ab3d.Cameras.BaseCamera,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnPreviewCameraChanged calls the PreviewCameraChangedEvent routed event.
            </summary>
            <param name="camera">BaseCamera</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
            <returns>true if Handled is true - the camera change is canceled</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.OnCameraChanged">
            <summary>
            Called to raise CameraChangedRoutedEvent
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.MeasureOverride(System.Windows.Size)">
            <summary>
            override MeasureOverride - used to display design time info
            </summary>
            <param name="availableSize">availableSize</param>
            <returns>Desired size</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.ArrangeOverride(System.Windows.Size)">
            <summary>
            override ArrangeOverride - used to display design time info
            </summary>
            <param name="finalSize">finalSize</param>
            <returns>final size</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            OnRender
            </summary>
            <param name="drawingContext">DrawingContext</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.InitInfoElement">
            <summary>
            Initializes the info element that is used for design time support
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.Point3DTo2D(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Converts a Point3D to the Point 2D on the screen.
            </summary>
            <remarks>
            <para>
            The matrix to convert 3D point to 2D point is calculated from the used Ab3d.Camera. The matrix value is cached and is only recalculated when the camera is changed.
            </para>
            <para>
            If the matrix to convert 3D point to 2D point cannot be calculated (for example if TargetViewport3D is not set), the returned point will be Point(double.NaN, double.NaN).
            </para>
            <para>
            To use Point3DTo2D method without attaching the camera to real Viewport3D you can use <see cref="M:Ab3d.Cameras.BaseCamera.Point3DTo2D(System.Windows.Media.Media3D.Point3D,System.Windows.Size)"/>.
            </para>
            </remarks>
            <param name="point3D">Original Point3D</param>
            <returns>Point2D in the screen coordinates</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.Point3DTo2D(System.Windows.Media.Media3D.Point3D,System.Windows.Size)">
            <summary>
            Converts a Point3D to the Point 2D on the screen with custom Viewport3D size (no need that this Camera class is connected to real Viewport3D)
            </summary>
            <remarks>
            <para>
            The matrix to convert 3D point to 2D point is calculated from the used Ab3d.Camera. The matrix value is cached and is only recalculated when the camera is changed.
            </para>
            <para>
            If the matrix to convert 3D point to 2D point cannot be calculated (for example if TargetViewport3D is not set), the returned point will be Point(double.NaN, double.NaN).
            </para>
            With this method you can convert 3D coordinates to 2D space without creating read Viewport3D and attaching the camera to it. The following example shows how to do that:
            <example>
            <code>
            var targetPositionCamera = new Ab3d.Cameras.TargetPositionCamera()
            {
                Heading = 30,
                Attitude = -20,
                Distance = 200
            };
            
            var point2D = targetPositionCamera.Point3DTo2D(new Point3D(100, 100, 100), new Size(200, 100));
            </code>
            </example>
            </remarks>
            <param name="point3D">Original Point3D</param>
            <param name="viewportSize">Size of the Viewport3D</param>
            <returns>Point2D in the screen coordinates</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.Rect3DTo2D(System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Converts a Rect3D to the Rect 2D on the screen.
            </summary>
            <remarks>
            <para>
            The matrix to convert 3D points to 2D points is calculated from the used Ab3d.Camera. The matrix value is cached and is only recalculated when the camera is changed.
            </para>
            <para>
            If the matrix to convert 3D points to 2D points cannot be calculated (for example if TargetViewport3D is not set), the returned Rect will be Empty (Rect.Empty).
            </para>
            </remarks>        
            <param name="rect3D">Original Rect3D</param>
            <returns>Rect in the screen coordinates</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.ConvertToWpfCamera">
            <summary>
            ConvertToWpfCamera method converts Ab3d.PowerToys camera to a standard WPF camera.
            </summary>
            <returns>standard WPF camera</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetTargetViewport3DSceneBounds">
            <summary>
            Returns a Rect3D that represents the bounding box of the 3D scene defined in the TargetViewport3D.
            </summary>
            <returns>Rect3D that represents the bounding box of the 3D scene defined in the TargetViewport3D</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetWorldToViewportMatrix(System.Windows.Media.Media3D.Matrix3D@,System.Boolean)">
            <summary>
            Gets Matrix3D that can be used to convert 3D coordinates to 2D viewport (screen) coordinates. If the method returns true, than the worldToViewportMatrix was set; if false is returned than the matrix cannot be calculated.
            </summary>
            <remarks>
            <para>
            <b>GetWorldToViewportMatrix</b> gets Matrix3D that can be used to convert 3D coordinates to 2D viewport coordinates.
            </para>
            <para>
            If the method returns true, than the worldToViewportMatrix was set; if false is returned than the matrix cannot be calculated (for example when MatrixCamera is used and the matrix cannot be inverted).
            </para>
            <para>The cameras in Ab3d.PowerToys use protected field <see cref="F:Ab3d.Cameras.BaseCamera.isWorldToViewportMatrixDirty"/> that is used to determine if the cached <see cref="F:Ab3d.Cameras.BaseCamera.worldToViewportMatrix"/> must be recalculated when its value is required.
            The isWorldToViewportMatrixDirty is set to true when main camera properties are changed.
            But if some other property is changed (for example FarPlaneDistance), than forceMatrixRefresh parameter in this method need to be set to true to force recalculation of worldToViewportMatrix.
            </para>
            <para>
            <b>Important:</b><br/>
            To calculate the screen coordinates of a 3D point you need to convert the Point3D to Point4D, multiply it with worldToViewportMatrix and than divide the X and Y coordinate with W value from Point4D struct.
            The following code shows that:
            </para>
            <code>
            Point3D inputPoint3D;
            Point screenPoint;
            Matrix3D worldToViewportMatrix;
            bool isworldToViewportMatrixValid = myCamera.GetWorldToViewportMatrix(ref worldToViewportMatrix, false);
            
            if (isworldToViewportMatrixValid)
            {
                Point4D point4d = ((Point4D)inputPoint3D) * worldToViewportMatrix;
            
                if (point4d.W != 0)
                    screenPoint = new Point(point4d.X / point4d.W, point4d.Y / point4d.W);
                else
                    screenPoint = new Point(double.NaN, double.NaN);
            }
            else
            {
                screenPoint = new Point(double.NaN, double.NaN);
            }
            </code>
            </remarks>
            <param name="worldToViewportMatrix">reference to Matrix3D</param>
            <param name="forceMatrixRefresh">if true than the worldToViewportMatrix is always recalculated; if false the recalculation is done only when the main camera properties were changed</param>
            <returns>true if worldToViewportMatrix was set; false if the matrix cannot be calculated</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetCameraMatrixes(System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Media3D.Matrix3D@)">
            <summary>
            GetCameraMatrixes gets view and projection matrix of the current camera.
            </summary>
            <param name="viewMatrix">view Matrix</param>
            <param name="projectionMatrix">projection Matrix</param>
            <returns>false when the camera matrixes cannot be calculated</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetCameraMatrixes(System.Windows.Controls.Viewport3D,System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Media3D.Matrix3D@)">
            <summary>
            GetCameraMatrixes gets view and projection matrix of the camera used by the specified viewport3D.
            </summary>
            <param name="viewport3D">viewport3D</param>
            <param name="viewMatrix">view Matrix</param>
            <param name="projectionMatrix">projection Matrix</param>
            <returns>false when the camera matrixes cannot be calculated</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetCameraMatrixes(System.Windows.Media.Media3D.Camera,System.Double,System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Media3D.Matrix3D@)">
            <summary>
            GetCameraMatrixes gets view and projection matrix of specified camera and specified viewport's aspect ratio.
            </summary>
            <param name="camera">camera</param>
            <param name="viewportAspectRatio">aspect ratio of viewport: width / height</param>
            <param name="viewMatrix">view Matrix</param>
            <param name="projectionMatrix">projection Matrix</param>
            <returns>false when the camera matrixes cannot be calculated</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetCameraMatrixes(Ab3d.Cameras.BaseCamera,System.Double,System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Media3D.Matrix3D@)">
            <summary>
            GetCameraMatrixes gets view and projection matrix of specified Ab3d.PowerToys camera and specified viewport's aspect ratio.
            The method sets matrixes even if TargetViewport3D is not assigned to the camera.
            </summary>
            <param name="camera">camera</param>
            <param name="viewportAspectRatio">aspect ratio of viewport: width / height</param>
            <param name="viewMatrix">view Matrix</param>
            <param name="projectionMatrix">projection Matrix</param>
            <returns>false when the camera matrixes cannot be calculated</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.UpdateWorldToViewportMatrix">
            <summary>
            Updates the worldToViewportMatrix if needed
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CreateMouseRay3D(System.Windows.Point,System.Windows.Media.Media3D.Point3D@,System.Windows.Media.Media3D.Vector3D@)">
            <summary>
            CreateMouseRay3D calculates the 3D ray that goes from the mouse position into the 3D scene.
            The ray goes from rayOrigin in the rayDirection.
            If the ray cannot be calculated this method returns false.
            </summary>
            <param name="mousePosition">mouse position</param>
            <param name="rayOrigin">out - ray origin</param>
            <param name="rayDirection">out - ray direction</param>
            <returns>true if rayOrigin and rayDirection were set or false if ray cannot be defined (usually when the size of TargetViewport3D is not known)</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.CreateMouseRay3D(System.Windows.Point,System.Windows.Size,System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Media3D.Point3D@,System.Windows.Media.Media3D.Vector3D@)">
            <summary>
            CreateMouseRay3D calculates the 3D ray that goes from the mouse position into the 3D scene.
            The ray goes from rayOrigin in the rayDirection.
            If the ray cannot be calculated this method returns false.
            </summary>
            <param name="mousePosition">mouse position</param>
            <param name="viewportSize">viewport size - usually size of Viewport3D (AvailableWidth, AvailableHeight)</param>
            <param name="viewMatrix">camera's view matrix</param>
            <param name="projectionMatrix">camera's projection matrix</param>
            <param name="rayOrigin">out - ray origin</param>
            <param name="rayDirection">out - ray direction</param>
            <returns>true if rayOrigin and rayDirection were set or false if ray cannot be defined (usually when the size of TargetViewport3D is not known)</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.GetMousePositionOnPlane(System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D@)">
            <summary>
            GetMousePositionOnPlane calculates a position where a ray from mouse position interects a plane. Returns false if there is no intersection. 
            </summary>
            <param name="mousePosition">mouse position</param>
            <param name="pointOnPlane">Point3D that lies on the plane</param>
            <param name="planeNormal">normal vector (perpendicular to the plane) that defines the orientation of the plane</param>
            <param name="intersectionPoint">returned intersection position</param>
            <returns>Returns false if there is no intersection</returns>        
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.RenderToBitmap(System.Windows.Media.Brush,System.Int32)">
            <summary>
            Renders TargetViewport3D to bitmap with specifed backgroundBrush and dpi.
            The size of the created bitmap is the same as the size of the TargetViewport3D.
            </summary>
            <param name="backgroundBrush">brush used for background or null to have no background. Default value is null.</param>
            <param name="dpi">DPI settinig for the rendered bitmap. Default value is 96</param>
            <returns>RenderTargetBitmap</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseCamera.RenderToBitmap(System.Int32,System.Int32,System.Int32,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Renders TargetViewport3D to bitmap.
            It is possible to specify custom bitmap width and height (when customWidth and customHeight are bigger than 0). 
            When antialiasingLevel is bigger than 1, the bitmap is rendered into bigger image and than scaled down to create an antialiasing effect.
            </summary>
            <param name="customWidth">when bigger than 0 it specifes the target bitmap width; when zero the width of objectToRender will be used</param>
            <param name="customHeight">when bigger than 0 it specifes the target bitmap height; when zero the height of objectToRender will be used</param>
            <param name="antialiasingLevel">when bigger than 1, the bitmap will be rendered into bigger image and than scaled down to create an antialiasing effect. The antialiasingLevel defines the scale factor of the intermediate bitmap. Max value is 8.</param>
            <param name="backgroundBrush">brush used for background or null to have no background. Default value is null.</param>
            <param name="dpi">DPI settinig for the rendered bitmap. Default value is 96</param>
            <returns>BitmapSource</returns>
            <remarks>
            <para>
            <b>RenderToBitmap</b> method renders TargetViewport3D to bitmap.
            </para>
            <para>
            It is possible to specify custom bitmap width and height (when customWidth and customHeight are bigger than 0). 
            </para>
            <para>
            It is also possible to specify only one width or only height. In this case the other size component is calculed in such a way that the aspect ratio is preserved.
            </para>
            <para>
            When the aspect ratio (= width / height) of the Viewport3D is not the same as the aspect ratio of the target bitmap, the Viewport3D is uniformly scaled to fill the target bitmap.
            </para>
            <para>
            When antialiasingLevel is bigger than 1, the bitmap is rendered into bigger image and than scaled down to create an antialiasing effect.
            </para>
            <para>
            When no custom size or antialiasing is required, you can also use the <see cref="M:Ab3d.Cameras.BaseCamera.RenderToBitmap(System.Windows.Media.Brush,System.Int32)"/> method.
            </para>
            <para>
            RenderToBitmap is internally using <see cref="M:Ab3d.Utilities.BitmapRendering.RenderToBitmap(System.Windows.FrameworkElement,System.Int32,System.Int32,System.Boolean,System.Int32,System.Windows.Media.Brush,System.Int32)"/> method.
            You can use it to render any other WPF FrameworkElement (instead of Viewport3D) to bitmap.
            You can also use it to set the scaleToFill to false.
            </para>
            </remarks>
        </member>
        <member name="T:Ab3d.Cameras.BaseTargetPositionCamera">
            <summary>
            BaseTargetPositionCamera is a base class for cameras that define the target position (TargetPositionCamera) or target object (TargetRect3DCamera, SceneCamera and ThirdPersonCamera).
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseTargetPositionCamera.DistanceProperty">
            <summary>
            DistanceProperty
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseTargetPositionCamera.TargetPositionProperty">
            <summary>
            TargetPositionProperty
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the PerspectiveCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.SetCameraPosition(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Sets the camera position on cameraToUpdate based on the TargetPosition
            </summary>
            <param name="cameraToUpdate">cameraToUpdate</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.FitIntoView(Ab3d.Common.FitIntoViewType,System.Boolean,System.Double)">
            <summary>
            FitIntoView adjusts the camera's Distance (for PerspectiveCamera) or CameraWidth (for OrthographicCamera) and TargetPosition (if adjustTargetPosition is true)
            so that all the objects on the scene will be visible from one edge of the viewport to another edge.
            </summary>
            <remarks>
            <para>
            <b>FitIntoView</b> adjusts the camera's Distance (for PerspectiveCamera) or CameraWidth (for OrthographicCamera) and TargetPosition (if adjustTargetPosition is true)
            so that all the objects on the scene will be visible from one edge of the viewport to another edge.
            </para>
            <para>
            When <b>fitIntoViewType</b> is set to the <see cref="F:Ab3d.Common.FitIntoViewType.CheckAllPositions"/>, then the method checks each position of the objects defined with visual3DCollection.
            This is more precise than <see cref="F:Ab3d.Common.FitIntoViewType.CheckBounds"/> but can take much longer when there are objects with a lot of position in the scene.
            In this cases it is recommended to use the <see cref="F:Ab3d.Common.FitIntoViewType.CheckBounds"/> settings.
            </para>
            <para>
            The <b>adjustmentFactor</b> parameter can be used to set the margin around the scene objects.
            Its value is multiplied by the calculated Distance or CameraWidth. For example value 1.1 would add 10% margin around scene objects.
            </para>
            <para>
            When using OrthographicCamera, the returned CameraWidth and the new TargetPosition will exactly position the object to the bounds of the Viewport3D.
            When using PerspectiveCamera there might be some smaller margins (empty space) on one or the other side of the Viewport3D.
            </para>
            <para>
            To set fit into view for only part of the scene, you can use the <see cref="M:Ab3d.Cameras.BaseTargetPositionCamera.FitIntoView(System.Windows.Media.Media3D.Visual3DCollection,Ab3d.Common.FitIntoViewType,System.Boolean,System.Double)"/> overloaded method that also takes Visual3DCollection as parameter.
            </para>
            <para>
            To get the calculated Distance or CameraWidth and new TargetPosition without changing the current camera, you can use the <see cref="M:Ab3d.Cameras.BaseTargetPositionCamera.GetFitIntoViewDistanceOrCameraWidth(System.Windows.Media.Media3D.Visual3DCollection,Ab3d.Common.FitIntoViewType,System.Boolean,System.Windows.Media.Media3D.Point3D@)"/> method.
            </para>
            </remarks>
            <param name="fitIntoViewType">type of check (default value is CheckAllPositions)</param>
            <param name="adjustTargetPosition">true if the TargetPosition is adjusted; false if TargetPosition is preserved (default value is true)</param>
            <param name="adjustmentFactor">factor that is multiplied by the calculated Distance or CameraWidth. Can be used to add margin to the bounds - for example value 1.1 would add 10% margin. Default value is 1.0 (no margin).</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.FitIntoView(System.Windows.Media.Media3D.Visual3DCollection,Ab3d.Common.FitIntoViewType,System.Boolean,System.Double)">
            <summary>
            FitIntoView adjusts the camera's Distance (for PerspectiveCamera) or CameraWidth (for OrthographicCamera) and TargetPosition (if adjustTargetPosition is true)
            so that all the objects on defined in visual3DCollection will be visible from one edge of the viewport to another edge.
            </summary>
            <remarks>
            <para>
            <b>FitIntoView</b> adjusts the camera's Distance (for PerspectiveCamera) or CameraWidth (for OrthographicCamera) and TargetPosition (if adjustTargetPosition is true)
            so that all the objects on defined in visual3DCollection will be visible from one edge of the viewport to another edge.
            </para>
            <para>
            When <b>fitIntoViewType</b> is set to the <see cref="F:Ab3d.Common.FitIntoViewType.CheckAllPositions"/>, then the method checks each position of the objects defined with visual3DCollection.
            This is more precise than <see cref="F:Ab3d.Common.FitIntoViewType.CheckBounds"/> but can take much longer when there are objects with a lot of position in the scene.
            In this cases it is recommended to use the <see cref="F:Ab3d.Common.FitIntoViewType.CheckBounds"/> settings.
            </para>
            <para>
            The <b>adjustmentFactor</b> parameter can be used to set the margin around the scene objects.
            Its value is multiplied by the calculated Distance or CameraWidth. For example value 1.1 would add 10% margin around scene objects.
            </para>
            <para>
            When using OrthographicCamera, the returned CameraWidth and the new TargetPosition will exactly position the object to the bounds of the Viewport3D.
            When using PerspectiveCamera there might be some smaller margins (empty space) on one or the other side of the Viewport3D.
            </para>
            <para>
            To get the calculated Distance or CameraWidth and new TargetPosition without changing the current camera, you can use the <see cref="M:Ab3d.Cameras.BaseTargetPositionCamera.GetFitIntoViewDistanceOrCameraWidth(System.Windows.Media.Media3D.Visual3DCollection,Ab3d.Common.FitIntoViewType,System.Boolean,System.Windows.Media.Media3D.Point3D@)"/> method.
            </para>
            </remarks>
            <param name="visual3DCollection">Visual3DCollection that will be checked</param>
            <param name="fitIntoViewType">type of check (default value is CheckAllPositions)</param>
            <param name="adjustTargetPosition">true if the TargetPosition is adjusted; false if TargetPosition is preserved (default value is true)</param>
            <param name="adjustmentFactor">factor that is multiplied by the calculated Distance or CameraWidth. Can be used to add margin to the bounds - for example value 1.1 would add 10% margin. Default value is 1.0 (no margin).</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.GetFitIntoViewDistanceOrCameraWidth(System.Windows.Media.Media3D.Visual3DCollection,Ab3d.Common.FitIntoViewType,System.Boolean,System.Windows.Media.Media3D.Point3D@)">
            <summary>
            GetFitIntoViewDistanceOrCameraWidth returns Distance (for PerspectiveCamera) or CameraWidth (for OrthographicCamera) and sets the newTargetPosition
            that will adjust the camera so that all the objects on the scene will be visible from one edge of the viewport to another edge.
            </summary>
            <param name="visual3DCollection">Visual3DCollection that will be checked</param>
            <param name="fitIntoViewType">type of check</param>
            <param name="adjustTargetPosition">true if the center position is adjusted; false if center position is preserved</param>
            <param name="newTargetPosition">out Point3D that specified the new target position</param>
            <returns>Distance (for PerspectiveCamera) or CameraWidth (for OrthographicCamera)</returns>
        </member>
        <member name="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance">
            <summary>
            Gets or sets a double that defines the distance from the camera to the Camera's target position.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.GetTargetPosition">
            <summary>
            Gets the value of TargetPositionProperty
            </summary>
            <returns>value of TargetPositionProperty</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetPositionCamera.SetTargetPosition(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Sets the value of TargetPositionProperty
            </summary>
            <param name="targetPosition">targetPosition</param>
        </member>
        <member name="T:Ab3d.Cameras.BaseTargetRect3DCamera">
            <summary>
            BaseTargetRect3DCamera is a base class for cameras that look at the target Rect3D (SceneCamera and ThirdPersonCamera).
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTargetProperty">
            <summary>
            IsDynamicTargetProperty
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseTargetRect3DCamera.IsDistancePercentProperty">
            <summary>
            IsDistancePercentProperty
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseTargetRect3DCamera.TargetRect3DProperty">
            <summary>
            TargetRect3DProperty
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.BaseTargetRect3DCamera.isTargetRectDirty">
            <summary>
            If true the targetRect3D was changed - the camera need to be updated
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTargetPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDynamicTargetPropertyChanged
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.TargetRect3DPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TargetRect3DPropertyChanged
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.BaseCreateFrom(System.Windows.Media.Media3D.Camera)">
            <summary>
            This method is called from CreateFrom method and actually sets the properties on this camera.
            </summary>
            <remarks>
            <para>
            The CreateFrom method first call BeginInit, than the BaseCreateFrom method and than EndInit. This way all the creating process updates the camera only once (in the EndInit call).
            </para>
            <para>
            All overridden BaseCreateFrom methods should call base.BaseCreateFrom method.
            </para>
            </remarks>
            <param name="originalCamera">originalCamera as WPF's Camera</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.UnsubscribeRenderingEvent">
            <summary>
            Unsubscribe to Rendering event
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.CheckTargetRect3D">
            <summary>
            Checks if TargetRect was changed - in this case update the camera
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the PerspectiveCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.ForceRefresh">
            <summary>
            Forces a refresh of the camera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.SetCameraForTargetRect(System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Updates the TargetPosition based on the targetRect3D
            </summary>
            <param name="targetRect">Rect3D</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.SetCameraPosition(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Sets the camera position on cameraToUpdate based on the TargetPosition - overridden to use the IsDistancePercent property
            </summary>
            <param name="cameraToUpdate">cameraToUpdate</param>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.SetCameraPosition(System.Windows.Media.Media3D.ProjectionCamera,System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Sets the camera position on cameraToUpdate based on the targetRect as Rect3D
            </summary>
            <param name="cameraToUpdate">cameraToUpdate</param>
            <param name="targetRect">targetRect</param>
        </member>
        <member name="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTarget">
            <summary>
            Gets or sets a Boolean value that specifies if the Camera is constantly (CompositionTarget.Rendering event) monitoring the position and size of the <see cref="P:Ab3d.Cameras.TargetRect3DCamera.TargetRect3D"/> and move the camera according to the change.
            </summary>
            <remarks>
            <para>
            If the IsDynamicTarget is true the camera is subscribed to CompositionTarget.Rendering event to constantly monitor the <see cref="P:Ab3d.Cameras.TargetRect3DCamera.TargetRect3D"/>.
            </para>
            <para>
            This can slightly affect the performance of the application because the position and size of the TargetRect3D is checked event if it is not changed. To avoid this and if you know when the TargetRect3D is changed it is recommended that after the change of TargetRect3D a <see cref="M:Ab3d.Cameras.BaseCamera.Refresh"/> method is called to update the camera according to the new TargetRect3D.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDistancePercent">
            <summary>
            Gets or sets a Boolean that specifies if the <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> property is specified in percentage or absolute value.
            </summary>
            <remarks>
            <para>
            For example if IsDistancePercent is true and <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> is 3.0, that means that the distance of the camera from the center of the <see cref="P:Ab3d.Cameras.TargetRect3DCamera.TargetRect3D"/> will be 3 times the size of the <see cref="P:Ab3d.Cameras.TargetRect3DCamera.TargetRect3D"/> (diagonal length).
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Cameras.BaseTargetRect3DCamera.AbsoluteDistance">
            <summary>
            Gets a distance from the camera to the Camera's target position - the value is an absolute value regardless of IsDistancePercent property.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDistancePercent"/> is true, the <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> is set as percentage of the center object size. In this case the <b>AbsoluteDistance</b> property tells the real distance value and not the percentage.
            </para>
            <para>
            If <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDistancePercent"/> is false, the <b>AbsoluteDistance</b> is the same as <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> because the <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> is already an absolute value.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.GetTargetRect3D">
            <summary>
            Gets the value of TargetRect3DProperty
            </summary>
            <returns>value of TargetRect3DProperty</returns>
        </member>
        <member name="M:Ab3d.Cameras.BaseTargetRect3DCamera.SetTargetRect3D(System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Sets the value of TargetRect3DProperty
            </summary>
            <param name="targetRect">targetRect</param>
        </member>
        <member name="T:Ab3d.Cameras.FirstPersonCamera">
            <summary>
            FirstPersonCamera is a camera that simulates the person's view on the world.
            </summary>
            <remarks>
            <para>
            FirstPersonCamera is a camera that simulates the person's view on the world. It is defined by the <see cref="P:Ab3d.Cameras.FirstPersonCamera.Position"/> of the person and the direction of the camera - defined by <see cref="P:Ab3d.Cameras.SphericalCamera.Heading"/>, <see cref="P:Ab3d.Cameras.SphericalCamera.Attitude"/> and <see cref="P:Ab3d.Cameras.SphericalCamera.Bank"/> properties.
            </para>
            <para><br/></para>
            <para>
            FirstPersonCamera also has some other properties that are common to all cameras that derive from <see cref="T:Ab3d.Cameras.SphericalCamera"/> class.<br/>
            <br/>
            </para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> and the <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> properties can be used to add a lights to the Viewport3D that is positioned at the same position as the camera and is looking at the cameras direction. In the real world this would be a light that is mounted to the camera. This way the 3D objects that are viewed with the camera are always illuminated regardless of the cameras position.
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> defines when the camera light is shown. The possible values are:
            </para>
            <list type="bullet">
            <item><term>Never</term><description>Never add additional camera light</description></item>
            <item><term>Auto</term><description>(Default value) Show camera light only if there is no other light defined in the Viewport3D controlled by the camera.</description></item>
            <item><term>Always</term><description>Always add a camera light</description></item>
            </list>     
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> property is by default a DirectionalLight with White color. The value can be set to a new DirectionalLight with some other color. Other types of Lights are not supported - will not change according to the camera's changed.
            </para>
            <para></para>
            <para>
            Because SphericalCamera is derived from <see cref="T:Ab3d.Cameras.BaseCamera"/>, the FirstPersonCamera also contains properties that are defined in BaseCamera and therefore common to all the cameras:
            </para>
            <para>
            The Viewport3D that is controlled by this camera is defined by <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/>, <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> and <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> properties.
            </para>
            <para>
            If the Window, Page or UserControl has only one Viewport3D, there is no need to set and of the above properties on the camera. By default the <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/> is set to true and that means, that the Viewport3D is automatically find from the current UserControl, Page or Window and it is set to a <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> property.
            </para>
            <para>
            But if there are more Viewport3D objects defined, than by default the first Viewport3D will be used by the camera. With setting the <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> or <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> it is possible to specify which Viewport3D will be controlled by the camera.
            </para>
            <para></para>
            <para>
            The First person camera also defines methods to simplify the "persons" movement:<br/>
            <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveForward(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveBackward(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveRight(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveLeft(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveDown(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveUp(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.StrafeCamera(System.Double,System.Double,System.Double)"/> and <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveCamera(System.Windows.Media.Media3D.Vector3D)"/>.
            </para>
            </remarks>
            <example>
            <para>
            The following xaml creates a Viewport3D with a 3D Box and a FirstPersonCamera that is looking at the Box from (50, 50, 100). Because there is no light defined in the Viewport3D and the default value of the camera's <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> property is true, the cameras adds a light that is illuminating the scene.
            </para>
            <para>
            The sample also defines a <see cref="T:Ab3d.Controls.MouseCameraController"/> to control the camera with the mouse and a <see cref="T:Ab3d.Controls.CameraControlPanel"/> that shows some nice buttons that can be also used to control the camera.
            </para>
            <code lang="xaml">
            &lt;Page x:Class="PowerToysSamples"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
                xmlns:ab3dControls="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
                xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"&gt;
                &lt;Grid&gt;
                    &lt;Viewport3D&gt;
                        &lt;visuals:BoxVisual3D Size="20 20 20" Material="Blue"/&gt;
                    &lt;/Viewport3D&gt;
                    
                    &lt;cameras:FirstPersonCamera Position="50 50 100" Heading="45" Attitude="-20"/&gt;
                    
                    &lt;ab3dControls:MouseCameraController/&gt;
            
                    &lt;ab3dControls:CameraControlPanel VerticalAlignment="Bottom" HorizontalAlignment="Left"/&gt;
                &lt;/Grid&gt;
            &lt;/Page&gt;    
            </code>
            </example>
            <seealso cref="T:Ab3d.Cameras.ThirdPersonCamera"/>
            <seealso cref="T:Ab3d.Cameras.SceneCamera"/>
            <seealso cref="T:Ab3d.Cameras.TargetPositionCamera"/>
        </member>
        <member name="F:Ab3d.Cameras.FirstPersonCamera.PositionProperty">
            <summary>
            PositionProperty
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.BaseCreateFrom(System.Windows.Media.Media3D.Camera)">
            <summary>
            This method is called from CreateFrom method and actually sets the properties on this camera.
            </summary>
            <remarks>
            <para>
            The CreateFrom method first call BeginInit, than the BaseCreateFrom method and than EndInit. This way all the creating process updates the camera only once (in the EndInit call).
            </para>
            <para>
            All overridden BaseCreateFrom methods should call base.BaseCreateFrom method.
            </para>
            </remarks>
            <param name="originalCamera">originalCamera as WPF's Camera</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the PerspectiveCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.MoveForward(System.Double)">
            <summary>
            Moves the camera forward (in the look direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.MoveBackward(System.Double)">
            <summary>
            Moves the camera backward (in the opposite as look direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.MoveRight(System.Double)">
            <summary>
            Moves the camera right (strafe)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.MoveLeft(System.Double)">
            <summary>
            Moves the camera left (strafe)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.MoveUp(System.Double)">
            <summary>
            Moves the camera up (in the up direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.MoveDown(System.Double)">
            <summary>
            Moves the camera down (in the opposite up direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.StrafeCamera(System.Double,System.Double,System.Double)">
            <summary>
            StrafeCamera moves the camera based on the current camera's LookDirection and UpDirection.
            </summary>
            <remarks>
            <para>
            StrafeCamera moves the camera based on the current camera's LookDirection and UpDirection.
            </para>
            <para>
            For example if camera is looking to the left (LookDirection = (-1,0,0)), than strafing the camera for dx=10 will move the camera into the screen (in the -z direction).
            </para>
            <para>
            To move the camera with just changing the camera position regardless of the LookDirectio use <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveCamera(System.Windows.Media.Media3D.Vector3D)"/> method.
            </para>
            </remarks>
            <param name="dx">change in x direction</param>
            <param name="dy">change in y direction</param>
            <param name="dz">change in z direction</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.MoveCamera(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Moves the camera for the moveVector (regardless of the current camera's LookDirection and UpDirection)
            </summary>
            <remarks>
            <para>
            MoveCamera method just changed the camera position regardless of the LookDirectio.
            </para>
            <para>
            To move the camera based on the current LookDirection (strafe) use <see cref="M:Ab3d.Cameras.FirstPersonCamera.StrafeCamera(System.Double,System.Double,System.Double)"/> method.
            </para>
            </remarks>
            <param name="moveVector">moveVector</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.TurnTo(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Turns the camera to the specified direction
            </summary>
            <param name="direction">direction as Vector3D</param>
        </member>
        <member name="M:Ab3d.Cameras.FirstPersonCamera.TurnTo(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Turns the camera to the direction of the specfied position
            </summary>
            <param name="position">position as Point3D</param>
        </member>
        <member name="P:Ab3d.Cameras.FirstPersonCamera.Position">
            <summary>
            Gets or sets a Point3D that is a position of the camera.
            </summary>
            <remarks>
            The position of the camera can be also changed by the following methods:<br/>
            <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveForward(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveBackward(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveRight(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveLeft(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveDown(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveUp(System.Double)"/>, <see cref="M:Ab3d.Cameras.FirstPersonCamera.StrafeCamera(System.Double,System.Double,System.Double)"/> and <see cref="M:Ab3d.Cameras.FirstPersonCamera.MoveCamera(System.Windows.Media.Media3D.Vector3D)"/>.
            </remarks>
        </member>
        <member name="T:Ab3d.Cameras.FreeCamera">
            <summary>
            FreeCamera is a camera that is not defined by heading, attitude and bank angle. It is also not rotated around y axis.
            Instead the camera is defined by CameraPosition, TargetPosition and UpDirection. The camera is not limited to rotation around y axis.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.FreeCamera.CameraPositionProperty">
            <summary>
            CameraPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.FreeCamera.CameraPosition">
            <summary>
            Gets or sets the position of the camera.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.FreeCamera.TargetPositionProperty">
            <summary>
            TargetPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.FreeCamera.TargetPosition">
            <summary>
            Gets or sets the position where the camera is looking at and around which point the camera is being rotated.
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.FreeCamera.UpDirectionProperty">
            <summary>
            UpDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.FreeCamera.UpDirection">
            <summary>
            Gets or sets a Vector3D that specifies the up direction of the camera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.FreeCamera.RotateCamera(System.Double,System.Double)">
            <summary>
            Rotates the free camera for the specified heading and attitude
            </summary>
            <param name="headingChange">heading change in degrees</param>
            <param name="attitudeChange">attitude change in degrees</param>
        </member>
        <member name="M:Ab3d.Cameras.FreeCamera.BaseCreateFrom(System.Windows.Media.Media3D.Camera)">
            <summary>
            This method is called from CreateFrom method and actually sets the properties on this camera.
            </summary>
            <remarks>
            <para>
            The CreateFrom method first call BeginInit, than the BaseCreateFrom method and than EndInit. This way all the creating process updates the camera only once (in the EndInit call).
            </para>
            <para>
            All overridden BaseCreateFrom methods should call base.BaseCreateFrom method.
            </para>
            </remarks>
            <param name="originalCamera">originalCamera as WPF's Camera</param>
        </member>
        <member name="M:Ab3d.Cameras.FreeCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the ProjectionCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="T:Ab3d.Cameras.SceneCamera">
            <summary>
            SceneCamera is a camera that looks at the whole 3D scene defined by the Viewport3D.
            </summary>
            <remarks>
            <para>
            SceneCamera is a camera that looks the whole 3D scene defined by the Viewport3D from the specified angle and distance.
            SceneCamera is the same as <see cref="T:Ab3d.Cameras.ThirdPersonCamera"/> with its <see cref="P:Ab3d.Cameras.ThirdPersonCamera.CenterObject"/> set to the whole 3D scene.
            </para>
            <para><br/></para>
            <para>
            The angle is specified by <see cref="P:Ab3d.Cameras.SphericalCamera.Heading"/>, <see cref="P:Ab3d.Cameras.SphericalCamera.Attitude"/> and <see cref="P:Ab3d.Cameras.SphericalCamera.Bank"/> properties.
            </para>
            <para>
            The distance from the camera to the center point of the scene is defined by <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> and <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDistancePercent"/> properties.
            </para>
            <para>
            If IsDistancePercent is false (by default) the Distance value is used as a distance from the center point of the scene to the camera.
            </para>
            <para>
            If IsDistancePercent is true, than the Distance value is specified in percent. For example if Distance is 3.0, that means that the distance of the camera from the center of the CenterObject will be 3 times the size of the CenterObject's (diagonal length). This can be very useful when you just want to show the 3D object regardless in which size the object is defined.
            </para>
            <para>
            Center point is calculated from the Bounds of the whole 3D scene.
            </para>
            <para><br/></para>
            <para>
            When the position or the size of Bounds of the whole 3D scene is changed, the SceneCamera is not automatically updated to affect the changes. 
            To manually update the camera, call the <see cref="M:Ab3d.Cameras.BaseCamera.Refresh"/> method.
            Another possibility is to enable automatic camera updating. This can be done with setting the <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTarget"/> to true. This will subscribe the camera to CompositionTarget.Rendering event and will constantly monitor the position and size of the CenterObject and move the camera according to the change.
            </para>
            <note>
            If you know when the objects on the scene are changed (for example if they are changed manually from the code), it is recommended that the <see cref="M:Ab3d.Cameras.BaseCamera.Refresh"/> method is used instead of setting <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTarget"/> to true.
            This way the check for the change will be done only after the change and not on every rendering pass (even if there is no change).
            </note>
            <para><br/></para>
            <para>
            SceneCamera also has some other properties that are common to all cameras that derive from <see cref="T:Ab3d.Cameras.SphericalCamera"/> class.
            </para>
            <para><br/></para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> and the <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> properties can be used to add a lights to the Viewport3D that is positioned at the same position as the camera and is looking at the cameras direction.
            In the real world this would be a light that is mounted to the camera.
            This way the 3D objects that are viewed with the camera are always illuminated regardless of the cameras position.
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> defines when the camera light is shown. The possible values are:
            </para>
            <list type="bullet">
            <item><term>Never</term><description>Never add additional camera light</description></item>
            <item><term>Auto</term><description>(Default value) Show camera light only if there is no other light defined in the Viewport3D controlled by the camera.</description></item>
            <item><term>Always</term><description>Always add a camera light</description></item>
            </list>     
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> property is by default a DirectionalLight with White color. The value can be set to a new DirectionalLight with some other color. Other types of Lights are not supported - will not change according to the camera's changed.
            </para>
            <para><br/></para>
            <para>
            Because SphericalCamera is derived from <see cref="T:Ab3d.Cameras.BaseCamera"/>, the SceneCamera also contains properties that are defined in BaseCamera and therefore common to all the cameras:
            </para>
            <para>
            The Viewport3D that is controlled by this camera is defined by <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/>, <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> and <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> properties.
            </para>
            <para>
            If the Window, Page or UserControl has only one Viewport3D, there is no need to set and of the above properties on the camera. By default the <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/> is set to true and that means, that the Viewport3D is automatically find from the current UserControl, Page or Window and it is set to a <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> property.
            </para>
            <para>
            But if there are more Viewport3D objects defined, than by default the first Viewport3D will be used by the camera. With setting the <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> or <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> it is possible to specify which Viewport3D will be controlled by the camera.
            </para>
            </remarks>
            <example>
            <para>
            The following xaml creates a Viewport3D with a few 3D objects and a SceneCamera that is looking at the scene from from left and from above. The Distance is defined as percent. Because there is no light defined in the Viewport3D and the default value of the camera's <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> property is true, the cameras adds a light that is illuminating the scene.
            </para>
            <para>
            The sample also defines a <see cref="T:Ab3d.Controls.MouseCameraController"/> to control the camera with the mouse and a <see cref="T:Ab3d.Controls.CameraControlPanel"/> that shows some nice buttons that can be also used to control the camera.
            </para>
            <code lang="xaml">
            &lt;Page x:Class="PowerToysSamples"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
                xmlns:ab3dControls="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
                xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"&gt;
                &lt;Grid&gt;
                    &lt;Viewport3D&gt;
                        &lt;visuals:BoxVisual3D x:Name="MyBoxModel" CenterPosition="30 10 30" 
                                             Size="20 20 20" Material="Blue"/&gt;
                        &lt;visuals:SphereVisual3D CenterPosition="-30 10 0" Radius="10"
                                                Material="Red"/&gt;
                        &lt;visuals:PyramidVisual3D BottomCenterPosition="0 0 30" Size="20 20 20"
                                                 Material="Green"/&gt;
                    &lt;/Viewport3D&gt;
                    
                    &lt;cameras:SceneCamera Heading="30" Attitude="-20" 
                                                Distance="2" IsDistancePercent="True"/&gt;
                    
                    &lt;ab3dControls:MouseCameraController/&gt;
            
                    &lt;ab3dControls:CameraControlPanel VerticalAlignment="Bottom" HorizontalAlignment="Left"/&gt;
                &lt;/Grid&gt;
            &lt;/Page&gt;    
            </code>
            </example>   
            <seealso cref="T:Ab3d.Cameras.ThirdPersonCamera"/>
            <seealso cref="T:Ab3d.Cameras.FirstPersonCamera"/>
            <seealso cref="T:Ab3d.Cameras.TargetPositionCamera"/>      
        </member>
        <member name="M:Ab3d.Cameras.SceneCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.SceneCamera.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.SceneCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the PerspectiveCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="M:Ab3d.Cameras.SceneCamera.ForceRefresh">
            <summary>
            Forces a refresh of the camera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.SceneCamera.CheckTargetRect3D">
            <summary>
            Checks if the scene size or position is changed
            </summary>
        </member>
        <member name="T:Ab3d.Cameras.SphericalCamera">
            <summary>
            SphericalCamera class defines a camera that is defined by <see cref="P:Ab3d.Cameras.SphericalCamera.Heading"/>, <see cref="P:Ab3d.Cameras.SphericalCamera.Attitude"/> and <see cref="P:Ab3d.Cameras.SphericalCamera.Bank"/> properties.
            </summary>
            <remarks>
            <para>
            SphericalCamera class defines a camera that is defined by <see cref="P:Ab3d.Cameras.SphericalCamera.Heading"/>, <see cref="P:Ab3d.Cameras.SphericalCamera.Attitude"/> and <see cref="P:Ab3d.Cameras.SphericalCamera.Bank"/> properties.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Cameras.SphericalCamera.HeadingProperty">
            <summary>
            HeadingProperty
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.SphericalCamera.AttitudeProperty">
            <summary>
            AttitudeProperty
            </summary>
        </member>
        <member name="F:Ab3d.Cameras.SphericalCamera.BankProperty">
            <summary>
            BankProperty
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.RotateCamera(System.Double,System.Double)">
            <summary>
            Rotates the camera for the specified heading and attitude
            </summary>
            <param name="headingChange">heading change in degrees</param>
            <param name="attitudeChange">attitude change in degrees</param>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.BaseCreateFrom(System.Windows.Media.Media3D.Camera)">
            <summary>
            This method is called from CreateFrom method and actually sets the properties on this camera.
            </summary>
            <remarks>
            <para>
            The CreateFrom method first call BeginInit, than the BaseCreateFrom method and than EndInit. This way all the creating process updates the camera only once (in the EndInit call).
            </para>
            <para>
            All overridden BaseCreateFrom methods should call base.BaseCreateFrom method.
            </para>
            </remarks>
            <param name="originalCamera">originalCamera as WPF's Camera</param>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.ForceRefresh">
            <summary>
            Forces a refresh of the camera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the ProjectionCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.SetCameraLookDirection(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the cameraToUpdate based on the current Heading, Attitude and Bank values
            </summary>
            <param name="cameraToUpdate"></param>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.GetNormalizedHeading">
            <summary>
            Returns a double that is a Heading value normalized so that it is always in interval between 0 and 360 degrees.
            </summary>
            <returns>Heading value normalized so that it is always in interval between 0 and 360 degrees</returns>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.GetNormalizedAttitude">
            <summary>
            Returns a double that is a Attitude value normalized so that it is always in interval between 0 and 360 degrees.
            </summary>
            <returns>Attitude value normalized so that it is always in interval between 0 and 360 degrees</returns>
        </member>
        <member name="M:Ab3d.Cameras.SphericalCamera.GetNormalizedBank">
            <summary>
            Returns a double that is a Bank value normalized so that it is always in interval between 0 and 360 degrees.
            </summary>
            <returns>Bank value normalized so that it is always in interval between 0 and 360 degrees</returns>
        </member>
        <member name="P:Ab3d.Cameras.SphericalCamera.Heading">
            <summary>
            Gets or sets a Camera Heading (left-right) angle in degrees.
            </summary>
            <remarks>
            <para>
            Examples:<br/>
            Heading angle 0 means that the Camera is looking straight forward.<br/>
            Heading angle 30 means that the Camera is looking 30 degrees to the right.<br/>
            Heading angle -30 means that the Camera is looking 30 degrees to the left.<br/>
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Cameras.SphericalCamera.Attitude">
            <summary>
            Gets or sets a Camera Attitude (up-down) angle in degrees.
            </summary>
            <remarks>
            <para>
            Examples:<br/>
            Attitude angle 0 means that the Camera is horizontal.<br/>
            Attitude angle 30 means that the Camera is looking 30 degrees down.<br/>
            Attitude angle -30 means that the Camera is looking 30 degrees up.<br/>
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Cameras.SphericalCamera.Bank">
            <summary>
            Gets or sets a Camera Bank angle in degrees (UpDirection is rotated left-right)
            </summary>
            <remarks>
            <para>
            Examples:<br/>
            Bank angle 0 means that the Camera is horizontally aligned.<br/>
            Bank angle 30 means that the Camera is rotated as a head would be bended to the right.<br/>
            Bank angle -30 means that the Camera is rotated as a head would be bended to the left.<br/>
            </para>
            </remarks>
        </member>
        <member name="T:Ab3d.Cameras.TargetPositionCamera">
            <summary>
            TargetPositionCamera is a camera that is looking at the specified position from the specified angle and distance.
            </summary>
            <remarks>
            <para>
            TargetPositionCamera is a camera that is looking at the <see cref="P:Ab3d.Cameras.TargetPositionCamera.TargetPosition"/> from the specified angle and distance.
            </para>
            <para><br/></para>
            <para>
            The angle is specified by <see cref="P:Ab3d.Cameras.SphericalCamera.Heading"/>, <see cref="P:Ab3d.Cameras.SphericalCamera.Attitude"/> and <see cref="P:Ab3d.Cameras.SphericalCamera.Bank"/> properties.
            </para>
            <para>
            The distance from the camera to the <see cref="P:Ab3d.Cameras.TargetPositionCamera.TargetPosition"/> is defined by the <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> property.
            </para>
            <para><br/></para>
            <para>
            TargetPositionCamera also has some other properties that are common to all cameras that derive from <see cref="T:Ab3d.Cameras.SphericalCamera"/> class.
            </para>
            <para><br/></para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> and the <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> properties can be used to add a lights to the Viewport3D that is positioned at the same position as the camera and is looking at the cameras direction. In the real world this would be a light that is mounted to the camera. This way the 3D objects that are viewed with the camera are always illuminated regardless of the cameras position.
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> defines when the camera light is shown. The possible values are:
            </para>
            <list type="bullet">
            <item><term>Never</term><description>Never add additional camera light</description></item>
            <item><term>Auto</term><description>(Default value) Show camera light only if there is no other light defined in the Viewport3D controlled by the camera.</description></item>
            <item><term>Always</term><description>Always add a camera light</description></item>
            </list>     
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> property is by default a DirectionalLight with White color. The value can be set to a new DirectionalLight with some other color. Other types of Lights are not supported - will not change according to the camera's changed.
            </para>
            <para><br/></para>
            <para>
            Because SphericalCamera is derived from <see cref="T:Ab3d.Cameras.BaseCamera"/>, the TargetPositionCamera also contains properties that are defined in BaseCamera and therefore common to all the cameras:
            </para>
            <para>
            The Viewport3D that is controlled by this camera is defined by <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/>, <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> and <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> properties.
            </para>
            <para>
            If the Window, Page or UserControl has only one Viewport3D, there is no need to set and of the above properties on the camera. By default the <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/> is set to true and that means, that the Viewport3D is automatically find from the current UserControl, Page or Window and it is set to a <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> property.
            </para>
            <para>
            But if there are more Viewport3D objects defined, than by default the first Viewport3D will be used by the camera. With setting the <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> or <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> it is possible to specify which Viewport3D will be controlled by the camera.
            </para>
            </remarks>
            <example>
            <para>
            The following xaml creates a Viewport3D with a 3D Box and a TargetPositionCamera that is looking at the bottom of the Box from above. 
            The Distance from the camera to the TargetPosition is 100.
            Because there is no light defined in the Viewport3D and the default value of the camera's <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> property is true, the cameras adds a light that is illuminating the scene.
            </para>
            <para>
            The sample also defines a <see cref="T:Ab3d.Controls.MouseCameraController"/> to control the camera with the mouse and a <see cref="T:Ab3d.Controls.CameraControlPanel"/> that shows some nice buttons that can be also used to control the camera.
            </para>
            <code lang="xaml">
            &lt;Page x:Class="PowerToysSamples"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
                xmlns:ab3dControls="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
                xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"&gt;
                &lt;Grid&gt;
                    &lt;Viewport3D&gt;
                        &lt;visuals:BoxVisual3D CenterPosition="50 100 0" Size="50 200 20" Material="Blue"/&gt;
                    &lt;/Viewport3D&gt;
                    
                    &lt;cameras:TargetPositionCamera Heading="0" Attitude="-50" Distance="100"
                                                  TargetPosition="75 0 20"/&gt;
                    
                    &lt;ab3dControls:MouseCameraController/&gt;
            
                    &lt;ab3dControls:CameraControlPanel VerticalAlignment="Bottom" HorizontalAlignment="Left"/&gt;
                &lt;/Grid&gt;
            &lt;/Page&gt;    
            </code>
            </example>    
            <seealso cref="T:Ab3d.Cameras.FirstPersonCamera"/>
            <seealso cref="T:Ab3d.Cameras.ThirdPersonCamera"/>
            <seealso cref="T:Ab3d.Cameras.SceneCamera"/>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.BaseCreateFrom(System.Windows.Media.Media3D.Camera)">
            <summary>
            This method is called from CreateFrom method and actually sets the properties on this camera.
            </summary>
            <remarks>
            <para>
            The CreateFrom method first call BeginInit, than the BaseCreateFrom method and than EndInit. This way all the creating process updates the camera only once (in the EndInit call).
            </para>
            <para>
            All overridden BaseCreateFrom methods should call base.BaseCreateFrom method.
            </para>
            </remarks>
            <param name="originalCamera">originalCamera as WPF's Camera</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.MoveForward(System.Double)">
            <summary>
            Moves the camera forward (in the look direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.MoveBackward(System.Double)">
            <summary>
            Moves the camera backward (in the opposite as look direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.MoveRight(System.Double)">
            <summary>
            Moves the camera right (strafe)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.MoveLeft(System.Double)">
            <summary>
            Moves the camera left (strafe)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.MoveUp(System.Double)">
            <summary>
            Moves the camera up (in the up direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.MoveDown(System.Double)">
            <summary>
            Moves the camera down (in the opposite up direction)
            </summary>
            <param name="distance">distance to move</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.StrafeCamera(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the moveVector based on the current camera's LookDirection and UpDirection
            </summary>
            <remarks>
            <para>
            StrafeCamera moves the camera based on the current camera's LookDirection and UpDirection.
            </para>
            <para>
            For example if camera is looking to the left (LookDirection = (-1,0,0)), than strafing the camera for dx=10 will move the camera into the screen (in the -z direction).
            </para>
            <para>
            To move the camera with just changing the camera position regardless of the LookDirectio use <see cref="M:Ab3d.Cameras.TargetPositionCamera.MoveCamera(System.Windows.Media.Media3D.Vector3D)"/> method.
            </para>
            </remarks>
            <param name="dx">dx</param>
            <param name="dy">dy</param>
            <param name="dz">dz</param>
        </member>
        <member name="M:Ab3d.Cameras.TargetPositionCamera.MoveCamera(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Moves the camera for the moveVector (regardless of the current camera's LookDirection and UpDirection)
            </summary>
            <remarks>
            <para>
            MoveCamera method just changed the camera position regardless of the LookDirectio.
            </para>
            <para>
            To move the camera based on the current LookDirection (strafe) use <see cref="M:Ab3d.Cameras.TargetPositionCamera.StrafeCamera(System.Double,System.Double,System.Double)"/> method.
            </para>
            </remarks>
            <param name="moveVector">moveVector</param>
        </member>
        <member name="P:Ab3d.Cameras.TargetPositionCamera.TargetPosition">
            <summary>
            Gets or sets a Point3D that defines the position on which the camera is looking.
            </summary>
        </member>
        <member name="T:Ab3d.Cameras.TargetRect3DCamera">
            <summary>
            TargetRect3DCamera is a camera that instead of looking at a position defined by the Point3D looks at a position defined by the Rect3D.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDistancePercent"/> property is true, the <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> property is specified as percentage of the size of the <see cref="P:Ab3d.Cameras.TargetRect3DCamera.TargetRect3D"/>.
            </para>
            <para>
            The TargetRect3DCamera also defines a <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTarget"/> property that can be set to true to constantly (CompositionTarget.Rendering event) monitor the position and size of the <see cref="P:Ab3d.Cameras.TargetRect3DCamera.TargetRect3D"/> and move the camera according to the change.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Cameras.TargetRect3DCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.TargetRect3DCamera.TargetRect3D">
            <summary>
            Gets or sets the Rect3D that is used as a camera target - the camera is looking at the TargetRect3D.
            </summary>
        </member>
        <member name="T:Ab3d.Cameras.ThirdPersonCamera">
            <summary>
            ThirdPersonCamera is a camera that looks at the CenterObject from the specified angle and distance.
            </summary>
            <remarks>
            <para>
            ThirdPersonCamera is a camera that looks at the <see cref="P:Ab3d.Cameras.ThirdPersonCamera.CenterObject"/> from the specified angle and distance.
            When the CenterObject is the root 3D object, the camera is looking at the whole 3D scene and is the same as if a <see cref="T:Ab3d.Cameras.SceneCamera"/> would be used.
            </para>
            <para><br/></para>
            <para>
            The angle is specified by <see cref="P:Ab3d.Cameras.SphericalCamera.Heading"/>, <see cref="P:Ab3d.Cameras.SphericalCamera.Attitude"/> and <see cref="P:Ab3d.Cameras.SphericalCamera.Bank"/> properties.
            </para>
            <para>
            The distance from the camera to the <see cref="P:Ab3d.Cameras.ThirdPersonCamera.CenterObject"/> is defined by <see cref="P:Ab3d.Cameras.BaseTargetPositionCamera.Distance"/> and <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDistancePercent"/> properties.
            </para>
            <para>
            If IsDistancePercent is false (by default) the Distance value is used as a distance from the CenterObject to the camera.
            </para>
            <para>
            If IsDistancePercent is true, than the Distance value is specified in percent. For example if Distance is 3.0, that means that the distance of the camera from the center of the CenterObject will be 3 times the size of the CenterObject's (diagonal length). This can be very useful when you just want to show the 3D object regardless in which size the object is defined.
            </para>
            <para><br/></para>
            <para>
            When the position or the size of CenterObject is changed, the ThirdPersonCamera is not automatically updated to follow the CenterObject. 
            To manually update the camera, call the <see cref="M:Ab3d.Cameras.BaseCamera.Refresh"/> method.
            Another possibility is to enable automatic camera updating. This can be done with setting the <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTarget"/> to true. This will subscribe the camera to CompositionTarget.Rendering event and will constantly monitor the position and size of the CenterObject and move the camera according to the change.
            </para>
            <para>
            If you know when the CenterObject is changed (for example if it is changed manually from the code), it is recommended that the <see cref="M:Ab3d.Cameras.BaseCamera.Refresh"/> method is used instead of setting <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTarget"/> to true.
            This way the check for the change will be done only after the change and not all the times (even if there were no change).
            </para>
            <para><br/></para>
            <para>
            ThirdPersonCamera also has some other properties that are common to all cameras that derive from <see cref="T:Ab3d.Cameras.SphericalCamera"/> class.
            </para>
            <para><br/></para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> and the <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> properties can be used to add a lights to the Viewport3D that is positioned at the same position as the camera and is looking at the cameras direction. In the real world this would be a light that is mounted to the camera. This way the 3D objects that are viewed with the camera are always illuminated regardless of the cameras position.
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> defines when the camera light is shown. The possible values are:
            </para>
            <list type="bullet">
            <item><term>Never</term><description>Never add additional camera light</description></item>
            <item><term>Auto</term><description>(Default value) Show camera light only if there is no other light defined in the Viewport3D controlled by the camera.</description></item>
            <item><term>Always</term><description>Always add a camera light</description></item>
            </list>     
            <para>
            The <see cref="P:Ab3d.Cameras.BaseCamera.CameraLight"/> property is by default a DirectionalLight with White color. The value can be set to a new DirectionalLight with some other color. Other types of Lights are not supported - will not change according to the camera's changed.
            </para>
            <para><br/></para>
            <para>
            Because SphericalCamera is derived from <see cref="T:Ab3d.Cameras.BaseCamera"/>, the ThirdPersonCamera also contains properties that are defined in BaseCamera and therefore common to all the cameras:
            </para>
            <para>
            The Viewport3D that is controlled by this camera is defined by <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/>, <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> and <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> properties.
            </para>
            <para>
            If the Window, Page or UserControl has only one Viewport3D, there is no need to set and of the above properties on the camera. By default the <see cref="P:Ab3d.Cameras.BaseCamera.IsAutoViewport3DFindingEnabled"/> is set to true and that means, that the Viewport3D is automatically find from the current UserControl, Page or Window and it is set to a <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> property.
            </para>
            <para>
            But if there are more Viewport3D objects defined, than by default the first Viewport3D will be used by the camera. With setting the <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3D"/> or <see cref="P:Ab3d.Cameras.BaseCamera.TargetViewport3DName"/> it is possible to specify which Viewport3D will be controlled by the camera.
            </para>
            </remarks>
            <example>
            <para>
            The following xaml creates a Viewport3D with a 3D Box and a ThirdPersonCamera that is looking at the Box from from left and from above. The Distance is defined as percent. Because there is no light defined in the Viewport3D and the default value of the camera's <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> property is true, the cameras adds a light that is illuminating the scene.
            </para>
            <para>
            The sample also defines a <see cref="T:Ab3d.Controls.MouseCameraController"/> to control the camera with the mouse and a <see cref="T:Ab3d.Controls.CameraControlPanel"/> that shows some nice buttons that can be also used to control the camera.
            </para>
            <code lang="xaml">
            &lt;Page x:Class="PowerToysSamples"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
                xmlns:ab3dControls="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
                xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"&gt;
                &lt;Grid&gt;
                    &lt;Viewport3D&gt;
                        &lt;visuals:BoxVisual3D x:Name="MyBoxModel" Size="60 40 20" Material="Blue"/&gt;
                    &lt;/Viewport3D&gt;
                    
                    &lt;cameras:ThirdPersonCamera Heading="30" Attitude="-20" 
                                               Distance="2" IsDistancePercent="True"
                                               CenterObject="{Binding ElementName=MyBoxModel}"/&gt;
                    
                    &lt;ab3dControls:MouseCameraController/&gt;
            
                    &lt;ab3dControls:CameraControlPanel VerticalAlignment="Bottom" HorizontalAlignment="Left"/&gt;
                &lt;/Grid&gt;
            &lt;/Page&gt;    
            </code>
            </example>    
            <seealso cref="T:Ab3d.Cameras.FirstPersonCamera"/>
            <seealso cref="T:Ab3d.Cameras.SceneCamera"/>
            <seealso cref="T:Ab3d.Cameras.TargetPositionCamera"/>    
        </member>
        <member name="F:Ab3d.Cameras.ThirdPersonCamera.CenterObjectProperty">
            <summary>
            CenterObjectProperty
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.ThirdPersonCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.ThirdPersonCamera.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.ThirdPersonCamera.CenterObjectPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CenterObjectPropertyChanged
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Cameras.ThirdPersonCamera.UpdateCamera(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Updates the PerspectiveCamera
            </summary>
            <param name="cameraToUpdate">ProjectionCamera to update</param>
        </member>
        <member name="M:Ab3d.Cameras.ThirdPersonCamera.ForceRefresh">
            <summary>
            Forces a refresh of the camera.
            </summary>
        </member>
        <member name="M:Ab3d.Cameras.ThirdPersonCamera.CheckTargetRect3D">
            <summary>
            Checks if TargetRect was changed - in this case update the camera
            </summary>
        </member>
        <member name="P:Ab3d.Cameras.ThirdPersonCamera.CenterObject">
            <summary>
            Gets or sets an object that specifies the 3D object the camera is looking at. CenterObject can be Model3D, Visual3D or UIElement3D.
            </summary>
            <remarks>
            <para>
            To make the camera follow the CenterObject automatically, set the <see cref="P:Ab3d.Cameras.BaseTargetRect3DCamera.IsDynamicTarget"/> property to true.
            </para>
            <note>
            ThirdPersonCamera with set CenterObject cannot be previewed in Visual Studio Designer. The reason for this is that in Designer the NameScope is not defined and therefore the binding to the 3D object does not work.
            </note>
            </remarks>
            <example>
            <para>
            The following sample shows how to define the ThirdPersonCamera and set its CenterObject to PersonModel:
            </para>
            <code lang="xaml">
            &lt;cameras:ThirdPersonCamera Heading="-30" Attitude="-20" Bank="0" Distance="300"
                                       CenterObject="{Binding ElementName=PersonModel}"/&gt;
            </code>
            </example>
        </member>
        <member name="T:Ab3d.Controls.Commands.CameraControllerCommands">
            <summary>
            CameraControllerCommands are commands used by the <see cref="T:Ab3d.Controls.CameraControlPanel"/>.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.Commands.CameraControllerCommands.RotateLeftCommand">
            <summary>
            RotateLeftCommand
            </summary>
        </member>
        <member name="F:Ab3d.Controls.Commands.CameraControllerCommands.RotateRightCommand">
            <summary>
            RotateRightCommand
            </summary>
        </member>
        <member name="F:Ab3d.Controls.Commands.CameraControllerCommands.RotateUpCommand">
            <summary>
            RotateUpCommand
            </summary>
        </member>
        <member name="F:Ab3d.Controls.Commands.CameraControllerCommands.RotateDownCommand">
            <summary>
            RotateDownCommand
            </summary>
        </member>
        <member name="F:Ab3d.Controls.Commands.CameraControllerCommands.MoveForwardCommand">
            <summary>
            MoveForwardCommand
            </summary>
        </member>
        <member name="F:Ab3d.Controls.Commands.CameraControllerCommands.MoveBackCommand">
            <summary>
            MoveBackCommand
            </summary>
        </member>
        <member name="T:Ab3d.Controls.BaseControllerControl">
            <summary>
            BaseControllerControl is a base class for <see cref="T:Ab3d.Controls.CameraControlPanel"/>, <see cref="T:Ab3d.Controls.CameraPreviewPanel"/> and <see cref="T:Ab3d.Controls.MouseCameraController"/>.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.BaseControllerControl.TargetCameraProperty">
            <summary>
            TargetCameraProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.BaseControllerControl.TargetCamera">
            <summary>
            Gets or sets the Ab3d.Camera.
            </summary>
            <remarks>
            <para>
            The TargetCamera can be also set by the <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCameraName"/> property.
            </para>
            <para>
            If TargetCamera and <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCameraName"/> are not set and <see cref="P:Ab3d.Controls.BaseControllerControl.IsAutoCameraFindingEnabled"/> is set to true, the controller try to find the first Ab3d.Camera by looking at controls parents.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Controls.BaseControllerControl.OnTargetCameraChanged(Ab3d.Cameras.BaseCamera,Ab3d.Cameras.BaseCamera)">
            <summary>
            virtual OnTargetCameraChanged
            </summary>
            <param name="oldCamera">oldCamera</param>
            <param name="newCamera">newCamera</param>
        </member>
        <member name="M:Ab3d.Controls.BaseControllerControl.UpdateEnabled">
            <summary>
            virtual UpdateEnabled method checks the Target Camera's IsEnabled property and enable or disable this controller.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.BaseControllerControl.TargetCameraNameProperty">
            <summary>
            TargetCameraNameProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.BaseControllerControl.TargetCameraName">
            <summary>
            Gets or sets the Name of the Ab3d.Camera that is used to define the <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCamera"/> property.
            </summary>
            <remarks>
            <para>
            The TargetCamera can be also set directly by the <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCamera"/> property.
            </para>
            <para>
            If <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCamera"/> and TargetCameraName are not set and <see cref="P:Ab3d.Controls.BaseControllerControl.IsAutoCameraFindingEnabled"/> is set to true, the contoller try to find the first Ab3d.Camera by looking at controls parents.
            </para>
            </remarks>        
        </member>
        <member name="M:Ab3d.Controls.BaseControllerControl.OnTargetCameraNameChanged(System.String,System.String)">
            <summary>
            virtual OnTargetCameraNameChanged
            </summary>
            <param name="oldCameraName">oldCameraName</param>
            <param name="newCameraName">newCameraName</param>
        </member>
        <member name="F:Ab3d.Controls.BaseControllerControl.IsAutoCameraFindingEnabledProperty">
            <summary>
            IsAutoCameraFindingEnabledProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.BaseControllerControl.IsAutoCameraFindingEnabled">
            <summary>
            Gets or sets a value that indicates if the Ab3d.Camera is automatically discovered by scanning the Logical Tree if TargetCameraName or TargetCamera is not set
            </summary>
        </member>
        <member name="M:Ab3d.Controls.BaseControllerControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Ab3d.Controls.CameraControlPanel">
            <summary>
            CameraControlPanel is a predefined control panel that shows buttons to manipulate the Ab3d.Camera.
            </summary>
            <remarks>
            <para>
            The Ab3d.Camera that is controlled by the CameraControlPanel is defined by the <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCamera"/> or <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCameraName"/> properties.
            </para>
            <para>
            If the Ab3d.Camera is not set manually and the <see cref="P:Ab3d.Controls.BaseControllerControl.IsAutoCameraFindingEnabled"/> property is set to true, the contoller try to find the first Ab3d.Camera by looking at controls parents.
            </para>
            <para>
            The amount of the camera change is defined by the following properties:<br/>
            <see cref="P:Ab3d.Controls.CameraControlPanel.RotationChange"/>, <see cref="P:Ab3d.Controls.CameraControlPanel.MoveChangeFactor"/>, <see cref="P:Ab3d.Controls.CameraControlPanel.Interval"/> and <see cref="P:Ab3d.Controls.CameraControlPanel.Delay"/>.
            </para>
            <para>
            It is also possible to control the camera by the <see cref="M:Ab3d.Controls.CameraControlPanel.ChangeCameraDistance(System.Double)"/> and <see cref="M:Ab3d.Controls.CameraControlPanel.RotateCamera(System.Double,System.Double)"/> helper methods.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.rootViewbox">
            <summary>
            rootViewbox control
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.rootStackPanel">
            <summary>
            StackPanel control that hosts all three Canvases
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.moveCanvas">
            <summary>
            Canvas that hosts move buttons
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.rotateCanvas">
            <summary>
            Canvas that hosts rotate buttons
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.zoomCanvas">
            <summary>
            Canvas that hosts zoom buttons
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.rotateUpImage">
            <summary>
            rotate up Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.rotateDownImage">
            <summary>
            rotate down Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.rotateLeftImage">
            <summary>
            rotate left Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.rotateRightImage">
            <summary>
            rotate right Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.moveUpImage">
            <summary>
            move up Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.moveDownImage">
            <summary>
            move down Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.moveLeftImage">
            <summary>
            move left Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.moveRightImage">
            <summary>
            move right Image
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.moveForwardImage">
            <summary>
            forwardImage
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.moveBackImage">
            <summary>
            backImage
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.RotationChangeProperty">
            <summary>
            RotationChangeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraControlPanel.RotationChange">
            <summary>
            Gets or sets the value in degrees that is used on each Change Interval to rotate the camera
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.MoveChangeFactorProperty">
            <summary>
            MoveChangeFactorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraControlPanel.MoveChangeFactor">
            <summary>
            Gets or sets the value that is used on each Change Interval to move the camera forward or backward. The value is multiplied with the current Camera Distance.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.DelayProperty">
            <summary>
            DelayProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraControlPanel.Delay">
            <summary>
            Gets or sets the amount of time, in milliseconds, the buttons on CameraControlPanel
            wait while they begin to repeatedly change the camera.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.IntervalProperty">
            <summary>
            IntervalProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraControlPanel.Interval">
            <summary>
            Gets or sets the amount of time, in milliseconds, between repeats once repeating
            starts.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.ShowMoveButtonsProperty">
            <summary>
            ShowMoveButtonsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraControlPanel.ShowMoveButtons">
            <summary>
            Gets or sets a Boolean that specifies if the move buttons are shown. Default value is false.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.ShowRotateButtonsProperty">
            <summary>
            ShowRotateButtonsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraControlPanel.ShowRotateButtons">
            <summary>
            Gets or sets a Boolean that specifies if the rotate buttons are shown. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraControlPanel.ShowZoomButtonsProperty">
            <summary>
            ShowZoomButtonsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraControlPanel.ShowZoomButtons">
            <summary>
            Gets or sets a Boolean that specifies if the move forward and move backward buttons are shown. Default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.#cctor">
            <summary>
            static Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.ChangeCameraDistance(System.Double)">
            <summary>
            ChangeCameraDistance method change the distance of the TargetCamera by multiplying it by the changeFactor
            </summary>
            <remarks>
            <para>
            <b>ChangeCameraDistance</b> method change the distance of the TargetCamera by multiplying it by the changeFactor.
            </para>
            <para>
            If the type of target camera is OrthographicCamera, than instead of changing the distance the CameraWidth is changed.
            </para>
            </remarks>
            <param name="changeFactor">changeFactor that is multiplied by the current TargetCamera Distance</param>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.RotateCamera(System.Double,System.Double)">
            <summary>
            RotateCamera method rotates the camera for the mouse change defined by headingChange and attitudeChange parameters.
            </summary>
            <param name="headingChange">heading change</param>
            <param name="attitudeChange">attitude change</param>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.MoveCamera(System.Double,System.Double)">
            <summary>
            MoveCamera method moves the camera for the mouse change defined by offsetXChange and offsetYChange parameters.
            </summary>
            <param name="offsetXChange">camera movement in x direction</param>
            <param name="offsetYChange">camera movement in y direction</param>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.SubscribeImageEvents">
            <summary>
            SubscribeImageEvents method subscribes mouse events to Images used in CameraControlPanel
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.UpdateShownButtons">
            <summary>
            UpdateShownButtons method shows or hides the shown buttons based on the ShowMoveButtons, ShowRotateButtons and ShowZoomButtons properties.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            MeasureOverride
            </summary>
            <param name="constraint">Size</param>
            <returns>Size</returns>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.GetSelectedBitmapForImageName(System.String)">
            <summary>
            GetSelectedBitmapForImageName method gets the Selected BitmapSource for the Image with imageName. If null is returned, the original image is not changed.
            </summary>
            <param name="imageName">imageName</param>
            <returns>BitmapSource of the selected image</returns>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.GetUnSelectedBitmapForImageName(System.String)">
            <summary>
            GetUnSelectedBitmapForImageName method gets the Un-Selected BitmapSource for the Image with imageName. If null is returned, the original image is not changed.
            </summary>
            <param name="imageName">imageName</param>
            <returns>BitmapSource of the un-selected image</returns>
        </member>
        <member name="M:Ab3d.Controls.CameraControlPanel.GetImageName(System.String)">
            <summary>
            Gets the name of the image form the image control name
            </summary>
            <param name="imageControlName">imageControlName</param>
            <returns>image name</returns>
        </member>
        <member name="T:Ab3d.Controls.CameraPreviewPanel">
            <summary>
            CameraPreviewPanel is a predefined panel that shows the angle at which the camera is looking at its target object. It is shown as a 3D Camera that looks at a 3D Sphere at the center.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraPreviewPanel.mainViewport3D">
            <summary>
            mainViewport3D
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraPreviewPanel.cameraGroup">
            <summary>
            cameraGroup as Model3DGroup
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraPreviewPanel.centerObjectGroup">
            <summary>
            centerObjectGroup as Model3DGroup
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraPreviewPanel.attitudeCameraRotatation">
            <summary>
            AxisAngleRotation3D used to rotate the camera for the attitude angle
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraPreviewPanel.headingCameraRotatation">
            <summary>
            AxisAngleRotation3D used to rotate the camera for the heading angle
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraPreviewPanel.bankCameraRotatation">
            <summary>
            AxisAngleRotation3D used to rotate the camera for the bank angle
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraPreviewPanel.CenterObjectModel3D">
            <summary>
            Gets or sets Model3D object around which the camera will rotate. By default a yellow sphere is shown.
            </summary>
            <remarks>
            <para>
            The set Model3D is automatically scaled to fit into the CameraPreviewPanel.
            </para>
            <para>
            CameraPreviewPanel does not create a clone of the Model3D set to the CenterObjectModel3D. So if you need to preserve the original object, create a Clone of the Model3D before setting it to the CenterObjectModel3D.
            </para>
            </remarks>        
        </member>
        <member name="M:Ab3d.Controls.CameraPreviewPanel.#cctor">
            <summary>
            static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraPreviewPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraPreviewPanel.OnTargetCameraChanged(Ab3d.Cameras.BaseCamera,Ab3d.Cameras.BaseCamera)">
            <summary>
            OnTargetCameraChanged
            </summary>
            <param name="oldCamera">oldCamera</param>
            <param name="newCamera">newCamera</param>
        </member>
        <member name="M:Ab3d.Controls.CameraPreviewPanel.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="T:Ab3d.Controls.CameraAxisPanel">
            <summary>
            CameraAxisPanel is a predefined panel that shows the axis orientation for the target camera.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.NO_NAMES_AXIS_LENGTH">
            <summary>
            Axis length used when no names is specified
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.NAMES_AXIS_LENGTH">
            <summary>
            Axis length used when no names is specified
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.rootGrid">
            <summary>
            rootGrid
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.axisViewport3D">
            <summary>
            axisViewport3D
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.backCanvas">
            <summary>
            backCanvas - stores TextBlocks with axis names that are behind the axis lines
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.frontCanvas">
            <summary>
            frontCanvas - stores TextBlocks with axis names that are in front the axis lines
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.xAxisNameTextBlock">
            <summary>
            TextBlock that is used to show the name of the X axis
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.yAxisNameTextBlock">
            <summary>
            TextBlock that is used to show the name of the Y axis
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.zAxisNameTextBlock">
            <summary>
            TextBlock that is used to show the name of the Z axis
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.xAxisNamePosition">
            <summary>
            Position of the X axis name. This value can be changed in the overriden EnsureAxisTextBlocks method. Default value is Point3D(NO_NAMES_AXIS_LENGTH, 0, 0).
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.yAxisNamePosition">
            <summary>
            Position of the Y axis name. This value can be changed in the overriden EnsureAxisTextBlocks method. Default value is Point3D(0, NO_NAMES_AXIS_LENGTH 0).
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.zAxisNamePosition">
            <summary>
            Position of the Z axis name. This value can be changed in the overriden EnsureAxisTextBlocks method. Default value is Point3D(0, 0, NO_NAMES_AXIS_LENGTH).
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.coloredAxisVisual3D">
            <summary>
            Visual3D that represents the axis Visual 3D.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.targetPositionCamera">
            <summary>
            camera used to show the axes
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.IsAxisNameShownProperty">
            <summary>
            IsAxisNameShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraAxisPanel.IsAxisNameShown">
            <summary>
            Gets or sets a boolean that specified if the axis names are shown.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.XAxisColorProperty">
            <summary>
            XAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraAxisPanel.XAxisColor">
            <summary>
            Gets or sets the color of X axis.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.YAxisColorProperty">
            <summary>
            YAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraAxisPanel.YAxisColor">
            <summary>
            Gets or sets the color of Y axis.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.ZAxisColorProperty">
            <summary>
            ZAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraAxisPanel.ZAxisColor">
            <summary>
            Gets or sets the color of Z axis.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.CameraAxisPanel.Is3DAxesShownProperty">
            <summary>
            Is3DAxesShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.CameraAxisPanel.Is3DAxesShown">
            <summary>
            Gets or sets a boolean that specifies if 2D arrows (Show3DAxes = false) or 3D arrows are shown (Show3DAxes = true). Default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.#cctor">
            <summary>
            static constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.CustomizeAxes(System.Windows.Media.Media3D.Vector3D,System.String,System.Windows.Media.Color,System.Windows.Media.Media3D.Vector3D,System.String,System.Windows.Media.Color,System.Windows.Media.Media3D.Vector3D,System.String,System.Windows.Media.Color)">
            <summary>
            CustomizeAxes customizes the show axes with specify custom Vector3D, axis name and axis color for each axis.
            </summary>
            <param name="xAxisVector">xAxisVector</param>
            <param name="xAxisName">xAxisName</param>
            <param name="xAxisColor">xAxisColor</param>
            <param name="yAxisVector">yAxisVector</param>
            <param name="yAxisName">yAxisName</param>
            <param name="yAxisColor">yAxisColor</param>
            <param name="zAxisVector">zAxisVector</param>
            <param name="zAxisName">zAxisName</param>
            <param name="zAxisColor">zAxisColor</param>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.OnTargetCameraChanged(Ab3d.Cameras.BaseCamera,Ab3d.Cameras.BaseCamera)">
            <summary>
            OnTargetCameraChanged
            </summary>
            <param name="oldCamera">oldCamera</param>
            <param name="newCamera">newCamera</param>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.SetAxisLength(System.Double)">
            <summary>
            SetAxisLength is called to change the length of the axes.
            </summary>
            <remarks>
            <para>
            SetAxisLength is called when user changes the IsAxisNameShown property. 
            When the names are shown the axes length is set to 25. Otherwise the length is set to 30.
            </para>
            </remarks>
            <param name="axesLength">new axes length</param>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.SetAxisColors(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            SetAxisColors changes the colors of the axes.
            </summary>
            <param name="xAxisColor">color of x axis</param>
            <param name="yAxisColor">color of y axis</param>
            <param name="zAxisColor">color of z axis</param>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.CreateAxisVisual(System.Double)">
            <summary>
            CreateAxisVisual creates a Visual3D that represents the axis 3D model.
            NOTE: When overridden to create custom axis, you also need to override the SetAxisLength method.
            </summary>
            <remarks>
            <para>
            CreateAxisVisual creates a Visual3D that represents the axis 3D model.
            </para>
            <para>
            <b>NOTE: When CreateAxisVisual is overridden to create custom axis, you also need to override the SetAxisLength and SetAxisColors methods.</b>
            </para>
            </remarks>
            <param name="axesLength">initial length of the axis.</param>
            <returns>Visual3D that represents the axis 3D model</returns>
        </member>
        <member name="M:Ab3d.Controls.CameraAxisPanel.CreateOneAxisModel3D(System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Color)">
            <summary>
            CreateOneAxisModel3D creates a Model3D that represents one Axis.
            </summary>
            <param name="arrowVector">arrow as Vector3D</param>
            <param name="axisLength">axis length</param>
            <param name="arrowColor">arrow color</param>
            <returns>Model3D</returns>
        </member>
        <member name="T:Ab3d.Controls.FpsMeter">
            <summary>
            FpsMeter is a simple control that is derived from TextBlock and displays the current frames per second (FPS) value and an average FPS value.
            </summary>
            <remarks>
            <para>
            The FpsMeter is using CompositionTarget.Rendering event to measure the numbers of rendering passes that occur in each second and displays the count as FPS value.
            </para>
            <para>
            When the FpsMeter is not visible any more, the control is unsubscribed from CompositionTarget.Rendering event.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Controls.FpsMeter.TotalFrames">
            <summary>
            number of Frames (rendering passes) from the start of measuring or from last Reset.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.FpsMeter.TotalSeconds">
            <summary>
            number of seconds from the start of measuring or from last Reset.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.FpsMeter.DisplayFormatString">
            <summary>
            Gets or sets the format string that is used to format the FpsMeter results. Default value is "{0} fps; average: {1:0.00} fps"
            </summary>
        </member>
        <member name="M:Ab3d.Controls.FpsMeter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.FpsMeter.Reset">
            <summary>
            Resets the TotalFrames and TotalSeconds properties - and also the average FPS displayed
            </summary>
        </member>
        <member name="T:Ab3d.Controls.KeyboardKey">
            <summary>
            KeyboardKey is a UserControl that shows vector image of a keyboard key with custom KeyText or with shoft arrow.
            </summary>
            <summary>
            KeyboardKey
            </summary>
        </member>
        <member name="P:Ab3d.Controls.KeyboardKey.KeyText">
            <summary>
            Gets or sets a string that is shown in the key.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.KeyboardKey.IsShiftKey">
            <summary>
            Gets or sets a FontFamily of the key text.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.KeyboardKey.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.KeyboardKey.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ab3d.Controls.MouseCameraController">
            <summary>
            MouseCameraController is a helper class that can be used to add mouse rotation and zooming to the Ab3d.Camera.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.subscribedEventsSourceElement">
            <summary>
            FrameworkElement that is used to subscribe to mouse events
            </summary>
        </member>
        <member name="T:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions">
            <summary>
            MouseAndKeyboardConditions enum defines the conditions that can be used to specify what condition must be met to rotate or move the camera.
            </summary>
            <remarks>
            <para>
            MouseAndKeyboardConditions enum defines the conditions that can be used to specify what condition must be met to rotate or move the camera.
            </para>
            <para>
            To specify conditions to rotate the camera use the <see cref="P:Ab3d.Controls.MouseCameraController.RotateCameraConditions"/> property. To specify conditions to move the camera use the <see cref="P:Ab3d.Controls.MouseCameraController.MoveCameraConditions"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.Disabled">
            <summary>
            This action is disabled
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.LeftMouseButtonPressed">
            <summary>
            Left mouse button must be pressed
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.RightMouseButtonPressed">
            <summary>
            Right mouse button must be pressed
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.MiddleMouseButtonPressed">
            <summary>
            Middle mouse button must be pressed
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.ShiftKey">
            <summary>
            Shift key must be pressed
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.AltKey">
            <summary>
            Alt key must be pressed
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.ControlKey">
            <summary>
            Control key must be pressed
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.RotateCursorLeft">
            <summary>
            Gets a predefined cursor that can be used while rotating the camera with the mouse.
            </summary>
            <remarks>
            <para>
            To set the RotateCursorLeft as the used cursor set it to the <see cref="P:Ab3d.Controls.MouseCameraController.RotationCursor"/>.
            </para>
            <note>
            When the application is running on Windows XP or older system, the Cursor class in .Net Framework only support black and white cursor.
            The RotateCursorLeft in case of Windows XP or older system returns a black and white version of the cursor. On Windows Vista and newer system a grayscale version of the cursor is returned.
            </note>
            </remarks>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.RotateCursorRight">
            <summary>
            Gets a predefined cursor that can be used while rotating the camera with the mouse. This is the default cursor that is used by the MouseCameraController.
            </summary>
            <remarks>
            <para>
            To set the RotateCursorRight as the used cursor set it to the <see cref="P:Ab3d.Controls.MouseCameraController.RotationCursor"/>.
            </para>
            <note>
            When the application is running on Windows XP or older system, the Cursor class in .Net Framework only support black and white cursor.
            The RotateCursorRight in case of Windows XP or older system returns a black and white version of the cursor. On Windows Vista and newer system a grayscale version of the cursor is returned.
            </note>
            </remarks>        
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.RotationCursor">
            <summary>
            Gets or sets a Cursor that is used when the mouse is rotating the Ab3d.Camera.
            </summary>
            <remarks>
            By default the <see cref="P:Ab3d.Controls.MouseCameraController.RotateCursorRight"/> is used.
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.EventsSourceElementProperty">
            <summary>
            EventsSourceElementProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.EventsSourceElement">
            <summary>
            Gets or sets the element where the mouse events are subscribed.
            If the property is not set, Viewport3D element on the TargetCamera is used as event source.
            </summary>
            <remarks>
            <para>
            If the property is not set, Viewport3D element on the TargetCamera is used as event source.
            </para>
            <para>
            Note that if <see cref="P:Ab3d.Controls.MouseCameraController.EventsSourceElement"/> property is set to Viewport3D (manually or automatically) the mouse events occur only on the area of Viewport3D that actually shows a content. So mouse events do not happen on the empty area of the Viewport3D. To enable mouse events on the whole area of Viewport3D, add a Grid or Border as a parent of a Viewport3D, set its Background to any Brush - for example White or Transparent and than set the EventsSourceElement or EventsSourceElementName to the added control.
            </para>
            <para>
            To specify the EventsSourceElement by its name use the <see cref="P:Ab3d.Controls.MouseCameraController.EventsSourceElementName"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.EventsSourceElementNameProperty">
            <summary>
            EventsSourceElementNameProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.EventsSourceElementName">
            <summary>
            Gets or sets the name of the element where the mouse events are subscribed.
            </summary>
            <remarks>
            <para>
            Note that if EventsSourceElement property is set to Viewport3D (manually or automatically) the mouse events occur only on the area of Viewport3D that actually shows a content. So mouse events do not happen on the empty area of the Viewport3D. To enable mouse events on the whole area of Viewport3D, add a Grid or Border as a parent of a Viewport3D, set its Background to any Brush - for example White or Transparent and than set the EventsSourceElement or EventsSourceElementName to the added control.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.EventsSourceElementRotationChangeProperty">
            <summary>
            EventsSourceElementRotationChangeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.EventsSourceElementRotationChange">
            <summary>
            Gets or sets the double value that specifies for how many degrees the camera is rotates when the mouse moves from one side of the <see cref="P:Ab3d.Controls.MouseCameraController.EventsSourceElement"/> to another size. The default value is 270.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Ab3d.Controls.MouseCameraController.EventsSourceElement"/> property is not set manually, it is set to the Viewport3D with the <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCameraName"/>.
            </para>
            <para>
            EventsSourceElementRotationChange controls the speed of rotation. Bigger values mean that smaller mouse moves will rotate the camera more. 
            </para>
            <para>
            Note that if <see cref="P:Ab3d.Controls.MouseCameraController.EventsSourceElement"/> property is set to Viewport3D (manually or automatically) the mouse events occur only on the area of Viewport3D that actually shows a content. So mouse events do not happen on the empty area of the Viewport3D. To enable mouse events on the whole area of Viewport3D, set its Background to any Brush - for example White or Transparent. This also applies to any other EventsSourceElement (Grid, Canvas, UserControl) except Window.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.UsedMouseButtonProperty">
            <summary>
            UsedMouseButtonProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.UsedMouseButton">
            <summary>
            Gets or sets a MouseButton that specifies on which mouse button will be used to rotate and move the camera. Default value is Right mouse button.
            </summary>
            <remarks>
            <para>
            <b>UsedMouseButton</b> gets or sets a MouseButton that specifies on which mouse button will be used to rotate and move the camera.
            </para>
            <para>
            The used mouse button is used to <b>rotate</b> the camera.
            When the mouse button is pressed with the <b>ALT</b> key, the camera is <b>moved</b>.
            </para>
            <para>
            Changing the <b>UsedMouseButton</b> actually changes the <see cref="P:Ab3d.Controls.MouseCameraController.RotateCameraConditions"/> and <see cref="P:Ab3d.Controls.MouseCameraController.MoveCameraConditions"/> properties.
            They can be also set manually to assign camera rotation and movement to some other buttons and keyboard modifiers.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsMouseWheelZoomEnabledProperty">
            <summary>
            IsMouseWheelZoomEnabledProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsMouseWheelZoomEnabled">
            <summary>
            Gets or sets if zooming (moving camera forward and backward) by mouse wheel is enabled
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsRotationDirectionAdjustedProperty">
            <summary>
            IsRotationDirectionAdjustedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsRotationDirectionAdjusted">
            <summary>
            Gets or sets Boolean that specifies if rotation direction is based on current mouse position and attitude angle.
            When false (by default), moving the mouse to the right always increases the heading regardless of mouse position and attitude angle.
            When true, the rotation direction is based on the current mouse position in the 3D scene and current attitude angle.
            </summary>
            <remarks>
            <para>
            <b>IsRotationDirectionAdjusted</b> gets or sets Boolean that specifies if rotation direction is based on current mouse position and attitude angle.
            </para>
            <para>
            When IsRotationDirectionAdjusted is false (by default), moving the mouse to the right always increases the heading regardless of mouse position and attitude angle.
            When true, the rotation direction is based on the current mouse position in the 3D scene and current attitude angle.
            </para>
            <para>
            For examples:<br/>
            Center of rotation is in the middle of the window and your camera has Attitude set to -30 (looking slightly down to the object):<br/>
            If you drag the mouse below the center of the window from left to right, the Heading of the camera will increase to move the rotated objects into the same direction as the mouse is moved.<br/>
            If you do the same mouse drag but this time above the center of the window, the Heading will decrease (though you are dragging from left to right) - this will move the rotated objects into the correct direction.
            </para>
            <para>
            If Attitude is set to angles between 0 to 180 degrees, the Heading change must be revered to presere the "correct" object rotation.
            </para>
            <para>
            When IsRotationDirectionAdjusted is set to false, the Heading always increases when mouse is moved from left to right (regardlees of Attitude and mouse position).
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsYAxisInvertedProperty">
            <summary>
            IsYAxisInvertedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsYAxisInverted">
            <summary>
            Gets or sets if y axis (attitude) is inverted. Default value is false.
            </summary>
            <remarks>
            <para>
            By default (IsYAxisInverted == false) moving the mouse up decreases the camera's attitude which rotates the camera down.
            </para>
            <para>
            If IsYAxisInverted is true moving the mouse up increases the camera's attitude which rotates the camera up.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsRotateCursorShownOnMouseOverProperty">
            <summary>
            IsRotateCursorShownOnMouseOverProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsRotateCursorShownOnMouseOver">
            <summary>
            Gets or sets a boolean that specifies if RotationCursor is shown if UsedMouseButton is set to Left and mouse is over the EventsSourceElement. Default value is true.
            </summary>
            <remarks>
            <para>
            <see cref="P:Ab3d.Controls.MouseCameraController.RotationCursor"/> is always shown when the camera is rotated with MouseCameraController.
            </para>
            <para>
            If IsRotateCursorShownOnMouseOver is set to true, the <see cref="P:Ab3d.Controls.MouseCameraController.RotationCursor"/> is shown also when the mouse is over the <see cref="P:Ab3d.Controls.MouseCameraController.EventsSourceElement"/> and the <see cref="P:Ab3d.Controls.MouseCameraController.UsedMouseButton"/> is set to Left. This way the cursor shows that the default mouse button (Left) will rotate the camera.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.RotateCameraConditionsProperty">
            <summary>
            RotateCameraConditionsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.RotateCameraConditions">
            <summary>
            Gets or sets conditions from MouseAndKeyboardConditions enum that must be met to rotate the camera. Default value is MouseAndKeyboardConditions.RightMouseButtonPressed.
            </summary>
            <remarks>
            <para>
            <b>RotateCameraConditions</b> gets or sets conditions from <see cref="T:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions"/> enum that must be met to rotate the camera.
            </para>
            <para>
            The most common scenarios can be set by <see cref="P:Ab3d.Controls.MouseCameraController.UsedMouseButton"/> property where only mouse button (Left, Middle, Right) is specified.
            The specified button is than used to rotate the camera. When the button is used with ALT key the camera is moved.
            When other scenarios need to be used, set the <b>RotateCameraConditions</b> to fine tune the conditions to rotate the camera.
            </para>        
            <para>
            To specify which <b>mouse button</b> is used for rotation set <b>RotateCameraConditions</b> to <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.LeftMouseButtonPressed">MouseAndKeyboardConditions.LeftMouseButtonPressed</see>, <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.RightMouseButtonPressed">MouseAndKeyboardConditions.RightMouseButtonPressed</see> or <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.MiddleMouseButtonPressed">MouseAndKeyboardConditions.MiddleMouseButtonPressed</see>.
            </para>
            <para>
            To specify that a special modifier key must be also pressed, one of the following conditions can be added (with or operator) to the <b>RotateCameraConditions</b>: <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.ShiftKey">MouseAndKeyboardConditions.ShiftKey</see>, <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.AltKey">MouseAndKeyboardConditions.AltKey</see> or <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.ControlKey">MouseAndKeyboardConditions.ControlKey</see>.
            </para>
            <para>
            To <b>disable</b> the camera rotation set <b>RotateCameraConditions</b> to <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.Disabled">MouseAndKeyboardConditions.Disabled</see>.
            </para>
            <para>
            Default value of <b>RotateCameraConditions</b> is MouseAndKeyboardConditions.RightMouseButtonPressed.
            </para>
            <para>
            To specify conditions to <b>move</b> the camera use <see cref="P:Ab3d.Controls.MouseCameraController.MoveCameraConditions"/> property.
            </para>
            </remarks>
            <example>
            <para>
            The following code sets the mouse camera controller to rotate the mouse with pressed left mouse button and to move the camera with pressed left mouse button and alt key.
            Note that the setting enums that are marked with Flags attribute in XAML can be done with adding comma between values (there are some problems with Visual Studio IntelliSence but it works).
            </para>
            <code lang="xaml">
            &lt;Page x:Class="PowerToysSamples"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
                xmlns:ab3dControls="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
                xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"&gt;
                &lt;Grid&gt;
                    &lt;Viewport3D&gt;
                        &lt;visuals:PyramidVisual3D BottomCenterPosition="0 0 30" Size="20 20 20"
                                                       Material="Green"/&gt;
                    &lt;/Viewport3D&gt;
                    
                    &lt;cameras:SceneCamera Heading="30" Attitude="-20" 
                                               Distance="2" IsDistancePercent="True"/&gt;
                    
                    &lt;ab3dControls:MouseCameraController x:Name="MouseCameraController1" 
                                          RotateCameraConditions="LeftMouseButtonPressed"
                                          MoveCameraConditions="LeftMouseButtonPressed, AltKey"/&gt;
                &lt;/Grid&gt;
            &lt;/Page&gt;    
            </code>
            <para>
            The same conditions can be also set in code:
            </para>
            <code>
            MouseCameraController1.RotateCameraConditions = LeftMouseButtonPressed;
            MouseCameraController1.MoveCameraConditions = LeftMouseButtonPressed | AltKey;
            </code>
            </example>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MoveCameraConditionsProperty">
            <summary>
            MoveCameraConditionsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.MoveCameraConditions">
            <summary>
            Gets or sets conditions from MouseAndKeyboardConditions enum that must be met to move the camera. Default value is MouseAndKeyboardConditions.RightMouseButtonPressed and MouseAndKeyboardConditions.AltKey.
            </summary>
            <remarks>
            <para>
            <b>MoveCameraConditions</b> gets or sets conditions from <see cref="T:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions"/> enum that must be met to <b>move</b> the camera.
            </para>
            <para>
            The most common scenarios can be set by <see cref="P:Ab3d.Controls.MouseCameraController.UsedMouseButton"/> property where only mouse button (Left, Middle, Right) is specified.
            The specified button is than used to rotate the camera. When the button is used with ALT key the camera is moved.
            When other scenarios need to be used, set the <b>MoveCameraConditions</b> to fine tune the conditions to move the camera.
            </para>
            <para>
            To specify which <b>mouse button</b> is used to move the camera set <b>MoveCameraConditions</b> to <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.LeftMouseButtonPressed">MouseAndKeyboardConditions.LeftMouseButtonPressed</see>, <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.RightMouseButtonPressed">MouseAndKeyboardConditions.RightMouseButtonPressed</see> or <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.MiddleMouseButtonPressed">MouseAndKeyboardConditions.MiddleMouseButtonPressed</see>.
            </para>
            <para>
            To specify that a special modifier key must be also pressed, one of the following conditions can be added (with or operator) to the <b>MoveCameraConditions</b>: <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.ShiftKey">MouseAndKeyboardConditions.ShiftKey</see>, <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.AltKey">MouseAndKeyboardConditions.AltKey</see> or <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.ControlKey">MouseAndKeyboardConditions.ControlKey</see>.
            </para>
            <para>
            To <b>disable</b> the camera movement set <b>MoveCameraConditions</b> to <see cref="F:Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions.Disabled">MouseAndKeyboardConditions.Disabled</see>.
            </para>
            <para>
            Default value of <b>MoveCameraConditions</b> is MouseAndKeyboardConditions.RightMouseButtonPressed and MouseAndKeyboardConditions.AltKey (in csharp: MouseAndKeyboardConditions.LeftMouseButtonPressed | MouseAndKeyboardConditions.AltKey).
            </para>
            <para>
            To specify conditions to <b>rotate</b> the camera use <see cref="P:Ab3d.Controls.MouseCameraController.RotateCameraConditions"/> property.
            </para>        
            </remarks>
            <example>
            <para>
            The following code sets the mouse camera controller to rotate the mouse with pressed left mouse button and to move the camera with pressed left mouse button and alt key.
            Note that the setting enums that are marked with Flags attribute in XAML can be done with adding comma between values (there are some problems with Visual Studio IntelliSence but it works).
            </para>
            <code lang="xaml">
            &lt;Page x:Class="PowerToysSamples"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
                xmlns:ab3dControls="clr-namespace:Ab3d.Controls;assembly=Ab3d.PowerToys"  
                xmlns:cameras="clr-namespace:Ab3d.Cameras;assembly=Ab3d.PowerToys"&gt;
                &lt;Grid&gt;
                    &lt;Viewport3D&gt;
                        &lt;visuals:PyramidVisual3D BottomCenterPosition="0 0 30" Size="20 20 20"
                                                       Material="Green"/&gt;
                    &lt;/Viewport3D&gt;
                    
                    &lt;cameras:SceneCamera Heading="30" Attitude="-20" 
                                               Distance="2" IsDistancePercent="True"/&gt;
                    
                    &lt;ab3dControls:MouseCameraController x:Name="MouseCameraController1" 
                                          RotateCameraConditions="LeftMouseButtonPressed"
                                          MoveCameraConditions="LeftMouseButtonPressed, AltKey"/&gt;
                &lt;/Grid&gt;
            &lt;/Page&gt;    
            </code>
            <para>
            The same conditions can be also set in code:
            </para>
            <code>
            MouseCameraController1.RotateCameraConditions = LeftMouseButtonPressed;
            MouseCameraController1.MoveCameraConditions = LeftMouseButtonPressed | AltKey;
            </code>
            </example>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.RotationInertiaRatio">
            <summary>
            Gets or sets a double that specifies how strong the camera rotation inertial is. 
            When set to 0 (or negative value), camera does not have any inertia.
            Default value is 1. Values bigger than 1, increase the time it takes to stop the camera.
            </summary>
            <remarks>
            <para>
            <b>RotationInertiaRatio</b> bets or sets a double that specifies how strong the camera rotation inertial is. 
            When set to 0, camera does not have any inertia.
            Default value is 1. Values bigger than 1 increase the time it takes to stop the camera.
            </para>
            <para>
            The RotationInertiaRatio value is used in the following way:<br/>
            Number 1000 is divided by RotationInertiaRatio to get the deceleration speed - number of degrees the velocity will change per one second (if no easing function would be used).
            This number is than used to call the camera's <see cref="M:Ab3d.Cameras.BaseCamera.StopRotation(System.Double,Ab3d.Cameras.BaseCamera.EasingFunctionDelegate)"/> method.
            </para>
            <para>
            The actual deceleration of rotation speed is also determined by the <b>easing function</b>.
            By default a simple cubic easing function is used (y = (x - 1) * (x - 1) * (x - 1) + 1).
            The function can be changed (or set to null) by changing the <see cref="P:Ab3d.Controls.MouseCameraController.RotationEasingFunction"/> delegate.
            </para>
            <para>
            For example the <see cref="T:Ab3d.Controls.MouseCameraController"/> is using the following cubic function to ease the camera rotation inertia:
            </para>
            <code>
            public static double CubicEaseOut(double x)
            {
                return (x - 1) * (x - 1) * (x - 1) + 1;
            }
            </code>  
            </remarks>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.RotationEasingFunction">
            <summary>
            Gets or sets a delegate that specifies the easing functions used to calculate the rotation inertia.
            </summary>
            <remarks>
            <para>
            <b>RotationEasingFunction</b> gets or sets a delegate that specifies the easing functions used to calculate the rotation inertia.
            </para>
            <para>
            For example the <see cref="T:Ab3d.Controls.MouseCameraController"/> is using the following cubic function to ease the camera rotation inertia:
            </para>
            <code>
            public static double CubicEaseOut(double x)
            {
                return (x - 1) * (x - 1) * (x - 1) + 1;
            }
            </code>         
            <para>
            The major property to control the rotation inertia is <see cref="P:Ab3d.Controls.MouseCameraController.RotationInertiaRatio"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsTouchZoomEnabledProperty">
            <summary>
            IsTouchZoomEnabledProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsTouchZoomEnabled">
            <summary>
            Gets or sets a boolean that specifies if zooming the camera with multi-touch pinch is enabled (requires .Net 4 version of Ab3d.PowerToys to work). Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsTouchRotateEnabledProperty">
            <summary>
            IsTouchRotateEnabledProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsTouchRotateEnabled">
            <summary>
            Gets or sets a boolean that specifies if rotating the camera with touch is enabled (requires .Net 4 version of Ab3d.PowerToys to work). Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsTouchRotateEnabled</b> gets or sets a boolean that specified if rotating the camera with touch is enabled. Default value is true.
            </para>
            <para>
            Please note that setting IsTouchRotateEnabled to true, does not automatically sets the <see cref="P:Ab3d.Controls.MouseCameraController.IsTouchMoveEnabled"/> to false.
            This must be done manually to prevent moving and rotating simultaneously.
            </para>
            </remarks>        
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsTouchMoveEnabledProperty">
            <summary>
            IsMoveEnabledProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsTouchMoveEnabled">
            <summary>
            Gets or sets a boolean that specifies if moving the camera with touch is enabled (requires .Net 4 version of Ab3d.PowerToys to work). Default value is false.
            </summary>
            <remarks>
            <para>
            <b>IsTouchMoveEnabled</b> gets or sets a boolean that specified if moving the camera with touch is enabled. Default value is false.
            </para>
            <para>
            Please note that setting IsTouchMoveEnabled to true, does not automatically sets the <see cref="P:Ab3d.Controls.MouseCameraController.IsTouchRotateEnabled"/> to false.
            This must be done manually to prevent moving and rotating simultaneously.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.IsConcurrentTouchZoomEnabledProperty">
            <summary>
            IsConcurrentTouchZoomEnabledProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsConcurrentTouchZoomEnabled">
            <summary>
            Gets or sets a boolean that specifies if scaling with pinch while rotating the camera with touch is enabled (requires .Net 4 version of Ab3d.PowerToys to work). Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.IsTouchEnabled">
            <summary>
            Gets a boolean that specifes if any of IsTouchRotateEnabled or IsTouchMoveEnabled or IsTouchZoomEnabled is enabled.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraController.MoveOnlyHorizontallyProperty">
            <summary>
            MoveOnlyHorizontallyProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraController.MoveOnlyHorizontally">
            <summary>
            When true he camera moving is restricted only to horizontal (XZ) plane. This means that the camera cannot be moved up and down. 
            Default value is false that moves the camera based on the current look and up direction.
            </summary>
            <remarks>
            <para>
            When <b>MoveOnlyHorizontally</b> is true he camera moving is restricted only to horizontal (XZ) plane. This means that the camera cannot be moved up and down. 
            </para>
            <para>
            Default value is false that moves the camera based on the current look and up direction.
            </para>
            <para>
            By default the camera movement is not not restricted. 
            This can move the center of rotation out of the XZ plane. When camera is then rotation, it could appear as the camera is rotated around some unexpected center of camera rotation (especially if all the objects lie on the same horizontal plane, but the center of camera rotation is above all the objects).
            </para>
            </remarks>
        </member>
        <member name="E:Ab3d.Controls.MouseCameraController.CameraRotateStarted">
            <summary>
            CameraRotateStarted is fired when the camera rotation is started.
            </summary>
        </member>
        <member name="E:Ab3d.Controls.MouseCameraController.CameraRotateEnded">
            <summary>
            CameraRotateEnded is fired when the camera rotation has ended.
            </summary>
        </member>
        <member name="E:Ab3d.Controls.MouseCameraController.CameraMoveStarted">
            <summary>
            CameraMoveStarted is fired when the camera movement is started.
            </summary>
        </member>
        <member name="E:Ab3d.Controls.MouseCameraController.CameraMoveEnded">
            <summary>
            CameraMoveEnded is fired when the camera movement has ended.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.ChangeCameraDistance(System.Double)">
            <summary>
            ChangeCameraDistance method change the distance of the TargetCamera by multiplying it by the changeFactor.
            </summary>
            <remarks>
            <para>
            <b>ChangeCameraDistance</b> method change the distance of the TargetCamera by multiplying it by the changeFactor.
            </para>
            <para>
            If the type of target camera is OrthographicCamera, than instead of changing the distance the CameraWidth is changed.
            </para>
            </remarks>
            <param name="changeFactor">changeFactor that is multiplied by the current TargetCamera Distance</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.ProcessMouseMove(System.Double,System.Double,System.Windows.Input.MouseEventArgs)">
            <summary>
            ProcessMouseMove handles mouse moves and calls the RotateCamera or the MoveCamera method based on the MouseCameraController settings and pressed modifier keys. 
            The method can be overridden to move the camera based on some custom logic.
            </summary>
            <param name="mouseDx">mouse change of the x coordinate</param>
            <param name="mouseDy">mouse change of the y coordinate</param>
            <param name="mouseEventArgs">System.Windows.Input.MouseEventArgs get from MouseMove event</param>
            <returns>true if the mouse move was processed</returns>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.RotateCamera(System.Double,System.Double)">
            <summary>
            RotateCamera method rotates the camera for the mouse change defined by mouseDx and mouseDy parameters.
            </summary>
            <param name="mouseDx">mouse change of the x coordinate</param>
            <param name="mouseDy">mouse change of the y coordinate</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.MoveCamera(System.Double,System.Double)">
            <summary>
            Moves the camera for the mouse change defined by mouseDx and mouseDy parameters.
            </summary>
            <param name="mouseDx">mouse change of the x coordinate</param>
            <param name="mouseDy">mouse change of the y coordinate</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.LoadRotateCursor(System.String)">
            <summary>
            LoadRotateCursor loads the rotate cursor from assembly resources
            </summary>
            <param name="cursorName">cursorName in resources</param>
            <returns>rotate cursor</returns>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.SubscribeEvents(System.Windows.FrameworkElement)">
            <summary>
            SubscribeEvents method subscribe mouse events to the newEventsSourceElement. The method can be overridden.
            </summary>
            <param name="newEventsSourceElement">new EventsSourceElement as FrameworkElement</param>
            <remarks>
            <para>
            <b>SubscribeEvents</b> method subscribe mouse events to the newEventsSourceElement.
            </para>
            <para>
            When overriding the method please call the base method. Also do not forget to override the <see cref="M:Ab3d.Controls.MouseCameraController.UnsubscribeEvents"/> method to unsubscribe from the events.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.UnsubscribeEvents">
            <summary>
            UnsubscribeEvents unsubscribes from the mouse events on the subscribedEventsSourceElement.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.StartMouseProcessing(System.Windows.Point)">
            <summary>
            StartMouseProcessing is called when the correct mouse button and keyboard is pressed to start rotating or moving the camera.
            </summary>
            <param name="mousePosition">mousePosition</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.EndMouseProcessing">
            <summary>
            EndMouseProcessing is called when the mouse button that started rotation or movement is released.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.GetManipulationActions(System.Windows.Input.ManipulationDeltaEventArgs,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            GetManipulationActions method gets the ManipulationDeltaEventArgs and based on that sets which actions should be performed by MouseCameraController.
            This method can be overridden to specify custom behavior with touch events.
            </summary>
            <param name="manipulationDeltaEventArgs">ManipulationDeltaEventArgs</param>
            <param name="isRotating">isRotating</param>
            <param name="isMoving">isMoving</param>
            <param name="isZooming">isZooming</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.OnManipulationDelta(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            OnManipulationDelta handles the manipulation events. The method can be overriden.
            </summary>
            <param name="sender">sender</param>
            <param name="e">ManipulationDeltaEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.OnManipulationStarted(System.Object,System.Windows.Input.ManipulationStartedEventArgs)">
            <summary>
            OnManipulationStarted is called when the touch event is started.
            Users can override the method but it is highly recommended to call this method from the overriden method.
            </summary>
            <param name="sender">sender</param>
            <param name="e">ManipulationStartedEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.OnManipulationCompleted(System.Object,System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            OnManipulationCompleted is called when touch event is completed. This method starts rotation easing or resumes the suspended camera rotation.
            Users can override the method but it is highly recommended to call this method from the overriden method.
            </summary>
            <param name="sender">sender</param>
            <param name="e">ManipulationCompletedEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.GetIsHeadingAngleChangeInverted(System.Windows.Point)">
            <summary>
            GetIsHeadingAngleChangeInverted returns true if mouse position is in such location that we need to invert the heading rotation direction.
            </summary>
            <param name="mousePosition">mousePosition</param>
            <returns>true if mouse position is in such location that we need to invert the heading rotation direction</returns>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.UpdateEnabled">
            <summary>
            UpdateEnabled method checks the Target Camera's IsEnabled property and enable or disable this controller.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.OnCameraRotateStarted">
            <summary>
            Fires OnCameraRotateStarted event
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.OnCameraRotateEnded">
            <summary>
            Fires CameraRotateEnded event
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.OnCameraMoveStarted">
            <summary>
            Fires CameraMoveStarted event
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.OnCameraMoveEnded">
            <summary>
            Fires CameraMoveEnded event
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.QuadraticEaseOut(System.Double)">
            <summary>
            Simple quadratic easing function used to decelerate the rotation: y = -1 * x * x + 2 * x
            </summary>
            <param name="x">original value in range from 0 to 1</param>
            <returns>eased value</returns>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraController.CubicEaseOut(System.Double)">
            <summary>
            Simple cubic easing function used to decelerate the rotation: y = (x - 1) * (x - 1) * (x - 1) + 1x
            </summary>
            <param name="x">original value in range from 0 to 1</param>
            <returns>eased value</returns>
        </member>
        <member name="T:Ab3d.Controls.MouseCameraControllerInfo">
            <summary>
            MouseCameraControllerInfo shows images of keyboard and mouse button that describe how user can rotate and move the camera.
            </summary>
            <remarks>
            <para>
            <b>MouseCameraControllerInfo</b> shows images of keyboard and mouse button that describe how user can rotate and move the camera.
            </para>
            <para>
            It is also possible to show custom text with custom mouse and keyboard icon with <see cref="M:Ab3d.Controls.MouseCameraControllerInfo.AddCustomInfoLine(System.Int32,Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions,System.String)" /> method.
            </para>
            <para>
            The MouseCameraControllerInfo is using <see cref="T:Ab3d.Controls.MouseWithButtons"/> and <see cref="T:Ab3d.Controls.KeyboardKey"/> UserControls to show keyboard and mouse.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.CtrlText">
            <summary>
            Gets or sets a text that is displayed for Control key. Default value is "Ctrl". After changing the value you may need to call Update method.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.AltText">
            <summary>
            Gets or sets a text that is displayed for Alt key. Default value is "Alt". After changing the value you may need to call Update method.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.RotateCameraText">
            <summary>
            Gets or sets a text that is displayed for "Rotate camera". After changing the value you may need to call Update method.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.MoveCameraText">
            <summary>
            Gets or sets a text that is displayed for "Move camera". After changing the value you may need to call Update method.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.ShowRotateInfo">
            <summary>
            Gets or sets a Boolean that specifies if information on how to rotate the camera is shown.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraControllerInfo.ShowRotateInfoProperty">
            <summary>
            ShowRotateInfoProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.ShowMoveInfo">
            <summary>
            Gets or sets a Boolean that specifies if information on how to move the camera is shown.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraControllerInfo.ShowMoveInfoProperty">
            <summary>
            ShowMoveInfoProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.FontSize">
            <summary>
            Gets or sets a Boolean that specifies the size of the info text.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraControllerInfo.FontSizeProperty">
            <summary>
            FontSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.FontWeight">
            <summary>
            Gets or sets a font weight
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraControllerInfo.FontWeightProperty">
            <summary>
            FontWeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.Foreground">
            <summary>
            Gets or sets a Boolean that a brush that is used to color the text.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraControllerInfo.ForegroundProperty">
            <summary>
            ForegroundProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseCameraControllerInfo.MouseCameraController">
            <summary>
            Gets or sets a Boolean that a brush that is used to color the text.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseCameraControllerInfo.MouseCameraControllerProperty">
            <summary>
            MouseCameraControllerProperty
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraControllerInfo.#ctor">
            <summary>
            Initializes a new instance of MouseCameraControllerInfo.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraControllerInfo.Update">
            <summary>
            Updates the drawn controls
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraControllerInfo.AddCustomInfoLine(System.Int32,Ab3d.Controls.MouseCameraController.MouseAndKeyboardConditions,System.String)">
            <summary>
            AddCustomInfoLine adds custom message with keyboard and mouse button icon to the existing mouse controller info.
            </summary>
            <param name="insertRowIndex">index of the inserted row at the time of insertion</param>
            <param name="mouseAndKeyboardIcons">keyboard and mouse icons</param>
            <param name="message">text to display</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraControllerInfo.ClearCustomInfoLines">
            <summary>
            ClearCustomInfoLines removes all custom messages
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraControllerInfo.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.MouseCameraControllerInfo.OnMouseCameraControllerPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="T:Ab3d.Controls.MouseWithButtons">
            <summary>
            MouseWithButtons shows mouse with buttons as a vector drawing. It is possible to specify which buttons are presses and colors of the mouse.
            </summary>
            <summary>
            MouseWithButtons
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseWithButtons.IsLeftButtonPressed">
            <summary>
            Gets or sets a Boolean that specifies if left button is shown as pressed.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseWithButtons.IsLeftButtonPressedProperty">
            <summary>
            IsLeftButtonPressedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseWithButtons.IsRightButtonPressed">
            <summary>
            Gets or sets a Boolean that specifies if right button is shown as pressed.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseWithButtons.IsRightButtonPressedProperty">
            <summary>
            IsRightButtonPressedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseWithButtons.IsMiddleButtonPressed">
            <summary>
            Gets or sets a Boolean that specifies if middle button is shown as pressed.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseWithButtons.IsMiddleButtonPressedProperty">
            <summary>
            IsMiddleButtonPressedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseWithButtons.IsMiddleButtonShown">
            <summary>
            Gets or sets a Boolean that specifies if middle button is shown on the mouse.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.MouseWithButtons.IsMiddleButtonShownProperty">
            <summary>
            IsMiddleButtonShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseWithButtons.PressedButtonBrush">
            <summary>
            Gets or sets a Brush that specifies how a pressed button is shown. Default value is Red brush.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseWithButtons.ReleasedButtonBrush">
            <summary>
            Gets or sets a Brush that specifies how the a released button is shown. Default value is DarkGray brush.
            </summary>
        </member>
        <member name="P:Ab3d.Controls.MouseWithButtons.OutlineButtonBrush">
            <summary>
            Gets or sets a Brush that specifies how the mouse outlines are shown. Default value is Black brush.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseWithButtons.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.MouseWithButtons.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ab3d.Controls.ViewCubeCameraController">
            <summary>
            ViewCubeCameraController is a camera controller that shows a 3D Cube and a rotation circle and can be used to rotate the camera.
            </summary>
            <remarks>
            <para>
            <b>ViewCubeCameraController</b> is a camera controller that shows a 3D Cube and a rotation circle.
            </para>
            <para>
            The 3D cube shows the orientation of the camera specified with the <see cref="P:Ab3d.Controls.BaseControllerControl.TargetCamera"/> property.
            It can be also used to rotate the camera with dragging the cube mode.
            It is also possible to click on any cube's face - this will rotate the camera to show the scene from the selected face's direction.
            </para>
            <para>
            With the rotation circle around the cube it is possible to rotate the camera only around Y axis (changing the Heading property of the camera).
            </para>
            <para>
            The default width and height of the cube is 100. This can be changed with changing the Width or Height property.
            </para>
            <para>
            The appearance of the ViewCubeCameraController can be also changed by setting the Foreground, Background, BorderBrush or BorderThickness properties.
            Changing Foreground brush changes the material color used for cube and rotation circle (except when custom bitmaps are used - see below).
            </para>
            <para>
            When user moves mouse over the cube or rotation circle, the mouse cursor is by default changed to the Hand cursor. This can be changed by the <see cref="P:Ab3d.Controls.ViewCubeCameraController.SelectionCursor"/> property.
            </para>
            <para>
            By default the ViewCubeCameraController shows the cube textures that contain english texts for the sides of the cube.
            It is possible to define custom textures with calling the <see cref="M:Ab3d.Controls.ViewCubeCameraController.SetViewCubeBitmaps(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource)"/> method that takes one BitmapSource object for each cube face.
            </para>
            <para>
            The ViewCubeCameraController class provides a static <see cref="M:Ab3d.Controls.ViewCubeCameraController.RenderViewCubeBitmap(System.String,System.Int32,System.Windows.Media.Color,System.Windows.Media.Brush,System.Windows.Media.Brush)"/> method that can be used to create the bitmaps for the cube.
            The created bitmaps are 128 x 128 pixels big. 
            The following code is used to create and set the default bitmaps:
            </para>
            <example>
            var textColor = Color.FromRgb(40, 40, 40);
            var borderBrush = new SolidColorBrush(Color.FromRgb(40, 40, 40));
            var backgroundBrush = this.Foreground;
            int fontSize = 27;
            
            SetViewCubeBitmaps(RenderViewCubeBitmap("RIGHT",  fontSize, textColor, borderBrush, backgroundBrush),
                               RenderViewCubeBitmap("LEFT",   fontSize, textColor, borderBrush, backgroundBrush),
                               RenderViewCubeBitmap("TOP",    fontSize, textColor, borderBrush, backgroundBrush),
                               RenderViewCubeBitmap("BOTTOM", fontSize, textColor, borderBrush, backgroundBrush),
                               RenderViewCubeBitmap("FRONT",  fontSize, textColor, borderBrush, backgroundBrush),
                               RenderViewCubeBitmap("BACK",   fontSize, textColor, borderBrush, backgroundBrush));
            </example>
            <para>
            If you want customize the creation of the bitmaps, you can use some third party drawing application or change the source of the RenderViewCubeBitmap method - the full source code is available with the ViewBoxCameraControllerSample.xaml.cs file that comes with the sample projects.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Controls.ViewCubeCameraController.rootBorder">
            <summary>
            Border used to contain the Viewport3D
            </summary>
        </member>
        <member name="F:Ab3d.Controls.ViewCubeCameraController.rootViewport3D">
            <summary>
            Viewport3D that contains the 3D models.
            </summary>
        </member>
        <member name="F:Ab3d.Controls.ViewCubeCameraController.targetPositionCamera">
            <summary>
            TargetPositionCamera for the rootViewport3D
            </summary>
        </member>
        <member name="P:Ab3d.Controls.ViewCubeCameraController.SelectionCursor">
            <summary>
            Gets or sets a cursor that is shown when mouse is over the cube or rotation circle model.
            </summary>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.#cctor">
            <summary>
            static Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.OnForegroundPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ForegroundProperty is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.OnBackgroundPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when BackgroundProperty is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.OnBorderBrushPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when BorderBrushProperty is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.OnBorderThicknessPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when BorderThicknessProperty is changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.RenderViewCubeBitmap(System.String,System.Int32,System.Windows.Media.Color,System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Renders the specified text to a 128 x 128 texture that can be used for a face on the ViewCube.
            </summary>
            <param name="text">text</param>
            <param name="fontSize">size of the text</param>
            <param name="textColor">color of the text</param>
            <param name="borderBrush">brush of the border</param>
            <param name="backgroundBrush">background brush</param>
            <returns>BitmapSource that can be used for a face on the ViewCube</returns>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.SetViewCubeBitmaps(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            SetViewCubeBitmaps sets the Bitmaps to the faces of the 3D cube.
            </summary>
            <param name="rightBitmap">right Bitmap</param>
            <param name="leftBitmap">left Bitmap</param>
            <param name="topBitmap">top Bitmap</param>
            <param name="bottomBitmap">bottom Bitmap</param>
            <param name="frontBitmap">front Bitmap</param>
            <param name="backBitmap">back Bitmap</param>
        </member>
        <member name="M:Ab3d.Controls.ViewCubeCameraController.OnTargetCameraChanged(Ab3d.Cameras.BaseCamera,Ab3d.Cameras.BaseCamera)">
            <summary>
            OnTargetCameraChanged
            </summary>
            <param name="oldCamera">oldCamera</param>
            <param name="newCamera">newCamera</param>
        </member>
        <member name="T:Ab3d.PowerToys.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ab3d.PowerToys.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ab3d.PowerToys.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Ab3d.Common.Cameras.CameraChangedRoutedEventArgs">
            <summary>
            Routed event args used to notify that the current camera has changed
            </summary>
        </member>
        <member name="P:Ab3d.Common.Cameras.CameraChangedRoutedEventArgs.ChangedWpfCamera">
            <summary>
            Changed WPF Camera in Viewport3D
            </summary>
        </member>
        <member name="P:Ab3d.Common.Cameras.CameraChangedRoutedEventArgs.ChangedCamera">
            <summary>
            Changed Ab3d.Camera
            </summary>
        </member>
        <member name="M:Ab3d.Common.Cameras.CameraChangedRoutedEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Common.Cameras.CameraChangedRoutedEventArgs.#ctor(Ab3d.Cameras.BaseCamera,System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Constructor
            </summary>
            <param name="changedCamera">Changed Ab3d.Camera</param>
            <param name="changedWpfCamera">Changed WPF Camera in Viewport3D</param>
        </member>
        <member name="M:Ab3d.Common.Cameras.CameraChangedRoutedEventArgs.#ctor(System.Object,Ab3d.Cameras.BaseCamera,System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Constructor
            </summary>
            <param name="source">source</param>
            <param name="changedCamera">Changed Ab3d.Camera</param>
            <param name="changedWpfCamera">Changed WPF Camera in Viewport3D</param>
        </member>
        <member name="T:Ab3d.Common.Cameras.PreviewCameraChangedRoutedEventArgs">
            <summary>
            Routed event args used to preview the changed camera property. Setting Handled to true prevents the change.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Cameras.PreviewCameraChangedRoutedEventArgs.NewValue">
            <summary>
            Gets the value of the property after the change.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Cameras.PreviewCameraChangedRoutedEventArgs.OldValue">
            <summary>
            Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Cameras.PreviewCameraChangedRoutedEventArgs.Property">
            <summary>
            Gets the identifier for the dependency property where the value change occurred.
            </summary>
        </member>
        <member name="M:Ab3d.Common.Cameras.PreviewCameraChangedRoutedEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Common.Cameras.PreviewCameraChangedRoutedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="property">The identifier for the dependency property that changed.</param>
            <param name="oldValue">The value of the property before the change reported by the relevant event or state change.</param>
            <param name="newValue">The value of the property after the change reported by the relevant event or state change.</param>
        </member>
        <member name="M:Ab3d.Common.Cameras.PreviewCameraChangedRoutedEventArgs.#ctor(System.Object,System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="source">source</param>
            <param name="property">The identifier for the dependency property that changed.</param>
            <param name="oldValue">The value of the property before the change reported by the relevant event or state change.</param>
            <param name="newValue">The value of the property after the change reported by the relevant event or state change.</param>
        </member>
        <member name="T:Ab3d.Common.Cameras.ShowCameraLightType">
            <summary>
            Enum used by the <see cref="P:Ab3d.Cameras.BaseCamera.ShowCameraLight"/> property to define when the camera light is shown.
            </summary>
        </member>
        <member name="F:Ab3d.Common.Cameras.ShowCameraLightType.Never">
            <summary>
            Never add additional camera light
            </summary>
        </member>
        <member name="F:Ab3d.Common.Cameras.ShowCameraLightType.Auto">
            <summary>
            Show camera light only if there is no other light defined in the Viewport3D controlled by the camera.
            </summary>
        </member>
        <member name="F:Ab3d.Common.Cameras.ShowCameraLightType.Always">
            <summary>
            Always add a camera light
            </summary>
        </member>
        <member name="T:Ab3d.Common.Constants">
            <summary>
            Constants and static fields for some common 3D values
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.ZeroMatrix">
            <summary>
            Matrix3D with 0 value of all elements
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.ZeroPoint3D">
            <summary>
            Zero Point3D
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.XAxis">
            <summary>
            XAxis Vector3D
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.YAxis">
            <summary>
            YAxis Vector3D
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.ZAxis">
            <summary>
            ZAxis Vector3D
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.UpVector">
            <summary>
            Up vector - same as YAxis
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.DownVector">
            <summary>
            Down vector - same as negative YAxis
            </summary>
        </member>
        <member name="F:Ab3d.Common.Constants.EmptyGeometryModel3D">
            <summary>
            Gets an empty GeometryModel3D
            </summary>
        </member>
        <member name="M:Ab3d.Common.Constants.HasNaNValues(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Returns true if Matrix has any value NaN.
            </summary>
            <param name="matrix">Matrix3D</param>
            <returns>true if Matrix has any value NaN</returns>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.Manipulation3DEventHandler`1">
            <summary>
            Represents the method that will handle manipulation events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
            <typeparam name="T">InputEventArgs</typeparam>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.Manipulation3DEventArgs`1">
            <summary>
            Provides base data for manipulation events on 3D object
            </summary>
            <typeparam name="T">InputEventArgs</typeparam>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.Manipulation3DEventArgs`1.ManipulationData">
            <summary>
            Get data about the current manipulation event. 
            Can be of type ManipulationStartedEventArgs, ManipulationCompletedEventArgs or ManipulationDeltaEventArgs depending on the actual event handler.
            </summary>
        </member>
        <member name="M:Ab3d.Common.EventManager3D.Manipulation3DEventArgs`1.#ctor(`0,System.Windows.Point,Ab3d.Utilities.BaseEventSource3D,System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="manipulationData">manipulationData</param>
            <param name="currentMousePosition">currentMousePosition</param>
            <param name="hitEventSource3D">hitEventSource3D</param>
            <param name="rayHitResult">rayHitResult</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.MouseWheel3DEventHandler">
            <summary>
            Represents the method that will handle mouse wheel events on 3D objects.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.MouseWheel3DEventArgs">
            <summary>
            Provides data for mouse wheel events on 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseWheel3DEventArgs.MouseData">
            <summary>
            Original 2D mouse data (System.Windows.Input.MouseWheelEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.Common.EventManager3D.MouseWheel3DEventArgs.#ctor(System.Windows.Input.MouseWheelEventArgs,System.Windows.Point,Ab3d.Utilities.BaseEventSource3D,System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseWheelEventArgs)</param>
            <param name="currentMousePosition">Gets the current mouse position</param>
            <param name="hitEventSource3D">Gets the hit BaseEventSource3D object</param>
            <param name="rayHitResult">Result of 3D Ray Hit Test as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.Touch3DEventHandler">
            <summary>
            Represents the method that will handle touch related routed events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.Touch3DEventArgs">
            <summary>
            Provides base data for touch events on 3D object
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.Touch3DEventArgs.TouchData">
            <summary>
            Original 2D touch data (System.Windows.Input.TouchEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.Common.EventManager3D.Touch3DEventArgs.#ctor(System.Windows.Input.TouchEventArgs,System.Windows.Point,Ab3d.Utilities.BaseEventSource3D,System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="touchData">Original 2D touch data (System.Windows.Input.TouchEventArgs)</param>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="rayHitResult">rayHitResult as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs">
            <summary>
            Provides base data for mouse events on 3D object
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.CurrentMousePosition">
            <summary>
            Gets the current mouse position
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitEventSource3D">
            <summary>
            Gets the hit BaseEventSource3D object
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.RayHitResult">
            <summary>
            Gets the result of 3D Ray Hit Test as RayMeshGeometry3DHitTestResult
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.FinalPointHit">
            <summary>
            Gets the position in 3D space that was hit. This position is different from the RayHitResult.PointHit because it is also transformed by any transformation that is applied to the Visual3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitObjectName">
            <summary>
            Gets the name of the hit Model3D or Visual3D.
            </summary>
            <remarks>
            <para>
            HitObjectName is a helper property that gets the name of the hit object from the <see cref="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitEventSource3D"/>.
            Without HitObjectName, the <see cref="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitEventSource3D"/> must be casted to the correct type before getting the name of the hit object.
            </para>
            <para>
            If HitEventSource3D is <see cref="T:Ab3d.Utilities.ModelEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.ModelEventSource3D.TargetModelName"/> is get. 
            If it is <see cref="T:Ab3d.Utilities.VisualEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.VisualEventSource3D.TargeVisualName"/> is get.
            If it is <see cref="T:Ab3d.Utilities.MultiModelEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.MultiModelEventSource3D.HitModelName"/> is get.
            If it is <see cref="T:Ab3d.Utilities.MultiVisualEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.MultiVisualEventSource3D.HitVisualName"/> is get.
            </para>
            <para>
            The HitObjectName is set only when the EventSource3D object is defined by its name.
            </para>
            <para>
            To get the hit Model3D or Visual3D (and not its name), use <see cref="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitObject"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitObject">
            <summary>
            Gets the hit Model3D or Visual3D.
            </summary>
            <remarks>
            <para>
            HitObject is a helper property that gets the hit object from the <see cref="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitEventSource3D"/>.
            Without HitObject, the <see cref="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitEventSource3D"/> must be casted to the correct type before getting the hit object.
            </para>
            <para>
            If HitEventSource3D is <see cref="T:Ab3d.Utilities.ModelEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.ModelEventSource3D.TargetModel3D"/> is get. 
            If it is <see cref="T:Ab3d.Utilities.VisualEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.VisualEventSource3D.TargetVisual3D"/> is get.
            If it is <see cref="T:Ab3d.Utilities.MultiModelEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.MultiModelEventSource3D.HitModel"/> is get.
            If it is <see cref="T:Ab3d.Utilities.MultiVisualEventSource3D"/>, than its <see cref="P:Ab3d.Utilities.MultiVisualEventSource3D.HitVisual3D"/> is get.
            </para>
            <para>
            To get the name of the hit Model3D or Visual3D, use <see cref="P:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.HitObjectName"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Common.EventManager3D.BaseMouse3DEventArgs.#ctor(System.Windows.Point,Ab3d.Utilities.BaseEventSource3D,System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="rayHitResult">rayHitResult as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.MouseButton3DEventHandler">
            <summary>
            Represents the method that will handle mouse button related events on 3D objects.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.MouseButton3DEventArgs">
            <summary>
            Provides data for mouse button related events on 3D objects
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseButton3DEventArgs.MouseData">
            <summary>
            Original 2D mouse data (System.Windows.Input.MouseButtonEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.Common.EventManager3D.MouseButton3DEventArgs.#ctor(System.Windows.Input.MouseButtonEventArgs,System.Windows.Point,Ab3d.Utilities.BaseEventSource3D,System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseButtonEventArgs)</param>
            <param name="currentMousePosition">Gets the current mouse position</param>
            <param name="hitEventSource3D">Gets the hit BaseEventSource3D object</param>
            <param name="rayHitResult">Result of 3D Ray Hit Test as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.MouseDrag3DEventHandler">
            <summary>
            Represents the method that will handle mouse drag events on 3D objects.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs">
            <summary>
            Provides data for mouse drag events on 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs.HitSurface">
            <summary>
            Gets the BaseEventSource3D object that was marked as IsDragSurface. It was the source to get the StartSurfaceHitPoint and CurrentSurfaceHitPoint.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs.StartDragMousePosition">
            <summary>
            Gets the 2D mouse position of the point where the drag was started.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs.StartSurfaceHitPoint">
            <summary>
            Gets the 3D position on the of the HitSurface where the drag was started.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs.CurrentSurfaceHitPoint">
            <summary>
            Gets the current 3D position on the of the HitSurface.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs.MouseDiff">
            <summary>
            Gets the 2D Vector that defines the difference from the mouse strat drag position and mouse current position.
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs.SurfaceHitPointDiff">
            <summary>
            Gets the 3D Vector that defines the difference from the mouse strat drag position and mouse current position.
            </summary>
        </member>
        <member name="M:Ab3d.Common.EventManager3D.MouseDrag3DEventArgs.#ctor(System.Windows.Input.MouseEventArgs,System.Windows.Point,Ab3d.Utilities.BaseEventSource3D,Ab3d.Utilities.BaseEventSource3D,System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult,System.Windows.Point,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseEventArgs)</param>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="hitSurface">Gets the BaseEventSource3D object that was marked as IsDragSurface. It was the source to get the StartSurfaceHitPoint and CurrentSurfaceHitPoint.</param>
            <param name="rayHitResult">Gets the result of 3D Ray Hit Test as RayMeshGeometry3DHitTestResult.</param>
            <param name="startDragMousePosition">Gets the 2D mouse position of the point where the drag was started.</param>
            <param name="startSurfaceHitPoint">Gets the 3D position on the of the HitSurface where the drag was started.</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.Mouse3DEventHandler">
            <summary>
            Represents the method that will handle mouse related routed events that do not specifically involve mouse buttons - for example MouseLeave
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.Common.EventManager3D.Mouse3DEventArgs">
            <summary>
            Provides data for mouse events on 3D object that does not specifically involve mouse buttons - for example MouseLeave
            </summary>
        </member>
        <member name="P:Ab3d.Common.EventManager3D.Mouse3DEventArgs.MouseData">
            <summary>
            Original 2D mouse data (System.Windows.Input.MouseEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.Common.EventManager3D.Mouse3DEventArgs.#ctor(System.Windows.Input.MouseEventArgs,System.Windows.Point,Ab3d.Utilities.BaseEventSource3D,System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseEventArgs)</param>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="rayHitResult">rayHitResult as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.FindFirstElement``1(System.Windows.FrameworkElement)">
            <summary>
            Tries to find the Ab3d.Cameras.BaseCamera in the logical tree. This method is called when the TargetCamera or TargetCameraName is not set.
            </summary>
            <returns>Ab3d.Cameras.BaseCamera if found else null</returns>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.FindElement``1(System.Object)">
            <summary>
            Find Ab3d.Cameras.BaseCamera in element (going through its Content and Children)
            </summary>
            <param name="element">start element</param>
            <returns>Ab3d.Cameras.BaseCamera if found else null</returns>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.GetDesignTimeWindowChild(System.Windows.FrameworkElement)">
            <summary>
            For Design time only: Iterates through parent controls until root design time control is found (DesignTimeWindow or ArtboardBorder) is found - than returns its child
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.GetUserControlOrWindowOrPage(System.Windows.FrameworkElement)">
            <summary>
            Gets UserControl, Window or Page
            </summary>
            <param name="element">the start object</param>
            <returns>UserControl, Window or Page</returns>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.GetRootControl(System.Windows.FrameworkElement)">
            <summary>
            Gets UserControl, Window or Page or any other top level FrameworkElement
            </summary>
            <param name="element">the start object</param>
            <returns>UserControl, Window or Page</returns>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.GetWindowOrPage(System.Windows.FrameworkElement)">
            <summary>
            Gets Window or Page
            </summary>
            <param name="element">the start object</param>
            <returns>Window or Page</returns>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.FindParentElement``1(System.Windows.FrameworkElement)">
            <summary>
            Gets parent element of type T if found else returns null
            </summary>
            <param name="element">the start FrameworkElement</param>
            <returns>parent element of type T if found else returns null</returns>
        </member>
        <member name="M:Ab3d.Common.FindControlsHelper.FindElementByName``1(System.Windows.FrameworkElement,System.String,System.Int32)">
            <summary>
            Find Ab3d.Cameras.BaseCamera in element (going through its Content and Children)
            </summary>
            <param name="currentElement">start element</param>
            <param name="nameToFind">nameToFind</param>
            <param name="downLevels">number of levels down the logical tree to find for the name</param>
            <returns>Ab3d.Cameras.BaseCamera if found else null</returns>
        </member>
        <member name="T:Ab3d.Common.FitIntoViewType">
            <summary>
            FitIntoViewType enum defines possible ways to calculate the distance and center position to fit the scene into current viewport.
            </summary>
        </member>
        <member name="F:Ab3d.Common.FitIntoViewType.CheckBounds">
            <summary>
            Check Bounds of all GeometryModel3D objects - this is not as precise as CheckAllPositions but can be much faster when there are objects with a lot of position in the scene.
            </summary>
        </member>
        <member name="F:Ab3d.Common.FitIntoViewType.CheckAllPositions">
            <summary>
            Check Positions of all GeometryModel3D objects - this is more precise than CheckBounds but can take much longer when there are objects with a lot of position in the scene.
            </summary>
        </member>
        <member name="T:Ab3d.Common.Line3DInfo">
            <summary>
            LineInfo holds line information and can be set as a Tag to GeometryModel3D that represents 3D line.
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.LineColor">
            <summary>
            LineColor
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.LineThickness">
            <summary>
            LineThickness
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.IsLineStrip">
            <summary>
            IsLineStrip
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.IsLineClosed">
            <summary>
            IsLineClosed
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.StartLineCap">
            <summary>
            StartLineCap
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.EndLineCap">
            <summary>
            EndLineCap
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.IsBoundingBoxSet">
            <summary>
            True if bounds are set
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.BoundsX1">
            <summary>
            BoundsX1
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.BoundsY1">
            <summary>
            BoundsY1
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.BoundsZ1">
            <summary>
            BoundsZ1
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.BoundsX2">
            <summary>
            BoundsX2
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.BoundsY2">
            <summary>
            BoundsY2
            </summary>
        </member>
        <member name="F:Ab3d.Common.Line3DInfo.BoundsZ2">
            <summary>
            BoundsZ2
            </summary>
        </member>
        <member name="M:Ab3d.Common.Line3DInfo.ColorToUint(System.Windows.Media.Color)">
            <summary>
            Converts WPF Color to uint
            </summary>
            <param name="color">WPF Color</param>
            <returns>uint</returns>
        </member>
        <member name="T:Ab3d.Common.MaterialTypeConverter">
            <summary>
            MaterialTypeConverter is type converter that can convert simple color name to a DiffuseMaterial with SolidColorBrush or image resource name into a DiffuseMaterial with ImageBrush. It can also create SpecualMaterial or EmissiveMaterial from simple text.
            </summary>
            <remarks>
            <para>
            The new MaterialTypeConverter can be used only on Material and BackMaterial properties on Abd3.Visuals (not on other WPF Visual3D objects - it is not possible to add TypeConverter attribute to existing properties).
            </para>
            <para>
            The material type converter can be used to create:
            </para>
            <list type="table">
            <listheader>
            <term></term>
            <description>example</description>
            </listheader>
            <item>
            <term>DiffuseMaterial with SolidColorBrush</term>
            <description>Red<br/>Blue<br/>#FF5555</description>
            </item>
            <item>
            <term>DiffuseMaterial with ImageBrush</term>
            <description>/Resources/PowerToysTexture.png (for Resource and Content build action)<br/>c:\images\PowerToysTexture.png<br/>http://www.mysite.com/images/myImage.jpg</description>
            </item> 
            <item>
            <term>EmissiveMaterial</term>
            <description>e:Yellow<br/>emissive:Yellow</description>
            </item>
            <item>
            <term>Diffuse + Specular material</term>
            <description>s:32;Blue (SpecularPower = 32; SpecularBrush = White; DiffuseMaterial = Blue)<br/>specular:64;PowerToysTexture.png (SpecularPower = 64; SpecularBrush = White; DiffuseMaterial = PowerToysTexture.png)</description>
            </item>    
            </list>
            <para>
            The Brush used in SpecularMaterial is always White (used almost always and this keeps the syntax clear).
            </para>
            <para>
            Emissive material is created with a group with black DiffuseMaterial and EmissiveMaterial with brush defined with used text.
            </para>
            </remarks>
            <example>
            <para>
            Without MaterialTypeConverter the 3D Box visual can be defined with the following XAML:
            </para>
            <code lang="xaml">
            &lt;visuals:BoxVisual3D CenterPosition="0 5 -10" Size="10 10 10"&gt;
                &lt;visuals:BoxVisual3D.Material&gt;
                    &lt;DiffuseMaterial Brush="LightGreen"/&gt;
                &lt;/visuals:BoxVisual3D.Material&gt;
            &lt;/visuals:BoxVisual3D>
            </code>
            <para>
            With MaterialTypeConverter the same box can be defined in one XAML line:
            </para>
            <code lang="xaml">
            &lt;visuals:BoxVisual3D CenterPosition="0 5 -10" Size="10 10 10" Material="LightGreen"/&gt;
            </code>
            <para>
            The following example creates a DiffuseMaterial with ImageBrush from a PowerToysTexture.png that is stored under Resources folder (the image Build Action should be set to Resource):
            </para>
            <code lang="xaml">
            &lt;visuals:BoxVisual3D CenterPosition="0 5 -10" Size="10 10 10" Material="/Resources/PowerToysTexture.png"/&gt;
            </code>    
            <para>
            The following example creates a DiffuseMaterial with Blue brush and SpecularMaterial with SpecularPower = 64:
            </para>
            <code lang="xaml">
            &lt;visuals:BoxVisual3D CenterPosition="0 5 -10" Size="10 10 10" Material="Specular:64;Blue"/&gt;
            </code>       
            </example>
        </member>
        <member name="M:Ab3d.Common.MaterialTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="sourceType">sourceType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.MaterialTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">context</param>
            <param name="destinationType">destinationType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.MaterialTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="culture">culture</param>
            <param name="value">value</param>
            <returns>DiffuseMaterial object</returns>
        </member>
        <member name="M:Ab3d.Common.MaterialTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments.
            </summary>
            <param name="context">context</param>
            <param name="culture">culture</param>
            <param name="value">value</param>
            <param name="destinationType">destinationType</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="T:Ab3d.Common.ModelMovedEventArgs">
            <summary>
            ModelMovedEventArgs contains MoveVector3D and is used by <see cref="T:Ab3d.Visuals.ModelMoverVisual3D"/>.
            </summary>
        </member>
        <member name="P:Ab3d.Common.ModelMovedEventArgs.MoveVector3D">
            <summary>
            Gets a Vector3D that specifies the amount of move.
            </summary>
        </member>
        <member name="M:Ab3d.Common.ModelMovedEventArgs.#ctor(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Constructor
            </summary>
            <param name="moveVector3D">moveVector3D</param>
        </member>
        <member name="T:Ab3d.Common.ModelRotatedEventArgs">
            <summary>
            ModelRotatedEventArgs contains RotationAngle and RotationAxis and is used by <see cref="T:Ab3d.Visuals.ModelRotatorVisual3D"/>.
            </summary>
        </member>
        <member name="P:Ab3d.Common.ModelRotatedEventArgs.RotationAngle">
            <summary>
            Gets a double that specifies the current rotation angle.
            </summary>
        </member>
        <member name="P:Ab3d.Common.ModelRotatedEventArgs.RotationAxis">
            <summary>
            Gets the Vector3D that represents the axis of rotation.
            </summary>
        </member>
        <member name="M:Ab3d.Common.ModelRotatedEventArgs.#ctor(System.Double,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Constructor
            </summary>
            <param name="rotationAngle">double that specifies the current rotation angle</param>
            <param name="rotationAxis">Vector3D that represents the axis of rotation</param>
        </member>
        <member name="T:Ab3d.Common.Models.LineCap">
            <summary>
            LineCap enum defines the shape of the line at its start or its end.
            </summary>
        </member>
        <member name="F:Ab3d.Common.Models.LineCap.Flat">
            <summary>
            Flat line (Default).
            </summary>
        </member>
        <member name="F:Ab3d.Common.Models.LineCap.ArrowAnchor">
            <summary>
            Arrow shape.
            </summary>
        </member>
        <member name="T:Ab3d.Common.PowerToys.LicenseInstaller">
            <summary>
            LicenseInstaller class is used by .Net compiler to embed the installed license key into the application.
            </summary>
        </member>
        <member name="M:Ab3d.Common.PowerToys.LicenseInstaller.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Ab3d.Common.RenderingTimer">
            <summary>
            Computer speed independent timer that is using CompositionTarget.Rendering event and reports progress from 0 to 1 in the Duration period.
            </summary>
            <remarks>
            <para>
            The RenderingTimer can be used to create manual animations that depend only on the animation Duration and are not affected by the actual computer speed (frames per second).
            </para>
            <para>
            The RenderingTimer changes the value of <see cref="P:Ab3d.Common.RenderingTimer.Progress"/> property from 0 to 1.
            At the start of animation the Progress value is 0, at the time of <see cref="P:Ab3d.Common.RenderingTimer.Duration"/> the value of Progress is 1.
            If <see cref="P:Ab3d.Common.RenderingTimer.RepeatForever"/> value is true, the animation repeats again with setting Progress back to 0.
            On each Progress change (on each frame) the <see cref="E:Ab3d.Common.RenderingTimer.Tick"/> event is raised. 
            When the animation is finished the <see cref="E:Ab3d.Common.RenderingTimer.Completed"/> event is raised (if <see cref="P:Ab3d.Common.RenderingTimer.RepeatForever"/> is not true).
            </para>
            <para>
            To start the animation the <see cref="M:Ab3d.Common.RenderingTimer.Start"/> method must be called.
            The animation can be stopped by calling <see cref="M:Ab3d.Common.RenderingTimer.Stop"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Common.RenderingTimer.Progress">
            <summary>
            The current Progress value (during animation its goes from 0.0 to 1.0)
            </summary>
        </member>
        <member name="P:Ab3d.Common.RenderingTimer.Duration">
            <summary>
            Duration in which the Progress goes from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Ab3d.Common.RenderingTimer.RepeatForever">
            <summary>
            If true than the timer is not stopped when Progress = 1.0, but the Progress is set to 0.0 (Default value is false).
            </summary>
        </member>
        <member name="E:Ab3d.Common.RenderingTimer.Tick">
            <summary>
            Event that is raised every time the Progress value is changed (on every frame - rendering pass)
            </summary>
        </member>
        <member name="E:Ab3d.Common.RenderingTimer.Completed">
            <summary>
            Event that is raised when the animation is completed.
            </summary>
            <remarks>
            If <see cref="P:Ab3d.Common.RenderingTimer.RepeatForever"/> value is false (by default) the animation is complete when <see cref="P:Ab3d.Common.RenderingTimer.Progress"/> value reaches 1.
            If RepeatForever is true, the animation is completed only when the <see cref="M:Ab3d.Common.RenderingTimer.Stop"/> method is called.
            </remarks>
        </member>
        <member name="M:Ab3d.Common.RenderingTimer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Common.RenderingTimer.Start">
            <summary>
            Starts the RenderingTimer animation
            </summary>
        </member>
        <member name="M:Ab3d.Common.RenderingTimer.Stop">
            <summary>
            Stops the RenderingTimer animation
            </summary>
        </member>
        <member name="M:Ab3d.Common.RenderingTimer.OnTick">
            <summary>
            OnTick occurs on each rendering event and triggers the Tick event
            </summary>
        </member>
        <member name="T:Ab3d.Common.Utilities.BaseTransparentObject3D">
            <summary>
            Base class that hold information about one transparent object.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObject3D.CurrentIndex">
            <summary>
            Current index of the object in the parent's collection.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObject3D.NewIndex">
            <summary>
            New index of the object in the parent's collection.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObject3D.SortedValue">
            <summary>
            Gets or sets a value that will be used to sort the objects.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObject3D.CacheBounds">
            <summary>
            Gets or sets a boolean that specifies if the object's bounds can be cached.
            </summary>
        </member>
        <member name="F:Ab3d.Common.Utilities.BaseTransparentObject3D.cachedBounds">
            <summary>
            Cached bounds
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.BaseTransparentObject3D.GetBounds">
            <summary>
            Returns bounds as Rect3D of this transparent object.
            </summary>
            <returns>bounds as Rect3D</returns>
        </member>
        <member name="M:Ab3d.Common.Utilities.BaseTransparentObject3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D">
            <summary>
            Base class for group of transparent objects.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.Children">
            <summary>
            Gets a list of all transparent objects in this group.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.IsFullRearrangeNeeded">
            <summary>
            Gets or sets a boolean the indicates if Children need to be fully rearranged.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.AllChildrenCount">
            <summary>
            Gets count of all children (transparent + non-transparent).
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.TransparentChildrenCount">
            <summary>
            Gets count of all transparent children.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.NonTransparentChildrenCount">
            <summary>
            Gets count of all non-transparent children.
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.RemoveObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Removes a transparentObject3D from the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.AddObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Add a transparentObject3D to the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.BaseTransparentObjectGroup3D.SetObjectToIndex(Ab3d.Common.Utilities.BaseTransparentObject3D,System.Int32)">
            <summary>
            Changes index of the transparent object.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
            <param name="index">new index</param>
        </member>
        <member name="T:Ab3d.Common.Utilities.LinesUpdaterMode">
            <summary>
            LinesUpdaterModeType defines the modes that define how often the LinesUpdater automatically updates the lines
            </summary>
        </member>
        <member name="F:Ab3d.Common.Utilities.LinesUpdaterMode.Never">
            <summary>
            Lines are never updated automatically
            </summary>
        </member>
        <member name="F:Ab3d.Common.Utilities.LinesUpdaterMode.Always">
            <summary>
            Lines are updated whenever any relevant thing in the scene is changed (camera, Viewport3D size, parent Visual3D transform)
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.PolygonVertex.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.Common.Utilities.TransparentModel3D">
            <summary>
            TransparentModel3D class contains information about transparent Model3D.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModel3D.Model">
            <summary>
            Gets a transparent Model3D that is associated with this TransparentModel3D.
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModel3D.#ctor(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Constructor
            </summary>
            <param name="model">transparent Model3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModel3D.#ctor(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Constructor
            </summary>
            <param name="model">transparent Model3D</param>
            <param name="parentGroup">parent group</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModel3D.#ctor(System.Windows.Media.Media3D.Model3D,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="model">transparent Model3D</param>
            <param name="currentIndex">index in the parent's group</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModel3D.GetBounds">
            <summary>
            Returns bounds as Rect3D of this transparent object.
            </summary>
            <returns>bounds as Rect3D</returns>
        </member>
        <member name="T:Ab3d.Common.Utilities.TransparentModelGroup3D">
            <summary>
            TransparentModelGroup3D contains many TransparentModel3D.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelGroup3D.ModelGroup">
            <summary>
            Gets the Model3DGroup.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelGroup3D.AllChildrenCount">
            <summary>
            Gets count of all children (transparent + non-transparent).
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelGroup3D.TransparentChildrenCount">
            <summary>
            Gets count of all transparent children.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelGroup3D.NonTransparentChildrenCount">
            <summary>
            Gets count of all non-transparent children.
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelGroup3D.#ctor(System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Constructor
            </summary>
            <param name="modelGroup">Model3DGroup with transparent objects</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelGroup3D.#ctor(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Constructor
            </summary>
            <param name="modelGroup">Model3DGroup with transparent objects</param>
            <param name="parentGroup">parent Model3DGroup</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelGroup3D.#ctor(System.Windows.Media.Media3D.Model3DGroup,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="modelGroup">Model3DGroup with transparent objects</param>
            <param name="currentIndex">index of modelGroup in parent's Model3DGroup</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelGroup3D.RemoveObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Removes a transparentObject3D from the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelGroup3D.AddObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Add a transparentObject3D to the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelGroup3D.SetObjectToIndex(Ab3d.Common.Utilities.BaseTransparentObject3D,System.Int32)">
            <summary>
            Changes index of the transparent object.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
            <param name="index">new index</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelGroup3D.GetBounds">
            <summary>
            Returns bounds as Rect3D of this transparent object.
            </summary>
            <returns>bounds as Rect3D</returns>
        </member>
        <member name="T:Ab3d.Common.Utilities.TransparentModelUIElement3D">
            <summary>
            TransparentModelUIElement3D class contains information about transparent ModelUIElement3D.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelUIElement3D.Model">
            <summary>
            Gets a transparent Model3D that is associated with this TransparentModelUIElement3D.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelUIElement3D.ModelUIElement3D">
            <summary>
            Gets a transparent ModelUIElement3D that is associated with this TransparentModelUIElement3D.
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelUIElement3D.#ctor(System.Windows.Media.Media3D.ModelUIElement3D)">
            <summary>
            Constructor
            </summary>
            <param name="modelUIElement3D">transparent ModelUIElement3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelUIElement3D.#ctor(System.Windows.Media.Media3D.ModelUIElement3D,System.Windows.Media.Media3D.Visual3DCollection)">
            <summary>
            Constructor
            </summary>
            <param name="modelUIElement3D">transparent ModelUIElement3D</param>
            <param name="parentCollection">parent group</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelUIElement3D.#ctor(System.Windows.Media.Media3D.ModelUIElement3D,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="modelUIElement3D">transparent ModelUIElement3D</param>
            <param name="currentIndex">index in the parent's group</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelUIElement3D.GetBounds">
            <summary>
            Returns bounds as Rect3D of this transparent object.
            </summary>
            <returns>bounds as Rect3D</returns>
        </member>
        <member name="T:Ab3d.Common.Utilities.TransparentModelVisual3D">
            <summary>
            TransparentModelVisual3D class contains information about transparent ModelVisual3D.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelVisual3D.ModelVisual3D">
            <summary>
            Gets a transparent ModelVisual3D that is associated with this TransparentModelVisual3D.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelVisual3D.TransparentModelGroup3D">
            <summary>
            Gets a TransparentModelGroup3D that is associated with this TransparentModelVisual3D.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelVisual3D.IsFullRearrangeNeeded">
            <summary>
            Gets or sets a boolean the indicates if Children need to be fully rearranged.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelVisual3D.AllChildrenCount">
            <summary>
            Gets count of all children (transparent + non-transparent).
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelVisual3D.TransparentChildrenCount">
            <summary>
            Gets count of all transparent children.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentModelVisual3D.NonTransparentChildrenCount">
            <summary>
            Gets count of all non-transparent children.
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelVisual3D.#ctor(System.Windows.Media.Media3D.ModelVisual3D)">
            <summary>
            Constructor
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelVisual3D.#ctor(System.Windows.Media.Media3D.ModelVisual3D,System.Windows.Media.Media3D.Visual3DCollection)">
            <summary>
            Constructor
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
            <param name="parentVisual3DCollection">parent Visual3DCollection</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelVisual3D.#ctor(System.Windows.Media.Media3D.ModelVisual3D,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
            <param name="currentIndex">index of ModelVisual3D in parent's Visual3DCollection</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelVisual3D.RemoveObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Removes a transparentObject3D from the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelVisual3D.AddObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Add a transparentObject3D to the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelVisual3D.SetObjectToIndex(Ab3d.Common.Utilities.BaseTransparentObject3D,System.Int32)">
            <summary>
            Changes index of the transparent object.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
            <param name="index">new index</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentModelVisual3D.GetBounds">
            <summary>
            Returns bounds as Rect3D of this transparent object.
            </summary>
            <returns>bounds as Rect3D</returns>
        </member>
        <member name="T:Ab3d.Common.Utilities.TransparentVisual3DCollection">
            <summary>
            TransparentVisual3DCollection contains collection of transparent Visual3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentVisual3DCollection.Visual3DCollection">
            <summary>
            Gets the Visual3DCollection.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentVisual3DCollection.IsFullRearrangeNeeded">
            <summary>
            Gets or sets a boolean the indicates if Children need to be fully rearranged.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentVisual3DCollection.AllChildrenCount">
            <summary>
            Gets count of all children (transparent + non-transparent).
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentVisual3DCollection.TransparentChildrenCount">
            <summary>
            Gets count of all transparent children.
            </summary>
        </member>
        <member name="P:Ab3d.Common.Utilities.TransparentVisual3DCollection.NonTransparentChildrenCount">
            <summary>
            Gets count of all non-transparent children.
            </summary>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentVisual3DCollection.#ctor(System.Windows.Media.Media3D.Visual3DCollection)">
            <summary>
            Constructor
            </summary>
            <param name="visual3DCollection">Visual3DCollection with transparent objects</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentVisual3DCollection.#ctor(System.Windows.Media.Media3D.Visual3DCollection,System.Windows.Media.Media3D.Visual3DCollection)">
            <summary>
            Constructor
            </summary>
            <param name="visual3DCollection">Visual3DCollection with transparent objects</param>
            <param name="parentVisual3DCollection">parent Visual3DCollection</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentVisual3DCollection.#ctor(System.Windows.Media.Media3D.Visual3DCollection,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="visual3DCollection">Visual3DCollection with transparent objects</param>
            <param name="currentIndex">index of visual3DCollection in parent's Visual3DCollection</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentVisual3DCollection.RemoveObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Removes a transparentObject3D from the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentVisual3DCollection.AddObject(Ab3d.Common.Utilities.BaseTransparentObject3D)">
            <summary>
            Add a transparentObject3D to the children.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentVisual3DCollection.SetObjectToIndex(Ab3d.Common.Utilities.BaseTransparentObject3D,System.Int32)">
            <summary>
            Changes index of the transparent object.
            </summary>
            <param name="transparentObject3D">BaseTransparentObject3D</param>
            <param name="index">new index</param>
        </member>
        <member name="M:Ab3d.Common.Utilities.TransparentVisual3DCollection.GetBounds">
            <summary>
            Returns bounds as Rect3D of this transparent object.
            </summary>
            <returns>bounds as Rect3D</returns>
        </member>
        <member name="T:Ab3d.Extensions">
            <summary>
            Extensions methods that can display details about various WPF 3D objects to Debug console (for example in Visual Studio's Immediate window).
            </summary>
        </member>
        <member name="M:Ab3d.Extensions.Dump(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Display details about specified Matrix3D to Debug console (for example to Visual Studio's Immediate window).
            </summary>
            <param name="matrix">Matrix3D</param>
        </member>
        <member name="M:Ab3d.Extensions.Dump(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Display details about specified Model3D to Debug console (for example to Visual Studio's Immediate window).
            </summary>
            <param name="model">Model3D</param>
        </member>
        <member name="M:Ab3d.Extensions.Dump(System.Windows.Media.Media3D.Geometry3D)">
            <summary>
            Display details about specified Geometry3D to Debug console (for example to Visual Studio's Immediate window).
            </summary>
            <param name="geometry">Geometry3D</param>
        </member>
        <member name="M:Ab3d.Extensions.Dump(System.Windows.Media.Media3D.Geometry3D,System.Int32,System.String)">
            <summary>
            Display details about specified Geometry3D to Debug console (for example to Visual Studio's Immediate window).
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <param name="maxLineCount">maximum number of displayed lines. If less or equal than 0 all lines are displayed</param>
            <param name="valuesStringFormat">string format to display values: for example "0.00" to show only 2 decimals; "" to show all decimals; "0" - no decimals</param>
            <returns>the positions, normals and texture coordinates of the MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Extensions.Dump(System.Windows.Media.Media3D.Transform3D)">
            <summary>
            Display details about specified Transform3D to Debug console (for example to Visual Studio's Immediate window).
            </summary>
            <param name="transform">Transform3D</param>
        </member>
        <member name="M:Ab3d.Extensions.Dump(System.Windows.Media.Media3D.Material)">
            <summary>
            Display details about specified Material to Debug console (for example to Visual Studio's Immediate window).
            </summary>
            <param name="material">Material</param>
        </member>
        <member name="M:Ab3d.Extensions.Dump(System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Display details about specified Rect3D to Debug console (for example to Visual Studio's Immediate window).
            </summary>
            <param name="bounds">Rect3D</param>
        </member>
        <member name="M:Ab3d.Extensions.SetName(System.Windows.Media.Media3D.Model3D,System.String)">
            <summary>
            Sets Name property to Model3D. 
            Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </summary>
            <remarks>
            <para>
            Sets Name property to Model3D. 
            </para>
            <para>
            Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </para>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>        
            <param name="model3D">Model3D</param>
            <param name="name">if true, the name will be corrected if not valid for WPF name</param>
            <returns>returns true if name was set without correcting it to comply with WPF name regulations; returns false if name was corrected</returns>
        </member>
        <member name="M:Ab3d.Extensions.SetName(System.Windows.Media.Media3D.MeshGeometry3D,System.String)">
            <summary>
            Sets Name property to MeshGeometry3D. Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </summary>
            <remarks>
            <para>
            Sets Name property to MeshGeometry3D. 
            </para>
            <para>
            Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </para>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>
            <param name="meshGeometry3D">MeshGeometry3D</param>
            <param name="name">name</param>
            <returns>returns true if name was set without correcting it to comply with WPF name regulations; returns false if name was corrected</returns>
        </member>
        <member name="M:Ab3d.Extensions.SetName(System.Windows.Media.Media3D.Visual3D,System.String)">
            <summary>
            Sets Name property to Visual3D. Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </summary>
            <remarks>
            <para>
            Sets Name property to Visual3D. 
            </para>
            <para>
            Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </para>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>        
            <param name="visual3D">Visual3D</param>
            <param name="name">name</param>
            <returns>returns true if name was set without correcting it to comply with WPF name regulations; returns false if name was corrected</returns>
        </member>
        <member name="M:Ab3d.Extensions.SetName(System.Windows.Media.Media3D.Material,System.String)">
            <summary>
            Sets Name property to Material. Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </summary>
            <remarks>
            <para>
            Sets Name property to Material. 
            </para>
            <para>
            Note that if name is not correct for WPF, it can be corrected (name must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores).
            In this case the SetName method will set the corrected name to the object and return false (in this case you can call GetName to get the corrected name). True is returned when the original name is set to the object.
            </para>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>        
            <param name="material">Material</param>
            <param name="name">name</param>
            <returns>returns true if name was set without correcting it to comply with WPF name regulations; returns false if name was corrected</returns>
        </member>
        <member name="M:Ab3d.Extensions.GetName(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Gets name of the Model3D that was previously set by SetName extension method.
            </summary>
            <remarks>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>        
            <param name="model3D">Model3D</param>
            <returns>name that was previously set by SetName extension method</returns>
        </member>
        <member name="M:Ab3d.Extensions.GetName(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Gets name of the MeshGeometry3D that was previously set by SetName extension method.
            </summary>
            <remarks>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>        
            <param name="meshGeometry3D">MeshGeometry3D</param>
            <returns>name that was previously set by SetName extension method</returns>
        </member>
        <member name="M:Ab3d.Extensions.GetName(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Gets name of the Visual3D that was previously set by SetName extension method.
            </summary>
            <remarks>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>        
            <param name="visual3D">Visual3D</param>
            <returns>name that was previously set by SetName extension method</returns>
        </member>
        <member name="M:Ab3d.Extensions.GetName(System.Windows.Media.Media3D.Material)">
            <summary>
            Gets name of the Material that was previously set by SetName extension method.
            </summary>
            <remarks>
            <para>
            Though many objects in WPF does not have Name property (with public Name getters and setters),
            it is still possible to set value for the Name property with using a SetValue method on DependencyObjects:
            </para>
            <code>
            dependencyObjects.SetValue(FrameworkElement.NameProperty, name);
            </code>
            <para>
            The value of the Name can than be read with:
            </para>
            <code>
            return dependencyObjects.GetValue(FrameworkElement.NameProperty) as string;
            </code>
            <para>
            The SetName and GetName extension methods simplify setting the values on commonly used 3D objects.
            </para>
            </remarks>        
            <param name="material">Material</param>
            <returns>name that was previously set by SetName extension method</returns>
        </member>
        <member name="M:Ab3d.Extensions.ForEachGeometryModel3D(System.Windows.Media.Media3D.Model3DGroup,System.Action{System.Windows.Media.Media3D.GeometryModel3D})">
            <summary>
            Performs the specified action on each GeometryModel3D inside the rootModel3DGroup.
            </summary>
            <param name="rootModel3DGroup">root Model3DGroup</param>
            <param name="action">The Action delegate to perform on each GeometryModel3D inside the rootModel3DGroup</param>
        </member>
        <member name="M:Ab3d.Extensions.ForEachGeometryModel3D(System.Windows.Media.Media3D.Visual3DCollection,System.Action{System.Windows.Media.Media3D.GeometryModel3D})">
            <summary>
            Performs the specified action on each GeometryModel3D inside the visual3DCollection.
            </summary>
            <param name="visual3DCollection">Visual3DCollection</param>
            <param name="action">The Action delegate to perform on each GeometryModel3D inside the visual3DCollection</param>
        </member>
        <member name="M:Ab3d.Extensions.ForEachGeometryModel3D(System.Windows.Media.Media3D.ModelVisual3D,System.Action{System.Windows.Media.Media3D.GeometryModel3D})">
            <summary>
            Performs the specified action on each GeometryModel3D inside the rootModelVisual3D.
            </summary>
            <param name="rootModelVisual3D">root ModelVisual3D</param>
            <param name="action">The Action delegate to perform on each GeometryModel3D inside the rootModelVisual3D</param>
        </member>
        <member name="M:Ab3d.Extensions.ForEachVisual3D(System.Windows.Media.Media3D.ModelVisual3D,System.Action{System.Windows.Media.Media3D.ModelVisual3D})">
            <summary>
            Performs the specified action on each ModelVisual3D inside the rootModelVisual3D.
            </summary>
            <param name="rootModelVisual3D">root ModelVisual3D</param>
            <param name="action">The Action delegate to perform on each ModelVisual3D inside the rootModelVisual3D</param>
        </member>
        <member name="M:Ab3d.Extensions.ForEachVisual3D(System.Windows.Media.Media3D.Visual3DCollection,System.Action{System.Windows.Media.Media3D.ModelVisual3D})">
            <summary>
            Performs the specified action on each ModelVisual3D inside the visual3DCollection.
            </summary>
            <param name="visual3DCollection">Visual3DCollection</param>
            <param name="action">The Action delegate to perform on each ModelVisual3D inside the visual3DCollection</param>
        </member>
        <member name="T:Ab3d.Meshes.ArrowMesh3D">
            <summary>
            ArrowMesh3D class is used to create MeshGeometry3D that represents a 3D arrow created from cylinder and cone.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.ArrowMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D cone.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.ArrowMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double,System.Int32,System.Boolean)">
            <summary>
            Constructor (arrowRadius is set to 2 * radius; arrowAngle = 60 degrees)
            </summary>
            <param name="startPosition">Point3D that defined the start position of the 3D arrow (center of the circle defined by the first section)</param>
            <param name="endPosition">Point3D that defined the end position of the 3D arrow</param>
            <param name="radius">radius of the cone that defines the 3D line (without arrow)</param>
            <param name="segments">number of segments that define the circles used to create sections</param>
            <param name="generateTextureCoordinates">if true than texture coordinates are generated (created mesh is more complicated in this case)</param>
        </member>
        <member name="M:Ab3d.Meshes.ArrowMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="startPosition">Point3D that defined the start position of the 3D object (center of the circle defined by the first section)</param>
            <param name="endPosition">Point3D that defined the end position of the 3D arrow</param>
            <param name="radius">radius of the cone that defines the 3D line (without arrow)</param>
            <param name="arrowRadius">radius of the arrow - half of the arrow width</param>
            <param name="arrowAngle">angle of the arrow in degrees</param>
            <param name="segments">number of segments that define the circles used to create sections</param>
            <param name="generateTextureCoordinates">if true than texture coordinates are generated (created mesh is more complicated in this case)</param>
        </member>
        <member name="F:Ab3d.Meshes.BaseDisconnectedLinesMesh3D.positions">
            <summary>
            line positions
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseDisconnectedLinesMesh3D.useLineCapsOnlyOnStartAndEndPosition">
            <summary>
            If true the start lines cap is used only on first position and the last line cap is used only on last position. Used in PolyLines.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.BaseDisconnectedLinesMesh3D.#ctor(System.Double,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor without positions. The protected _positions Point3DCollection must be set before getting the Geometry property
            </summary>
            <param name="thickness">line thickness</param>
            <param name="startLineCap">line startLineCap</param>
            <param name="endLineCap">line endLineCap</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.BaseDisconnectedLinesMesh3D.#ctor(System.Windows.Media.Media3D.Point3DCollection,System.Double,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions as list of Point3D</param>
            <param name="thickness">line thickness</param>
            <param name="startLineCap">line startLineCap</param>
            <param name="endLineCap">line endLineCap</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.BaseDisconnectedLinesMesh3D.#ctor(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D},System.Double,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions as list of Point3D</param>
            <param name="thickness">line thickness</param>
            <param name="startLineCap">line startLineCap</param>
            <param name="endLineCap">line endLineCap</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="T:Ab3d.Meshes.BoxMesh3D">
            <summary>
            BoxMesh3D class is used to create MeshGeometry3D that represents a 3D box.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.BoxMesh3D.UseSharedMeshData">
            <summary>
            Gets or sets a boolean that specified if shared and frozen TriangleIndices, TextureCoordinates and Normals are used for simple 3D Boxes (simple 3D box have x, y and z segments equal to 1). Default value is true.
            If you TriangleIndices, TextureCoordinates and Normals will be changed, than UseSharedMeshData must be set to false before getting the Geometry property (otherwise this will change TriangleIndices, TextureCoordinates and Normals in all 3d box instances).
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.BoxMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D box.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.BoxMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="centerPosition">box center position</param>
            <param name="size">box size</param>
            <param name="xSegments">number of segments in the x direction</param>
            <param name="ySegments">number of segments in the y direction</param>
            <param name="zSegments">number of segments in the z direction</param>
        </member>
        <member name="T:Ab3d.Meshes.CircleMesh3D">
            <summary>
            CircleMesh3D class is used to create MeshGeometry3D that represents a 3D circle.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.CircleMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D box.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.CircleMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="centerPosition">circle center position</param>
            <param name="normal">circle normal as Vector3D</param>
            <param name="upDirection">Vector3D that is pointing from center position to the circle's top position</param>
            <param name="radius">circle radius</param>
            <param name="segments">number of segments that are used to define the circle</param>
        </member>
        <member name="T:Ab3d.Meshes.ConeMesh3D">
            <summary>
            ConeMesh3D class is used to create MeshGeometry3D that represents a 3D cone.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.ConeMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D cone.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.ConeMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">center position of the bottom circle that defines the cone</param>
            <param name="topRadius">radius of the top circle that defines the cone</param>
            <param name="bottomRadius">radius of the bottom circle that defines the cone</param>
            <param name="height">height of the cone</param>
            <param name="segments">number of segments that define the top and bottom circles of the cone</param>
            <param name="isSmooth">if true the cone is smooth, if false the edges on the cone are sharp</param>
        </member>
        <member name="F:Ab3d.Meshes.BaseLineMesh3D.StartLineCap">
            <summary>
            start line cap
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseLineMesh3D.EndLineCap">
            <summary>
            end line cap
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.BaseLineMesh3D.ParentVisual">
            <summary>
            ParentVisual that is used to project the line into screen coordinates and back to world coordinates
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.BaseLineMesh3D.ParentViewport3D">
            <summary>
            ParentViewport3D that is used to project the line into screen coordinates and back to world coordinates
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseLineMesh3D.thickness">
            <summary>
            line thickness 
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseLineMesh3D.isGeometryDirty">
            <summary>
            if true the geometry must be recreated
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseLineMesh3D.isGeometryEmpty">
            <summary>
            if true only empty MeshGeometry3D was created and it needs to be filled with data
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseLineMesh3D.geometry">
            <summary>
            Protected MeshGeometry3D
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.BaseLineMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D line. Note that Geometry is null when the Line is created. The Geometry is created after it is connected to Viewport3D and refreshed with LinesUpdater.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.BaseLineMesh3D.#ctor(System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor without positions. The protected _positions Point3DCollection must be set before getting the Geometry property
            </summary>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.BaseLineMesh3D.#ctor(System.Double,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="thickness">line thickness</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="F:Ab3d.Meshes.BaseConnectedLinesMesh3D.positionCollections">
            <summary>
            List of Point3DCollection
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseConnectedLinesMesh3D.usedPositionsCollection">
            <summary>
            List of Point3DCollection that are used to create GeometryModel3D (this collection is filtered to remove duplicate positions and add first position to the end of collection when the object is closed)
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseConnectedLinesMesh3D.isClosed">
            <summary>
            If true the lines are closed - the last point is the same as the first point
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.BaseConnectedLinesMesh3D.LineSegmentsCountForArrowLength">
            <summary>
            This field can be set to adjust the arrow size. If set to 2 than length of 2 line segments will be used a maximum arrow length. This is used for example in Line Arc.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.BaseConnectedLinesMesh3D.#ctor(System.Double,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor without positions. The protected _positions Point3DCollection must be set before getting the Geometry property
            </summary>
            <param name="thickness">line thickness</param>
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">line startLineCap</param>
            <param name="endLineCap">line endLineCap</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.BaseConnectedLinesMesh3D.#ctor(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions as Point3DCollection</param>
            <param name="thickness">line thickness</param>
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">line startLineCap</param>
            <param name="endLineCap">line endLineCap</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.BaseConnectedLinesMesh3D.#ctor(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3DCollection},System.Double,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="positionCollections">list of Point3DCollections</param>
            <param name="thickness">line thickness</param>
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">line startLineCap</param>
            <param name="endLineCap">line endLineCap</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.BaseConnectedLinesMesh3D.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D}},System.Double,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="positionCollections">list of Point3DCollections</param>
            <param name="thickness">line thickness</param>
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">line startLineCap</param>
            <param name="endLineCap">line endLineCap</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="T:Ab3d.Meshes.CylinderMesh3D">
            <summary>
            CircleMesh3D class is used to create MeshGeometry3D that represents a 3D circle.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.CylinderMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">center position of the bottom circle that defines the cone</param>
            <param name="radius">radius of the cylinder</param>
            <param name="height">height of the cylinder</param>
            <param name="segments">number of segments that define the top and bottom circles of the cylinder</param>
            <param name="isSmooth">if true the cylinder is smooth, if false the edges on the cylinder are sharp</param>
        </member>
        <member name="T:Ab3d.Meshes.DirectedPyramidMesh3D">
            <summary>
            DirectedPyramidMesh3D class is used to create MeshGeometry3D that represents a 3D pyramid that is defined by the direction vector that goes from the center of the bottom rectangle to the top of the pyramid.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.DirectedPyramidMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D pyramid.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.DirectedPyramidMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Size)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">bottom center position</param>
            <param name="direction">direction (also defines the height of the pyramid)</param>
            <param name="bottomSize">bottom size</param>
        </member>
        <member name="T:Ab3d.Meshes.HeightMapMesh3D">
            <summary>
            HeightMapMesh3D class is used to create MeshGeometry3D that represents a 3D height map.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.HeightMapMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D plane.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Double[0:,0:])">
            <summary>
            Constructor
            </summary>
            <param name="centerPosition">center position of the plane</param>
            <param name="size">size of HeightMapMesh3D. Note that size.Y is used to scale the data values.</param>
            <param name="heightData">two dimensional array of double values that are used to represent height map</param>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.UpdateHeight(System.Double[0:,0:])">
            <summary>
            Updates the height map with the new height data. The dimensions of the new height data array must be the same as the array used in the constructor.
            </summary>
            <param name="newHeightData">New height data. The dimensions of the new height data array must be the same as the array used in the constructor</param>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.GetWireframePositions">
            <summary>
            Returns a list of Point3D that represent the positions that can be used to create multi-line to show wireframe.
            </summary>
            <returns>a list of Point3D that represent the positions that can be used to create multi-line to show wireframe</returns>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.CreateHeightTexture(System.Double[0:,0:],System.Windows.Media.LinearGradientBrush)">
            <summary>
            Returns a bitmap that represent a texture created from the height data and specified gradient.
            </summary>
            <param name="data">two dimensional array of height data</param>
            <param name="gradient">LinearGradientBrush that defines the colors used in the texture</param>
            <returns>bitmap that represent a texture created from the height data and with specified gradient.</returns>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.CreateHeightTexture(System.Double[0:,0:],System.Double,System.Double,System.Windows.Media.LinearGradientBrush)">
            <summary>
            Returns a bitmap that represent a texture created from the height data and specified gradient.
            </summary>
            <param name="data">two dimensional array of height data</param>
            <param name="minValue">minimum value in the data</param>
            <param name="maxValue">maximum value in the data</param>
            <param name="gradient">LinearGradientBrush that defines the colors used in the texture</param>
            <returns>bitmap that represent a texture created from the height data and with specified gradient.</returns>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.CreateHeightTexture(System.Double[0:,0:],System.UInt32[])">
            <summary>
            Returns a bitmap that represent a texture created from the height data and specified array of colors (as uint).
            </summary>
            <param name="data">two dimensional array of height data</param>
            <param name="gradientColorsArray">array of colors (each color is one uint). The first element in array is used for minValue, the last element is used for maxValue.</param>
            <returns>bitmap that represent a texture created from the height data and with specified array of colors.</returns>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.CreateHeightTexture(System.Double[0:,0:],System.Double,System.Double,System.UInt32[])">
            <summary>
            Returns a bitmap that represent a texture created from the height data and specified array of colors (as uint).
            </summary>
            <param name="data">two dimensional array of height data</param>
            <param name="minValue">minimum value in the data</param>
            <param name="maxValue">maximum value in the data</param>
            <param name="gradientColorsArray">array of colors (each color is one uint). The first element in array is used for minValue, the last element is used for maxValue.</param>
            <returns>bitmap that represent a texture created from the height data and with specified array of colors.</returns>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.GetGradientColorsArray(System.Windows.Media.LinearGradientBrush,System.Int32)">
            <summary>
            Returns an array array of Color values from the specified gradient (as LinearGradientBrush) and with array count (number of elements in array).
            </summary>
            <param name="gradient">gradient as LinearGradientBrush</param>
            <param name="arrayCount">number of elements in the returned array</param>
            <returns>an array of Color values</returns>
        </member>
        <member name="M:Ab3d.Meshes.HeightMapMesh3D.GetGradientColorsUIntArray(System.Windows.Media.LinearGradientBrush,System.Int32)">
            <summary>
            Returns an array array of uint values that represent colors. The array is created from the specified gradient (as LinearGradientBrush) and with array count (number of elements in array).
            </summary>
            <param name="gradient">gradient as LinearGradientBrush</param>
            <param name="arrayCount">number of elements in the returned array</param>
            <returns>an array of uint values that represent colors</returns>
        </member>
        <member name="T:Ab3d.Meshes.LatheMesh3D">
            <summary>
            LatheMesh3D class is used to create MeshGeometry3D that represents a 3D object that is created with rotating the shape defined with sections
            and positioned from specified start and end position.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.LatheMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D cone.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.LatheMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,Ab3d.Meshes.LatheSection[],System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="startPosition">Point3D that defined the start position of the 3D object (center of the circle defined by the first section)</param>
            <param name="endPosition">Point3D that defined the end position of the 3D object (center of the circle defined by the last section)</param>
            <param name="sections">array of LatheSections that define the offsets and radiused for the sections</param>
            <param name="segments">number of segments that define the circles used to create sections</param>
            <param name="isStartPositionClosed">if true than first section is closed; if false than there is a whole in strat position</param>
            <param name="isEndPositionClosed">if true than last section is closed</param>
            <param name="generateTextureCoordinates">if true than texture coordinates are generated (created mesh is more complicated in this case)</param>
        </member>
        <member name="T:Ab3d.Meshes.LatheSection">
            <summary>
            LatheSection defines one section with specifiying Offset, Radius and IsSharpEdge.
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.LatheSection.Offset">
            <summary>
            Offset of this section - values can from 0 to 1 (0 is StartPosition; 1 is EndPosition)
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.LatheSection.Radius">
            <summary>
            Radius of this section
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.LatheSection.IsSharpEdge">
            <summary>
            If true than the edge of this section is sharp.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.LatheSection.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="offset">offset</param>
            <param name="radius">radius</param>
            <param name="isSharpEdge">isSharpEdge</param>
        </member>
        <member name="T:Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType">
            <summary>
            ExtrudeTextureCoordinatesGenerationType defines the types of texture coordinates generation that are available when using CreateExtrudedMeshGeometry.
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType.None">
            <summary>
            Do not generate texture coordinates (this option is prefered when using solid color material because here no texture coordinates are needed)
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType.AddAdditionalPositions">
            <summary>
            Do not generate any texture coordinates but add additional positions when the last position around the extruded shape meets the first position.
            This allows to generate texture coordinates later with using the right most pixled from the texture on the edge when the last point on the shape meets the first point.
            The additional positions are added when any type of texture geometry generation is used (except None).
            </summary>
        </member>
        <member name="F:Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType.Cylindrical">
            <summary>
            Generates texture coordinates with using cylindrical projection. This means that the top and bottom planes are horizontally mapped to the 2D texture, 
            the texture coordinates for the cylindrical part are generated in such a way as the 2D texture is wrapped around the cylinder (extruded object).
            </summary>
        </member>
        <member name="T:Ab3d.Meshes.Mesh3DFactory">
            <summary>
            Mesh3DFactory class contains static methods that can create MeshGeometry3D objects from 2D objects.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Returns a MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector.
            </summary>
            <remarks>
            <para>
            <b>CreateExtrudedMeshGeometry</b> creates a MeshGeometry3D that represent an extruded 3D objects that is defined with 2D polygon (defined by positions) and that is extruded by using extrudeVector.
            </para>
            <para>
            This method uses <see cref="T:Ab3d.Utilities.Triangulator"/> to create 3D surface from 2D positions.
            </para>
            <para>
            Another version of this method (<see cref="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)"/>) with added parameters for triangleIndices and flipNormals can be also called.
            </para>
            <para>
            <b>NOTE:</b><br/>Because CreateExtrudedMeshGeometry is calling CreateTriangleIndices method (defined in Ab3d.Utilities.Triangulator class), it can <b>throw FormatException</b> when positions are not correctly defined - for example if lines intersect each other.
            </para>
            </remarks>
            <param name="positions">IList of 2D position that define the polygon that is used as the bottom and top surface</param>
            <param name="isSmooth">If true than the mesh appears smooth, if false the edges are sharp</param>
            <param name="modelOffset">Vector3D that defines an offset of the model - offset is added to each position</param>
            <param name="extrudeVector">vector that defines the extrusion - direction and distance of bottom and top surfaces</param>
            <returns>MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector</returns>
            <exception cref="T:System.FormatException">This method can throw FormatException when positions are not correctly defined - for example if lines intersect each other</exception>
        </member>
        <member name="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType)">
            <summary>
            Returns a MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector.
            </summary>
            <remarks>
            <para>
            <b>CreateExtrudedMeshGeometry</b> creates a MeshGeometry3D that represent an extruded 3D objects that is defined with 2D polygon (defined by positions) and that is extruded by using extrudeVector.
            </para>
            <para>
            This method uses <see cref="T:Ab3d.Utilities.Triangulator"/> to create 3D surface from 2D positions.
            </para>
            <para>
            Another version of this method (<see cref="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType)"/>) with added parameters for triangleIndices and flipNormals can be also called.
            </para>
            <para>
            <b>NOTE:</b><br/>Because CreateExtrudedMeshGeometry is calling CreateTriangleIndices method (defined in Ab3d.Utilities.Triangulator class), it can <b>throw FormatException</b> when positions are not correctly defined - for example if lines intersect each other.
            </para>
            </remarks>
            <param name="positions">IList of 2D position that define the polygon that is used as the bottom and top surface</param>
            <param name="isSmooth">If true than the mesh appears smooth, if false the edges are sharp</param>
            <param name="modelOffset">Vector3D that defines an offset of the model - offset is added to each position</param>
            <param name="extrudeVector">Vector3D that defines the extrusion direction and the distance from the start and end surfaces</param>
            <param name="shapeYVector">Vector3D that defines the 3D direction of the y axis in the positions list</param>
            <param name="textureCoordinatesGenerationType">type of texture geometry generation (Cylindrical by default)</param>
            <returns>MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector</returns>
            <exception cref="T:System.FormatException">This method can throw FormatException when positions are not correctly defined - for example if lines intersect each other</exception>
        </member>
        <member name="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Returns a MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector.
            </summary>
            <remarks>
            <para>
            <b>CreateExtrudedMeshGeometry</b> creates a MeshGeometry3D that represent an extruded 3D objects that is defined with 2D polygon (defined by positions) and that is extruded by using extrudeVector.
            </para>
            <para>
            A simplified version of this method (<see cref="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType)"/>) without triangleIndices and flipNormals can be also called.
            </para>
            </remarks>
            <param name="positions">IList of 2D position that defines the shape that will be extruded</param>
            <param name="triangleIndices">IList of int values that represent triangle indices that define the 3D surface from positions</param>
            <param name="isSmooth">If true than the mesh appears smooth, if false the edges are sharp</param>
            <param name="flipNormals">If true than normals are flipped - useed when positions are defined in counter clockwise order</param>
            <param name="modelOffset">Vector3D that defines an offset of the model - offset is added to each position</param>
            <param name="extrudeVector">Vector3D that defines the extrusion direction and the distance from the start and end surfaces</param>
            <returns>MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector</returns>
        </member>
        <member name="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,Ab3d.Meshes.ExtrudeTextureCoordinatesGenerationType)">
            <summary>
            Returns a MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector.
            </summary>
            <remarks>
            <para>
            <b>CreateExtrudedMeshGeometry</b> creates a MeshGeometry3D that represent an extruded 3D objects that is defined with 2D polygon (defined by positions) and that is extruded by using extrudeVector.
            </para>
            <para>
            A simplified version of this method (<see cref="M:Ab3d.Meshes.Mesh3DFactory.CreateExtrudedMeshGeometry(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)"/>) without triangleIndices and flipNormals can be also called.
            </para>
            </remarks>
            <param name="positions">IList of 2D position that defines the shape that will be extruded</param>
            <param name="triangleIndices">IList of int values that represent triangle indices that define the 3D surface from positions</param>
            <param name="isSmooth">If true than the mesh appears smooth, if false the edges are sharp</param>
            <param name="flipNormals">If true than normals are flipped - useed when positions are defined in counter clockwise order</param>
            <param name="modelOffset">Vector3D that defines an offset of the model - offset is added to each position</param>
            <param name="extrudeVector">Vector3D that defines the extrusion direction and the distance from the start and end surfaces</param>
            <param name="shapeYVector">Vector3D that defines the 3D direction of the y axis in the positions list</param>
            <param name="textureCoordinatesGenerationType">type of texture geometry generation (Cylindrical by default)</param>
            <returns>MeshGeometry3D that is created from 2D polygon defined by positions and that is extruded by using extrudeVector</returns>
        </member>
        <member name="M:Ab3d.Meshes.MultiLineMesh3D.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor for MultiLineMesh3D (does not remove duplicate lines)
            </summary>
            <param name="positions">line positions as a list of Point3D - each line is defined by two positions</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.MultiLineMesh3D.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor for MultiLineMesh3D - allow removing duplicate lines with removeDuplicates parameter
            </summary>
            <param name="positions">line positions as a list of Point3D - each line is defined by two positions</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="removeDuplicates">if true the duplicate lines (with same start and end positions) are removed from the positions collection</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.PolylineMesh3D.#ctor(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="positions">line positions as Point3DCollection</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="isClosed">if true the PolylineMesh3D closed the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="M:Ab3d.Meshes.PolylineMesh3D.#ctor(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D},System.Double,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="positions">line positions as Point3DCollection</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="isClosed">if true the PolylineMesh3D closed the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
        </member>
        <member name="T:Ab3d.Meshes.PyramidMesh3D">
            <summary>
            PyramidMesh3D class is used to create MeshGeometry3D that represents a 3D pyramid.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.PyramidMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D pyramid.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.PyramidMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">center position of the bottom rectangle that defines the pyramid</param>
            <param name="size">size of pyramid as Size3D</param>
        </member>
        <member name="T:Ab3d.Meshes.IMesh3D">
            <summary>
            Interface used for all meshes that define the Geometry property
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.IMesh3D.Geometry">
            <summary>
            Gets the geometry as MeshGeometry3D
            </summary>
        </member>
        <member name="T:Ab3d.Meshes.PlaneMesh3D">
            <summary>
            PlaneMesh3D class is used to create MeshGeometry3D that represents a 3D plane.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.PlaneMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D plane.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.PlaneMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Size,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="centerPosition">center position of the plane</param>
            <param name="planeNormal">Vector3D that is perpendicular to the plane</param>
            <param name="planeHeightDirection">Vector3D that defines the direction of the height (used in size)</param>
            <param name="size">size of the plane</param>
            <param name="widthSegments">number of segments in the width direction</param>
            <param name="heightSegments">number of segments in the height direction</param>
        </member>
        <member name="M:Ab3d.Meshes.PlaneMesh3D.AppendPlaneGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Appends the plane geometry to the current geometry
            </summary>
            <param name="geometry">the current geometry that will get additional plane data</param>
        </member>
        <member name="T:Ab3d.Meshes.SphereMesh3D">
            <summary>
            SphereMesh3D class is used to create MeshGeometry3D that represents a 3D sphere.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.SphereMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D sphere.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.SphereMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="centerPosition">center of the sphere</param>
            <param name="radius">radius of the sphere</param>
            <param name="segments">number of segments that define the sphere</param>
        </member>
        <member name="M:Ab3d.Meshes.SphereMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Double,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="centerPosition">center of the sphere</param>
            <param name="radius">radius of the sphere</param>
            <param name="segments">number of segments that define the sphere</param>
            <param name="generateTextureCoordinates">if true than texture coordinates are also generated (if false than slightly optimized sphere with less positions can be created).</param>
        </member>
        <member name="T:Ab3d.Meshes.TrapezoidMesh3D">
            <summary>
            TrapezoidMesh3D class is used to create MeshGeometry3D that represents a 3D trapezoid.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.TrapezoidMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D trapezoid.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.TrapezoidMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">center position of the bottom rectangle</param>
            <param name="bottomSize">2D size of the bottom rectangle</param>
            <param name="topCenterPosition">center position of the top rectangle</param>
            <param name="topSize">2D size of the top rectangle</param>
            <param name="sizeWidthVector3D">Vector3D that defines the direction of the width in the bottomSize and topSize. With upright trapezoid this value is (1, 0, 0) - x axis</param>
            <param name="sizeHeightVector3D">Vector3D that defines the direction of the height in the bottomSize and topSize. With upright trapezoid this value is (0, 0, 1) - z axis</param>
        </member>
        <member name="M:Ab3d.Meshes.TrapezoidMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Point3D,System.Windows.Size)">
            <summary>
            Constructor with default values for sizeWidthVector3D and sizeHeightVector3D to create an upright trapezoid.
            </summary>
            <param name="bottomCenterPosition">center position of the bottom rectangle</param>
            <param name="bottomSize">2D size of the bottom rectangle</param>
            <param name="topCenterPosition">center position of the top rectangle</param>
            <param name="topSize">2D size of the top rectangle</param>
        </member>
        <member name="T:Ab3d.Meshes.TubeLineMesh3D">
            <summary>
            TubeLineMesh3D class is used to create MeshGeometry3D that represents a 3D line from StartPosition to EndPosition created with 3D tube.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.TubeLineMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D cone.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.TubeLineMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="startPosition">startPosition</param>
            <param name="endPosition">endPosition</param>
            <param name="radius">radius</param>
            <param name="segments">segments</param>
            <param name="generateTextureCoordinates">if true than texture coordinates are generated (created mesh is more complicated in this case)</param>
            <param name="isStartPositionClosed">specifies if the tube is closed at its start position (default value is true)</param>
            <param name="isEndPositionClosed">specifies if the tube is closed at its end position (default value is true)</param>
        </member>
        <member name="T:Ab3d.Meshes.TubeMesh3D">
            <summary>
            TubeMesh3D class is used to create MeshGeometry3D that represents a 3D tube.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.TubeMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D cone.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.TubeMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">bottomCenterPosition</param>
            <param name="outerRadius">outerRadius</param>
            <param name="innerRadius">innerRadius</param>
            <param name="height">height</param>
            <param name="segments">segments</param>
        </member>
        <member name="M:Ab3d.Meshes.TubeMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">bottomCenterPosition</param>
            <param name="heightDirection">direction of height</param>
            <param name="outerRadius">outerRadius</param>
            <param name="innerRadius">innerRadius</param>
            <param name="height">height</param>
            <param name="segments">segments</param>
        </member>
        <member name="M:Ab3d.Meshes.TubeMesh3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="bottomCenterPosition">bottomCenterPosition</param>
            <param name="heightDirection">direction of height</param>
            <param name="bottomOuterRadius">bottomOuterRadius</param>
            <param name="bottomInnerRadius">bottomInnerRadius</param>
            <param name="topOuterRadius">topOuterRadius</param>
            <param name="topInnerRadius">topInnerRadius</param>
            <param name="height">height</param>
            <param name="segments">segments</param>
        </member>
        <member name="T:Ab3d.Meshes.TubePathMesh3D">
            <summary>
            TubePathMesh3D class is used to create MeshGeometry3D that represents 3D tubes that follow the specified path.
            </summary>
        </member>
        <member name="P:Ab3d.Meshes.TubePathMesh3D.Geometry">
            <summary>
            Gets the MeshGeometry3D that represents a 3D cone.
            </summary>
        </member>
        <member name="M:Ab3d.Meshes.TubePathMesh3D.#ctor(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pathPositions">Point3DCollection that defines the tube path</param>
            <param name="radius">tube radius</param>
            <param name="isTubeClosed">true is start and end of tube is closed</param>
            <param name="isPathClosed">true is end position is connected to start position</param>
            <param name="generateTextureCoordinates">specifies if texture coordinates are generated</param>
            <param name="segments">segments</param>
        </member>
        <member name="T:Ab3d.Models.Line3DFactory">
            <summary>
            Line3DFactory class contains static methods to crete 3D Lines.
            </summary>
        </member>
        <member name="F:Ab3d.Models.Line3DFactory.WriteLineInfoTag">
            <summary>
            Gets or sets a boolean that specifies if GeometryModel3D that represents 3D line should has Tag property set to LineInfo.
            </summary>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateLine3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D line from startPosition to endPosition.
            </summary>
            <param name="startPosition">start position</param>
            <param name="endPosition">end position</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D line</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateLine3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D line from startPosition to endPosition.
            </summary>
            <param name="startPosition">start position</param>
            <param name="endPosition">end position</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D line</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates series of 3D lines that are defined with positions. The lines are not connected with each other.
            </summary>
            <remarks>
            <para>
            Each line is defined by two positions. positions[0] and positions[1] define the first line. positions[2] and positions[3] define the second line. End so on...
            </para>
            <para>
            To remove duplicate lines defined in positions, use <see cref="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Media.Media3D.Visual3D)"/> method.
            </para>
            <para>
            To create connected lines use <see cref="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)"/> method.
            </para>
            </remarks>
            <param name="positions">positions as Point3DCol a list of Point3D that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D lines</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates series of 3D lines that are defined with positions. The lines are not connected with each other.
            </summary>
            <remarks>
            <para>
            Each line is defined by two positions. positions[0] and positions[1] define the first line. positions[2] and positions[3] define the second line. End so on...
            </para>
            <para>
            To remove duplicate lines defined in positions, use <see cref="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            <para>
            To create connected lines use <see cref="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="positions">positions as  a list of Point3D that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D lines</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates series of 3D lines that are defined with positions. With setting removeDuplicates parameter it is possible to remove duplicate lines. The lines are not connected with each other.
            </summary>
            <remarks>
            <para>
            Each line is defined by two positions. positions[0] and positions[1] define the first line. positions[2] and positions[3] define the second line. End so on...
            </para>
            <para>
            To create connected lines use <see cref="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="positions">positions as a list of Point3D that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="removeDuplicates">if true the duplicate lines (with same start and end positions) are removed from the positions collection</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D lines</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates series of 3D lines that are defined with positions. With setting removeDuplicates parameter it is possible to remove duplicate lines. The lines are not connected with each other.
            </summary>
            <remarks>
            <para>
            Each line is defined by two positions. positions[0] and positions[1] define the first line. positions[2] and positions[3] define the second line. End so on...
            </para>
            <para>
            To remove duplicate lines defined in positions, use <see cref="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            <para>
            To create connected lines use <see cref="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="positions">positions as a list of Point3D that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="removeDuplicates">if true the duplicate lines (with same start and end positions) are removed from the positions collection</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D lines</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Media.Media3D.Transform3D,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates series of 3D lines that are defined with positions. With setting removeDuplicates parameter it is possible to remove duplicate lines. The lines are not connected with each other.
            </summary>
            <remarks>
            <para>
            Each line is defined by two positions. positions[0] and positions[1] define the first line. positions[2] and positions[3] define the second line. End so on...
            </para>
            <para>
            To create connected lines use <see cref="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="positions">positions as a list of Point3D that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="removeDuplicates">if true the duplicate lines (with same start and end positions) are removed from the positions collection</param>
            <param name="transform">Transform3D that is applied to all positions</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D lines</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Media.Media3D.Transform3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates series of 3D lines that are defined with positions. With setting removeDuplicates parameter it is possible to remove duplicate lines. The lines are not connected with each other.
            </summary>
            <remarks>
            <para>
            Each line is defined by two positions. positions[0] and positions[1] define the first line. positions[2] and positions[3] define the second line. End so on...
            </para>
            <para>
            To remove duplicate lines defined in positions, use <see cref="M:Ab3d.Models.Line3DFactory.CreateMultiLine3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Boolean,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            <para>
            To create connected lines use <see cref="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="positions">positions as a list of Point3D that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="removeDuplicates">if true the duplicate lines (with same start and end positions) are removed from the positions collection</param>
            <param name="transform">Transform3D that is applied to all positions</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D lines</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Create series of 3D lines that are connected to each other.
            </summary>
            <remarks>
            <para>
            The lines are defined by setting the using the first Point3D in positions collection as the start point. Than each position defines the new point to where the next line is drawn.
            </para>
            </remarks>
            <param name="positions">positions as Point3DCollection that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Create series of 3D lines that are connected to each other.
            </summary>
            <remarks>
            <para>
            The lines are defined by setting the using the first Point3D in positions collection as the start point. Than each position defines the new point to where the next line is drawn.
            </para>
            </remarks>
            <param name="positions">positions as Point3DCollection that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="areLinesConnected">if true lines are connected to each other, else each line is drawn as a separate line</param>       
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that are connected to each other.
            </summary>
            <remarks>
            <para>
            The lines are defined by setting the using the first Point3D in positions collection as the start point. Than each position defines the new point to where the next line is drawn.
            </para>
            </remarks>
            <param name="positions">positions as Point3DCollection that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Windows.Media.Media3D.Point3DCollection,System.Double,System.Windows.Media.Color,System.Boolean,System.Boolean,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that are connected to each other.
            </summary>
            <remarks>
            <para>
            The lines are defined by setting the using the first Point3D in positions collection as the start point. Than each position defines the new point to where the next line is drawn.
            </para>
            </remarks>
            <param name="positions">positions as Point3DCollection that define the lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="areLinesConnected">if true lines are connected to each other, else each line is drawn as a separate line</param>
            <param name="isClosed">if true the PolylineMesh3D closes the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3DCollection},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position3DCollections">list of Point3DCollection</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3DCollection},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position3DCollections">list of Point3DCollection</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3DCollection},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Int32,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position3DCollections">list of Point3DCollection</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="lineSegmentsCountForArrowLength">lineSegmentsCountForArrowLength</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3DCollection},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Int32,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position3DCollections">list of Point3DCollection</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="lineSegmentsCountForArrowLength">lineSegmentsCountForArrowLength</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3DCollection},System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Int32,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position3DCollections">list of Point3DCollection</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="lineSegmentsCountForArrowLength">Set the number of line segments that define the maximum arrow length</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.PointCollection},System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position2DCollections">list of PointCollection</param>
            <param name="startPosition">start position as Point3D</param>
            <param name="xDirection">x direction as Vector3D</param>
            <param name="yDirection">y direction as Vector3D</param>        
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.PointCollection},System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position2DCollections">list of PointCollection</param>
            <param name="startPosition">start position as Point3D</param>
            <param name="xDirection">x direction as Vector3D</param>
            <param name="yDirection">y direction as Vector3D</param>        
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreatePolyLine3D(System.Collections.Generic.List{System.Windows.Media.PointCollection},System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that are connected to each other from a 2D points collection
            </summary>
            <param name="position2DCollections">list of PointCollection</param>
            <param name="startPosition">start position as Point3D</param>
            <param name="xDirection">x direction as Vector3D</param>
            <param name="yDirection">y direction as Vector3D</param>        
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">line color</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D polyline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateRectangle3D(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates a 3D rectangle from four connected 3D lines.
            </summary>
            <param name="position">position of the top left point of the rectangle</param>
            <param name="size">size of the rectangle</param>
            <param name="widthDirection">direction of the width</param>
            <param name="heightDirection">direction of the height</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">line color</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D rectangle</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateRectangle3D(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates a 3D rectangle from four connected 3D lines.
            </summary>
            <param name="position">position of the top left point of the rectangle</param>
            <param name="size">size of the rectangle</param>
            <param name="widthDirection">direction of the width</param>
            <param name="heightDirection">direction of the height</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">line color</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D rectangle</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
            <param name="length">length of the axis lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>Model3D that defines the axis</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
            <param name="length">length of the lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>Model3D that defines the axis</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateColoredAxis3D(System.Double,System.Double,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
            <remarks>
            <para>
            The default colors of the axis are Red: X, Green: Y, Blue:Z - it is simple to remembered the colors: RGB = XYZ.
            </para>
            <para>
            It is possible to create axis with the same color with <see cref="M:Ab3d.Models.Line3DFactory.CreateAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)"/> method.
            Axis with custom colors can be created with <see cref="M:Ab3d.Models.Line3DFactory.CreateColoredAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)"/> method.
            </para>
            </remarks>
            <param name="length">length of the lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>Model3D that defines the axis</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateColoredAxis3D(System.Double,System.Double,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
            <remarks>
            <para>
            The default colors of the axis are Red: X, Green: Y, Blue:Z - it is simple to remembed the colors: RGB = XYZ.
            </para>
            <para>
            It is possible to create axis with the same color with <see cref="M:Ab3d.Models.Line3DFactory.CreateAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)"/> method.
            Axis with custom colors can be created with <see cref="M:Ab3d.Models.Line3DFactory.CreateColoredAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="length">length of the lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>Model3D that defines the axis</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateColoredAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
            <remarks>
            <para>
            It is possible to create axis with the same color with <see cref="M:Ab3d.Models.Line3DFactory.CreateAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="length">length of the lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="xAxisColor">color of X axis</param>
            <param name="yAxisColor">color of Y axis</param>
            <param name="zAxisColor">color of Z axis</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>Model3D that defines the axis</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateColoredAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
            <remarks>
            <para>
            It is possible to create axis with the same color with <see cref="M:Ab3d.Models.Line3DFactory.CreateAxis3D(System.Double,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="length">length of the lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="xAxisColor">color of X axis</param>
            <param name="yAxisColor">color of Y axis</param>
            <param name="zAxisColor">color of Z axis</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>Model3D that defines the axis</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateHorizontalWireGrid(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Int32,System.Int32,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates a horizontally aligned grid defined by 3D lines.
            </summary>
            <param name="centerPosition">grid center position</param>
            <param name="size">size of the grid</param>
            <param name="widthCellsCount">number of cells in the width direction</param>
            <param name="heightCellsCount">number of cells in the height direction</param>
            <param name="lineThickness">thickness of the used lines in screen coordinates</param>
            <param name="lineColor">color of used lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the horizontally aligned grid</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateHorizontalWireGrid(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Int32,System.Int32,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates a horizontally aligned grid defined by 3D lines.
            </summary>
            <param name="centerPosition">grid center position</param>
            <param name="size">size of the grid</param>
            <param name="widthCellsCount">number of cells in the width direction</param>
            <param name="heightCellsCount">number of cells in the height direction</param>
            <param name="lineThickness">thickness of the used lines in screen coordinates</param>
            <param name="lineColor">color of used lines</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the horizontally aligned grid</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateWireCross3D(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates three perpendicular 3D lines that are crossing at the specified position and are specified linesLength long.
            </summary>
            <param name="position">position of the lines crossing</param>
            <param name="linesLength">length of the lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>lines model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateWireCross3D(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates three perpendicular 3D lines that are crossing at the specified position and are specified linesLength long.
            </summary>
            <param name="position">position of the lines crossing</param>
            <param name="linesLength">length of the lines</param>
            <param name="thicknes">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>lines model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateWireBox3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D Box.
            </summary>
            <param name="centerPosition">Box center position</param>
            <param name="size">Size of the box</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>lines model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateWireBox3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D Box.
            </summary>
            <param name="centerPosition">Box center position</param>
            <param name="size">Size of the box</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>lines model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateWireBox3D(System.Windows.Media.Media3D.Rect3D,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D Box.
            </summary>
            <param name="rect">Rect3D that defines the 3D Box</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>lines model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateWireBox3D(System.Windows.Media.Media3D.Rect3D,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D Box.
            </summary>
            <param name="rect">Rect3D that defines the 3D Box</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="color">color of the lines</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>lines model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateLineArc3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Media3D.Vector3D,System.Double,System.Double,System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D Arc (part of the circle).
            </summary>
            <param name="circleCenterPosition">center position of the circle that defined the arc</param>
            <param name="circleNormal">the normal vector of the circle that defined the arc (the vector that is perpendicular to the circle)</param>
            <param name="radius">the radius of the circle that defines the arc</param>
            <param name="zeroAngleDirection">the Vector3D that is pointing from center position to the position on the circle where the arc's angle is zero</param>
            <param name="startAngle">the angle in degrees where the arc begins</param>
            <param name="endAngle">the angle in degrees where the arc ends</param>
            <param name="segments">the number of lines that are used to define the arc</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D arc</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateLineArc3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Windows.Media.Media3D.Vector3D,System.Double,System.Double,System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D Arc (part of the circle).
            </summary>
            <param name="circleCenterPosition">center position of the circle that defined the arc</param>
            <param name="circleNormal">the normal vector of the circle that defined the arc (the vector that is perpendicular to the circle)</param>
            <param name="radius">the radius of the circle that defines the arc</param>
            <param name="zeroAngleDirection">the Vector3D that is pointing from center position to the position on the circle where the arc's angle is zero</param>
            <param name="startAngle">the angle in degrees where the arc begins</param>
            <param name="endAngle">the angle in degrees where the arc ends</param>
            <param name="segments">the number of lines that are used to define the arc</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D arc</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateBSpline3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D B-Spline.
            </summary>
            <param name="controlPoints">control points for B-Spline</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D B-Spline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateBSpline3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D B-Spline.
            </summary>
            <param name="controlPoints">control points for B-Spline</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D B-Spline</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateNURBSCurve3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Double},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D NURBS curve (BSpline with weighted control points).
            </summary>
            <param name="controlPoints">controlPoints that define the line</param>
            <param name="weights">weights that weight the control points</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateNURBSCurve3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Double},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D NURBS curve (BSpline with weighted control points).
            </summary>
            <param name="controlPoints">controlPoints that define the line</param>
            <param name="weights">weights that weight the control points</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateCurveThroughPoints3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D curve that goes through specified lines.
            </summary>
            <param name="points">points that define the line</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateCurveThroughPoints3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D curve that goes through specified lines.
            </summary>
            <param name="points">points that define the line</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateCurveThroughPoints3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D curve that goes through specified lines.
            </summary>
            <param name="points">points that define the line</param>
            <param name="curveScale">curve scale defines the curvation of the curve - default value is 0.25</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateCurveThroughPoints3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D curve that goes through specified lines.
            </summary>
            <param name="points">points that define the line</param>
            <param name="curveScale">curve scale defines the curvation of the curve - default value is 0.25</param>       
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateBezierCurve3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a 3D bezier curve.
            </summary>
            <param name="controlPoints">control points that define the bezier curve</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="M:Ab3d.Models.Line3DFactory.CreateBezierCurve3D(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32,System.Double,System.Windows.Media.Color,Ab3d.Common.Models.LineCap,Ab3d.Common.Models.LineCap,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a 3D bezier curve.
            </summary>
            <param name="controlPoints">control points that define the bezier curve</param>
            <param name="positionsPerSegment">the number of positions that are used to define one curve segment</param>
            <param name="lineThickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="startLineCap">LineCap that is used for start position of each line</param>
            <param name="endLineCap">LineCap that is used for end position of each line</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>GeometryModel3D that defines the 3D curve</returns>
        </member>
        <member name="T:Ab3d.Models.Model3DFactory">
            <summary>
            Model3DFactory class contains static methods to crete 3D models.
            </summary>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Box model from rect3D.
            </summary>
            <remarks>
            <para>
            The <b>CreateBox</b> creates a 3D box where all sides have the same materials.
            </para>
            <para>
            To creates a 3D box where each side of the box can have its own material use <see cref="M:Ab3d.Models.Model3DFactory.CreateMultiMaterialBox(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)"/>.
            </para>
            </remarks>
            <param name="rect3D">defines size and position of the box</param>
            <param name="material">material</param>
            <returns>3D Box model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Box model positioned at (0, 0, 0).
            </summary>
            <remarks>
            <para>
            The <b>CreateBox</b> creates a 3D box where all sides have the same materials.
            </para>        
            <para>
            To create 3D Box at custom position use <see cref="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            <para>
            To creates a 3D box where each side of the box can have its own material use <see cref="M:Ab3d.Models.Model3DFactory.CreateMultiMaterialBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)"/>.
            </para>        
            </remarks>        
            <param name="size">size of the box</param>
            <param name="material">material</param>
            <returns>3D Box model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Box model at custom position.
            </summary>
            <remarks>
            <para>
            The <b>CreateBox</b> creates a 3D box where all sides have the same materials.
            </para>        
            <para>
            To creates a 3D box where each side of the box can have its own material use <see cref="M:Ab3d.Models.Model3DFactory.CreateMultiMaterialBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)"/>.
            </para>        
            </remarks>              
            <param name="centerPosition">box center position</param>
            <param name="size">size of the box</param>
            <param name="material">material</param>
            <returns>3D Box model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Int32,System.Int32,System.Int32,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Box model at custom position and with custom x, y and z cells count.
            </summary>
            <remarks>
            <para>
            The <b>CreateBox</b> creates a 3D box where all sides have the same materials.
            </para>        
            <para>
            To creates a 3D box where each side of the box can have its own material use <see cref="M:Ab3d.Models.Model3DFactory.CreateMultiMaterialBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Int32,System.Int32,System.Int32,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)"/>.
            </para>        
            </remarks>           
            <param name="centerPosition">box center position</param>
            <param name="size">size of the box</param>
            <param name="xCellsCount">number of cells in x direction</param>
            <param name="yCellsCount">number of cells in y direction</param>
            <param name="zCellsCount">number of cells in z direction</param>
            <param name="material">material</param>
            <returns>3D Box model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateMultiMaterialBox(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)">
            <summary>
            Creates a 3D Box model where each side can have its own material.
            </summary>
            <remarks>
            <para>
            The <b>CreateMultiMaterialBox</b> creates a 3D box where each side of the box can have its own material.
            </para>
            <para>
            To create a 3D box where all sides have the same material use <see cref="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>
            <param name="rect3D">defines size and position of the box</param>
            <param name="topMaterial">top material</param>
            <param name="bottomMaterial">bottom material</param>
            <param name="leftMaterial">left material</param>
            <param name="rightMaterial">right material</param>
            <param name="frontMaterial">front material</param>
            <param name="backMaterial">back material</param>
            <param name="isBackMaterialSet">is true the BackMaterial for each side is set to the same value as Material.</param>
            <returns>3D Box model as Model3DGroup</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateMultiMaterialBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)">
            <summary>
            Creates a 3D Box model where each side can have its own material.
            </summary>
            <remarks>
            <para>
            The <b>CreateMultiMaterialBox</b> creates a 3D box where each side of the box can have its own material.
            </para>
            <para>
            To create a 3D box where all sides have the same material use <see cref="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>        
            <param name="centerPosition">box center position</param>
            <param name="size">size of the box</param>
            <param name="topMaterial">top material</param>
            <param name="bottomMaterial">bottom material</param>
            <param name="leftMaterial">left material</param>
            <param name="rightMaterial">right material</param>
            <param name="frontMaterial">front material</param>
            <param name="backMaterial">back material</param>
            <param name="isBackMaterialSet">is true the BackMaterial for each side is set to the same value as Material.</param>       
            <returns>3D Box model as Model3DGroup</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateMultiMaterialBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Int32,System.Int32,System.Int32,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)">
            <summary>
            Creates a 3D Box model where each side can have its own material.
            </summary>
            <remarks>
            <para>
            The <b>CreateMultiMaterialBox</b> creates a 3D box where each side of the box can have its own material.
            </para>
            <para>
            To create a 3D box where all sides have the same material use <see cref="M:Ab3d.Models.Model3DFactory.CreateBox(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Int32,System.Int32,System.Int32,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>        
            <param name="centerPosition">box center position</param>
            <param name="size">size of the box</param>
            <param name="xCellsCount">number of cells in x direction</param>
            <param name="yCellsCount">number of cells in y direction</param>
            <param name="zCellsCount">number of cells in z direction</param>
            <param name="topMaterial">top material</param>
            <param name="bottomMaterial">bottom material</param>
            <param name="leftMaterial">left material</param>
            <param name="rightMaterial">right material</param>
            <param name="frontMaterial">front material</param>
            <param name="backMaterial">back material</param>
            <param name="isBackMaterialSet">is true the BackMaterial for each side is set to the same value as Material.</param>
            <returns>3D Box model as Model3DGroup</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateHorizontalPlane(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a horizontally aligned 3D plane - aligned with X and Z axis.
            </summary>
            <remarks>
            <para>
            To create customly aligned plane use <see cref="M:Ab3d.Models.Model3DFactory.CreatePlane(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Size,System.Int32,System.Int32,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>
            <param name="centerPosition">plane center position</param>
            <param name="size">size of the plane</param>
            <param name="material">material</param>
            <returns>3D Plane model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateVerticalPlane(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a vertically aligned 3D plane - aligned with X and Y axis.
            </summary>
            <remarks>
            <para>
            To create customly aligned plane use <see cref="M:Ab3d.Models.Model3DFactory.CreatePlane(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Size,System.Int32,System.Int32,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>
            <param name="centerPosition">plane center position</param>
            <param name="size">size of the plane</param>
            <param name="material">material</param>
            <returns>3D Plane model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreatePlane(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Size,System.Int32,System.Int32,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates customly aligned 3D plane.
            </summary>
            <para>
            To create horizontally aligned plane use <see cref="M:Ab3d.Models.Model3DFactory.CreateHorizontalPlane(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Material)"/> method.
            </para>         
            <param name="centerPosition">plane center position</param>
            <param name="planeNormal">Vector3D that is perpendicular to the plane</param>
            <param name="planeHeightDirection">Vector3D that defines the direction of the height (used in size)</param>
            <param name="size">size of the plane</param>
            <param name="width_cells_count">cells count in width direction</param>
            <param name="length_cells_count">cells count in height direction</param>
            <param name="material">material</param>
            <returns>3D Plane model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateHorizontalCircle(System.Windows.Media.Media3D.Point3D,System.Double,System.Int32,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a horizontally aligned 3D circle.
            </summary>
            <remarks>
            <para>
            To create customly aligned circle use <see cref="M:Ab3d.Models.Model3DFactory.CreateCircle(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Int32,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>
            <param name="centerPosition">circle center position</param>
            <param name="radius">radius of the circle</param>
            <param name="segments">number of segments that are used to define the circle</param>        
            <param name="material">material</param>
            <returns>3D Circle model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateCircle(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Int32,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a customly aligned 3D circle.
            </summary>
            <param name="centerPosition">circle center position</param>
            <param name="normal">circle normal as Vector3D</param>
            <param name="upDirection">Vector3D that is pointing from center position to the circle's top position</param>
            <param name="radius">radius of the circle</param>
            <param name="segments">number of segments that are used to define the circle</param>
            <param name="material">material</param>
            <returns>3D Circle model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateSphere(System.Double,System.Int32,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Sphere model positioned at (0, 0, 0).
            </summary>
            <remarks>
            <para>
            To create 3D Sphere at custom position use <see cref="M:Ab3d.Models.Model3DFactory.CreateSphere(System.Windows.Media.Media3D.Point3D,System.Double,System.Int32,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>           
            <param name="radius">radius of the sphere</param>
            <param name="segments">number of segments that define the sphere</param>
            <param name="material">material</param>
            <returns>3D Sphere model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateSphere(System.Windows.Media.Media3D.Point3D,System.Double,System.Int32,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Sphere model at custom position.
            </summary>
            <param name="centerPosition">sphere center position</param>
            <param name="radius">radius of the sphere</param>
            <param name="segments">number of segments that define the sphere</param>
            <param name="material">material</param>
            <returns>3D Sphere model as GeometryModel3D</returns>        
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreatePyramid(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Pyramid model positioned at (0, 0, 0).
            </summary>
            <remarks>
            <para>
            To create 3D Pyramid at custom position use <see cref="M:Ab3d.Models.Model3DFactory.CreatePyramid(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>          
            <param name="size">size of pyramid</param>
            <param name="material">material</param>
            <returns>3D Pyramid model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreatePyramid(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Pyramid model at custom position.
            </summary>
            <param name="bottomCenterPosition">center position of the bottom rectangle that defines the pyramid</param>
            <param name="size">size of pyramid</param>
            <param name="material">material</param>
            <returns>3D Pyramid model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateCone(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Int32,System.Boolean,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Cone model.
            </summary>
            <remarks>
            <para>
            Cone model is similar to Cylinder model. The difference is that the Cylinder has both top and bottom circle radius the same.
            Cylinder can be created with <see cref="M:Ab3d.Models.Model3DFactory.CreateCylinder(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Int32,System.Boolean,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>
            <param name="bottomCenterPosition">center position of the bottom circle that defines the cone</param>
            <param name="topRadius">radius of the top circle that defines the cone</param>
            <param name="bottomRadius">radius of the bottom circle that defines the cone</param>
            <param name="height">height of the cone</param>
            <param name="segments">number of segments that define the top and bottom circles of the cone</param>
            <param name="isSmooth">if true the cone is smooth, if false the edges on the cone are sharp</param>
            <param name="material">material</param>
            <returns>3D Cone model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateCylinder(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Int32,System.Boolean,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Cylinder model.
            </summary>
            <remarks>
            <para>
            Cylinder model is similar to Cone model. The difference is that the Cylinder has both top and bottom circle radius the same.
            Cone can be created with <see cref="M:Ab3d.Models.Model3DFactory.CreateCone(System.Windows.Media.Media3D.Point3D,System.Double,System.Double,System.Double,System.Int32,System.Boolean,System.Windows.Media.Media3D.Material)"/> method.
            </para>
            </remarks>
            <param name="bottomCenterPosition">center position of the bottom circle that defines the cone</param>
            <param name="radius">radius of the cylinder</param>
            <param name="height">height of the cylinder</param>
            <param name="segments">number of segments that define the top and bottom circles of the cylinder</param>
            <param name="isSmooth">if true the cylinder is smooth, if false the edges on the cylinder are sharp</param>
            <param name="material">material</param>
            <returns>3D Cylinder model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateTrapezoid(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates a 3D Trapezoid model with custom direction that is specified with sizeWidthVector3D and sizeHeightVector3D.
            </summary>
            <param name="bottomCenterPosition">center position of the bottom rectangle</param>
            <param name="bottomSize">2D size of the bottom rectangle</param>
            <param name="topCenterPosition">center position of the top rectangle</param>
            <param name="topSize">2D size of the top rectangle</param>
            <param name="sizeWidthVector3D">Vector3D that defines the direction of the width in the bottomSize and topSize. With upright trapezoid this value is (1, 0, 0) - x axis</param>
            <param name="sizeHeightVector3D">Vector3D that defines the direction of the height in the bottomSize and topSize. With upright trapezoid this value is (0, 0, 1) - z axis</param>
            <param name="material">material</param>
            <returns>3D Trapezoid model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateTrapezoid(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates an upright 3D Trapezoid model.
            </summary>
            <param name="bottomCenterPosition">center position of the bottom rectangle</param>
            <param name="bottomSize">2D size of the bottom rectangle</param>
            <param name="topCenterPosition">center position of the top rectangle</param>
            <param name="topSize">2D size of the top rectangle</param>
            <param name="material">material</param>
            <returns>3D Trapezoid model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.Model3DFactory.CreateTrapezoid(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Size,System.Double,System.Windows.Media.Media3D.Material)">
            <summary>
            Creates an upright 3D Trapezoid model.
            </summary>
            <param name="bottomCenterPosition">center position of the bottom rectangle</param>
            <param name="bottomSize">2D size of the bottom rectangle</param>
            <param name="topSize">2D size of the top rectangle</param>
            <param name="height">height of the trapezoid</param>
            <param name="material">material</param>
            <returns>3D Trapezoid model as GeometryModel3D</returns>
        </member>
        <member name="T:Ab3d.Models.Text3DFactory">
            <summary>
            Text3DFactory class contains static methods to crete 3D text.
            </summary>
        </member>
        <member name="M:Ab3d.Models.Text3DFactory.CreateText3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.String,System.Windows.Media.Color,System.Double,System.Double,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Create series of 3D lines that represents a 3D text.
            </summary>
            <param name="position">top left 3D position of the first character</param>
            <param name="textDirection">direction in which the text will be creates as Vector3D</param>
            <param name="upDirection">text's up direction as Vector3D</param>
            <param name="text">text to display</param>
            <param name="textColor">text color</param>
            <param name="fontSize">size of the used font</param>
            <param name="lineThickness">thickness of the used lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>Model3D that defines the 3D text</returns>
        </member>
        <member name="M:Ab3d.Models.Text3DFactory.CreateText3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.String,System.Windows.Media.Color,System.Double,System.Double,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that represents a 3D text.
            </summary>
            <param name="position">top left 3D position of the first character</param>
            <param name="textDirection">direction in which the text will be creates as Vector3D</param>
            <param name="upDirection">text's up direction as Vector3D</param>
            <param name="text">text to display</param>
            <param name="textColor">text color</param>
            <param name="fontSize">size of the used font</param>
            <param name="lineThickness">thickness of the used lines</param>
            <param name="parentViewport3D">parent parentViewport3D</param>
            <returns>Model3D that defines the 3D text</returns>
        </member>
        <member name="M:Ab3d.Models.Text3DFactory.CreateCenteredText3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.String,System.Windows.Media.Color,System.Double,System.Double,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Create series of 3D lines that represents a 3D text. The 3D text is centered at the centerPosition.
            </summary>
            <param name="centerPosition">center position of the text</param>
            <param name="textDirection">direction in which the text will be creates as Vector3D</param>
            <param name="upDirection">text's up direction as Vector3D</param>
            <param name="text">text to display</param>
            <param name="textColor">text color</param>
            <param name="fontSize">size of the used font</param>
            <param name="lineThickness">thickness of the used lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>Model3D that defines the 3D text</returns>
        </member>
        <member name="M:Ab3d.Models.Text3DFactory.CreateCenteredText3D(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.String,System.Windows.Media.Color,System.Double,System.Double,System.Windows.Controls.Viewport3D)">
            <summary>
            Create series of 3D lines that represents a 3D text. The 3D text is centered at the centerPosition.
            </summary>
            <param name="centerPosition">center position of the text</param>
            <param name="textDirection">direction in which the text will be creates as Vector3D</param>
            <param name="upDirection">text's up direction as Vector3D</param>
            <param name="text">text to display</param>
            <param name="textColor">text color</param>
            <param name="fontSize">size of the used font</param>
            <param name="lineThickness">thickness of the used lines</param>
            <param name="parentViewport3D">parent parentViewport3D</param>
            <returns>Model3D that defines the 3D text</returns>
        </member>
        <member name="M:Ab3d.Models.Text3DFactory.MeasureText(System.String,System.Double)">
            <summary>
            MeasureText returns the Size of the text with the specified fontSize.
            </summary>
            <param name="text">text to measure</param>
            <param name="fontSize">used fontSize</param>
            <returns>measured text size as Size</returns>
        </member>
        <member name="T:Ab3d.Models.WireframeFactory">
            <summary>
            WireframeFactory class contains static methods to crete wireframe objects (defined by 3D lines) from already defined 3D objects.
            </summary>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.UIElement3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="uiElement3D">original 3D object as UIElement3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.UIElement3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="uiElement3D">original 3D object as UIElement3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.ModelVisual3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="visual3D">original 3D object as ModelVisual3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.ModelVisual3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="visual3D">original 3D object as ModelVisual3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.Model3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="model">original 3D object as Model3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.Model3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Windows.Controls.Viewport3D,System.Func{System.Windows.Media.Media3D.GeometryModel3D,System.Boolean})">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="model">original 3D object as Model3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <param name="modelSelectorFunc">When set the Func takes in a GeometryModel3D and returns a Boolean that specifies if wireframe is created for this GeometryModel3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.Model3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Media3D.Visual3D,System.Func{System.Windows.Media.Media3D.GeometryModel3D,System.Boolean})">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="model">original 3D object as Model3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="removedDuplicates">if true than duplicate lines are removed</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <param name="modelSelectorFunc">When set the Func takes in a GeometryModel3D and returns a Boolean that specifies if wireframe is created for this GeometryModel3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.Model3D,System.Double,System.Boolean,System.Windows.Media.Color,System.Boolean,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <remarks>
            <para>
            If preserveLineColor parameter is true, the line color is taken from the original 3D model. If color cannot be found, the color from lineColor parameter is used as fallback value.
            </para>
            <para>
            If preserveLineColor parameter is false, the color from lineColor parameter is used.
            </para>
            </remarks>
            <param name="model">original 3D object as Model3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="preserveLineColor">if true the line color is taken from the original 3D model</param>
            <param name="lineColor">color of the lines (if preserveLineColor is true, lineColor is used as fallback color)</param>
            <param name="removedDuplicates">if true than duplicate lines are removed</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.MeshGeometry3D,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.MeshGeometry3D,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="thickness">line thickness in screen coordinates</param>        
            <param name="lineColor">color of the lines</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Transform3D,System.Double,System.Windows.Media.Color,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="transform">Transform3D that is applied to all positions or null if no transformation is applied</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Transform3D,System.Double,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="transform">Transform3D that is applied to all positions or null if no transformation is applied</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="removedDuplicates">if true than duplicate lines are removed</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Transform3D,System.Double,System.Windows.Media.Color,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="transform">Transform3D that is applied to all positions or null if no transformation is applied</param>
            <param name="thickness">line thickness in screen coordinates</param>        
            <param name="lineColor">color of the lines</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateWireframe(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Transform3D,System.Double,System.Windows.Media.Color,System.Boolean,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent a wireframe model from the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="transform">Transform3D that is applied to all positions or null if no transformation is applied</param>
            <param name="thickness">line thickness in screen coordinates</param>        
            <param name="lineColor">color of the lines</param>
            <param name="removedDuplicates">if true than duplicate lines are removed</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>wireframe model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateNormals(System.Windows.Media.Media3D.MeshGeometry3D,System.Double,System.Double,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent normals of the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="normalScale">length of the normal lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="addArrow">if true an arrow is added at the end of each normal</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>normals model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateNormals(System.Windows.Media.Media3D.MeshGeometry3D,System.Double,System.Double,System.Windows.Media.Color,System.Boolean,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent normals of the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="normalScale">length of the normal lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="addArrow">if true an arrow is added at the end of each normal</param>
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>normals model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateNormals(System.Windows.Media.Media3D.MeshGeometry3D,System.Double,System.Double,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Media3D.Transform3D,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Creates 3D lines that represent normals of the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="normalScale">length of the normal lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="addArrow">if true an arrow is added at the end of each normal</param>
            <param name="transform">Transform3D that is applied to all normals</param>
            <param name="parentVisual3D">parent Visual3D</param>
            <returns>normals model as GeometryModel3D</returns>
        </member>
        <member name="M:Ab3d.Models.WireframeFactory.CreateNormals(System.Windows.Media.Media3D.MeshGeometry3D,System.Double,System.Double,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Media3D.Transform3D,System.Windows.Controls.Viewport3D)">
            <summary>
            Creates 3D lines that represent normals of the already defined 3D object.
            </summary>
            <param name="meshGeometry">original 3D object as MeshGeometry3D</param>
            <param name="normalScale">length of the normal lines</param>
            <param name="thickness">line thickness in screen coordinates</param>
            <param name="lineColor">color of the lines</param>
            <param name="addArrow">if true an arrow is added at the end of each normal</param>
            <param name="transform">Transform3D that is applied to all normals</param>        
            <param name="parentViewport3D">parent Viewport3D</param>
            <returns>normals model as GeometryModel3D</returns>
        </member>
        <member name="T:Ab3d.ObjFileException">
            <summary>
            ObjFileException can be thrown when reading obj file with ReaderObj class.
            </summary>
        </member>
        <member name="M:Ab3d.ObjFileException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.ObjFileException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Ab3d.ObjFileException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ab3d.ObjFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:Ab3d.ObjFile.ObjFileData">
            <summary>
            ObjFileData class contains meshes and materials that were read from obj file.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjFileData.Positions">
            <summary>
            Gets a list of positions that are used by the ObjMeshGroup. 
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjFileData.Normals">
            <summary>
            Gets a list of normals that are used by the ObjMeshGroup. 
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjFileData.TextureCoordinates">
            <summary>
            Gets a list of texture coordinates that are used by the ObjMeshGroup. 
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjFileData.MaterialLibrary">
            <summary>
            Gets a dictionary of all the materials defined in the material library that is associated with this obj file.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjFileData.Meshes">
            <summary>
            Gets list of all ObjMeshData objects.
            </summary>
        </member>
        <member name="M:Ab3d.ObjFile.ObjFileData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ObjFileData class.
            </summary>
            <param name="initialCollectionsCapacity">initialCollectionsCapacity</param>
        </member>
        <member name="T:Ab3d.ObjFile.ObjMaterial">
            <summary>
            ObjMaterial defines a material that was read from mtl file.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.Name">
            <summary>
            Gets or sets a name of the material.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.Alpha">
            <summary>
            Gets or set an alpha transparency value for that material (1 is non-transparent, 0 is fully transparent)
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.DiffuseTexture">
            <summary>
            Gets or sets a name of the file that is used as a diffuse texture.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.SpecularPower">
            <summary>
            Gets or sets a value used for specular power.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.SpecularTexture">
            <summary>
            Gets or sets a name of the file that is used as a specular texture.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.BumpTexture">
            <summary>
            Gets or sets a name of the file that is used as a bump texture.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.AmbientColor">
            <summary>
            Gets or sets an ambient color.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.DiffuseColor">
            <summary>
            Gets or sets a diffuse color.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.EmissiveColor">
            <summary>
            Gets or sets an emissive color.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMaterial.SpecularColor">
            <summary>
            Gets or sets a specular color.
            </summary>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMaterial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMaterial.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
        </member>
        <member name="T:Ab3d.ObjFile.ObjMesh">
            <summary>
            ObjMesh defines the mesh object in obj file. It contains one or more ObjMeshGroup that define the faces that defined the 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMesh.Name">
            <summary>
            Gets or sets the ObjMesh name.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMesh.ChildMeshGroups">
            <summary>
            Gets a list of child ObjMeshGroup objects.
            </summary>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMesh.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMesh.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMesh.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Ab3d.ObjFile.ObjMeshGroup">
            <summary>
            ObjMeshGroup is used to group faces inside obj mesh.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMeshGroup.Name">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMeshGroup.PositionIndexes">
            <summary>
            Gets a list of position indexes that specify which positions from the parent ObjFileData are used for this group.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMeshGroup.NormalIndexes">
            <summary>
            Gets a list of normal indexes that specify which normal from the parent ObjFileData are used for this group.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMeshGroup.TextureCoordinateIndexes">
            <summary>
            Gets a list of texture coordinate indexes that specify which texture coordinate from the parent ObjFileData are used for this group.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFile.ObjMeshGroup.Material">
            <summary>
            Gets or sets a material that is used for faces in this group.
            </summary>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMeshGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMeshGroup.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.ObjFile.ObjMeshGroup.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Ab3d.ObjFileToWpfModel3DConverter">
            <summary>
            ObjFileToWpfModel3DConverter class can be used to convert the ObjFileData (3d model read from obj file) into WPF's Model3D. 
            </summary>
        </member>
        <member name="P:Ab3d.ObjFileToWpfModel3DConverter.DefaultMaterial">
            <summary>
            Gets or sets a material that is used when no other material is specified in obj file.
            By default DefaultMaterial is set to Silver DiffuseMaterial.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFileToWpfModel3DConverter.DefaultBackMaterial">
            <summary>
            Gets or sets a material that is used for BackMaterial when no other back material is specified in obj file.
            When set to null, no BackMaterial will be used.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFileToWpfModel3DConverter.InvertYTextureCoordinate">
            <summary>
            Gets or sets a boolean that specifies if Y texture coordinate is inverted.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFileToWpfModel3DConverter.TexturesDirectory">
            <summary>
            Gets or sets a folder name that when set is used to read texture file names from.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFileToWpfModel3DConverter.ResolveResourceFunc">
            <summary>
            Gets or sets a Func that returns stream from the specified resource name. This can be used to read resources from stream.
            The returned stream will be closed by the ReaderObj.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFileToWpfModel3DConverter.ReuseMaterials">
            <summary>
            Gets or sets a boolean that specified if one material instance defined in obj file can be reused for all Model3D objects that use that material.
            If false than a new material instance will be created for each usage. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.ObjFileToWpfModel3DConverter.NamedObjects">
            <summary>
            Gets a Dictionary with object name as key and Model3D as value that defines names for the objects.
            </summary>
        </member>
        <member name="M:Ab3d.ObjFileToWpfModel3DConverter.#ctor">
            <summary>
            Initializes a new instance of the ObjMeshToWpfModel3DConverter class.
            </summary>
        </member>
        <member name="M:Ab3d.ObjFileToWpfModel3DConverter.Convert(Ab3d.ObjFile.ObjFileData)">
            <summary>
            Converts the ObjFileData into Model3D.
            </summary>
            <param name="objFileData">ObjFileData</param>
            <returns>Model3D</returns>
        </member>
        <member name="M:Ab3d.ObjFileToWpfModel3DConverter.Convert(Ab3d.ObjFile.ObjMesh,Ab3d.ObjFile.ObjFileData)">
            <summary>
            Converts one ObjMeshData from ObjFileData into Model3D
            </summary>
            <param name="meshData">ObjMeshData</param>
            <param name="objFileData">ObjFileData</param>
            <returns>Model3D</returns>
        </member>
        <member name="M:Ab3d.ObjFileToWpfModel3DConverter.Convert(Ab3d.ObjFile.ObjMaterial)">
            <summary>
            Converts ObjMaterial into a Material that can be used in WPF.
            </summary>
            <param name="objMaterial">ObjMaterial</param>
            <returns>Material that can be used in WPF</returns>
        </member>
        <member name="T:Ab3d.ReaderObj">
            <summary>
            ReaderObj can read 3D models from obj files.
            </summary>
        </member>
        <member name="P:Ab3d.ReaderObj.ResolveResourceFunc">
            <summary>
            Gets or sets a Func that returns stream from the specified resource name. This can be used to read resources from stream.
            The returned stream will be closed by the ReaderObj.
            </summary>
        </member>
        <member name="P:Ab3d.ReaderObj.Errors">
            <summary>
            Gets a list of errors that occur during obj file loading.
            </summary>
        </member>
        <member name="P:Ab3d.ReaderObj.IgnoreErrors">
            <summary>
            Gets or sets a Boolean that specifies if errors are ignored and reader tries to read as much data as possible.
            The error texts are written to Errors list.
            </summary>
        </member>
        <member name="P:Ab3d.ReaderObj.DetectEncodingFromByteOrderMarks">
            <summary>
            Indicates whether to look for byte order marks at the beginning of the file to detect the text encoding (using in StreamReader constructor). Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.ReaderObj.NamedObjects">
            <summary>
            Gets a dictionary that can be used to get a 3D object by its name (key = name, value = Model3D)
            </summary>
        </member>
        <member name="M:Ab3d.ReaderObj.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.ReaderObj.ReadModel3D(System.String)">
            <summary>
            Reads the 3D models from objFileName file and returns the 3d models as Model3DGroup or GeomentryModel3D.
            Textures directory is the same as obj file directory.
            </summary>
            <param name="objFileName">obj file name</param>
            <returns>Model3DGroup or GeomentryModel3D</returns>
        </member>
        <member name="M:Ab3d.ReaderObj.ReadModel3D(System.String,System.String,System.Windows.Media.Media3D.Material)">
            <summary>
            Reads the 3D models from objFileName file and returns the 3d models as Model3DGroup or GeomentryModel3D.
            </summary>
            <param name="objFileName">obj file name</param>
            <param name="texturesDirectory">textures directory</param>
            <param name="defaultMaterial">material that is used if no material is defined in obj file</param>
            <returns>Model3DGroup or GeomentryModel3D</returns>
        </member>
        <member name="M:Ab3d.ReaderObj.ReadModel3D(System.IO.Stream,System.Func{System.String,System.IO.Stream})">
            <summary>
            Reads the 3D models from stream and returns the 3d models as Model3DGroup or GeomentryModel3D.
            When the obj file have any additional resources (materials and textures), the resolveResourceFunc must be set a method that converts the resource name into Stream.
            </summary>
            <param name="objStream">stream with obj file</param>
            <param name="resolveResourceFunc">method that converts the resource name into Stream - used to read additional resources (materials and textures)</param>
            <returns>Model3DGroup or GeomentryModel3D</returns>
        </member>
        <member name="M:Ab3d.ReaderObj.ReadModel3D(System.IO.Stream,System.Func{System.String,System.IO.Stream},System.Windows.Media.Media3D.Material)">
            <summary>
            Reads the 3D models from stream and returns the 3d models as Model3DGroup or GeomentryModel3D.
            When the obj file have any additional resources (materials and textures), the resolveResourceFunc must be set a method that converts the resource name into Stream.
            </summary>
            <param name="objStream">stream with obj file</param>
            <param name="resolveResourceFunc">method that converts the resource name into Stream - used to read additional resources (materials and textures)</param>
            <param name="defaultMaterial">material that is used if no material is defined in obj file</param>
            <returns>Model3DGroup or GeomentryModel3D</returns>
        </member>
        <member name="M:Ab3d.ReaderObj.ReadFile(System.String)">
            <summary>
            Reads the objFileName file and returns the ObjFileData object.
            </summary>
            <param name="objFileName">obj file name</param>
            <returns>ObjFileData object</returns>
        </member>
        <member name="M:Ab3d.ReaderObj.ReadStream(System.IO.Stream)">
            <summary>
            Reads the obj file from specified stream and returns the ObjFileData object.
            </summary>
            <param name="objStream">stream with obj file content</param>
            <returns>ObjFileData object</returns>
        </member>
        <member name="T:Ab3d.UIElements.ArrowUIElement3D">
            <summary>
            ArrowUIElement3D class is used to create UIElement3D that represents a 3D arrow.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.ArrowUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ArrowUIElement3D.StartPosition">
            <summary>
            Gets or sets line's start position 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ArrowUIElement3D.StartPositionProperty">
            <summary>
            StartPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ArrowUIElement3D.EndPosition">
            <summary>
            Gets or sets the line's end position 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ArrowUIElement3D.EndPositionProperty">
            <summary>
            EndPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ArrowUIElement3D.Radius">
            <summary>
            Gets or sets the radius of the cone that defines the 3D line (without arrow).
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ArrowUIElement3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ArrowUIElement3D.ArrowRadius">
            <summary>
            Gets or sets the radius of the arrow - half of the arrow width. If not set than arrow radius is calculated as two time the value of Radius property.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ArrowUIElement3D.ArrowRadiusProperty">
            <summary>
            ArrowRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ArrowUIElement3D.ArrowAngle">
            <summary>
            Gets or sets the angle of the arrow in degrees. Default value is 60.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ArrowUIElement3D.ArrowAngleProperty">
            <summary>
            ArrowAngleProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ArrowUIElement3D.Segments">
            <summary>
            Gets or sets the number of segments that define the circles used to create arrow sections. Default value is 30.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ArrowUIElement3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ArrowUIElement3D.GenerateTextureCoordinates">
            <summary>
            Gets or sets a Boolean that specified if texture coordinates are generated (created mesh is more complicated in this case). Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ArrowUIElement3D.GenerateTextureCoordinatesProperty">
            <summary>
            GenerateTextureCoordinatesProperty
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.ArrowUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.BaseModelUIElement3D">
            <summary>
            BaseModelUIElement3D is a base abstract for all model UIElement3D classes that define Material and BackMaterial properties.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BaseModelUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BaseModelUIElement3D.MaterialProperty">
            <summary>
            MaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BaseModelUIElement3D.Material">
            <summary>
            Gets or sets the Material of the 3D model
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BaseModelUIElement3D.BackMaterialProperty">
            <summary>
            BackMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BaseModelUIElement3D.BackMaterial">
            <summary>
            Gets or sets the BackMaterial of the 3D model
            </summary>
        </member>
        <member name="E:Ab3d.UIElements.BaseModelUIElement3D.GeometryChanged">
            <summary>
            Notify that the geometry was changed
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BaseModelUIElement3D.OnGeometryChanged">
            <summary>
            OnGeometryChanged
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BaseModelUIElement3D.OnUpdateModel">
            <summary>
            OnUpdateModel is called in response to InvalidateModel and provides
            a place to set the Visual3DModel property
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BaseModelUIElement3D.SetGeometry(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Sets the Content of the Visual3D
            </summary>
            <param name="geometry">new MeshGeometry3D</param>
        </member>
        <member name="M:Ab3d.UIElements.BaseModelUIElement3D.RefreshMaterial">
            <summary>
            Resets the Content's material
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BaseModelUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.BaseUIElement3D">
            <summary>
            BaseUIElement3D is a base abstract for all model UIElement3D classes
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BaseUIElement3D.Model">
            <summary>
            Gets the Model3D of this UIElement3D
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BaseUIElement3D.ModelProperty">
            <summary>
            The Model property for the sphere
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BaseUIElement3D.ToolTip">
            <summary>
            Gets or sets a object that will be shown as ToolTip when the mouse is over this 3D object.
            </summary>
            <remarks>
            <para>
            The ToolTip can be a simple string or it can be any WPF control (to show a custom ToolTip).
            </para>
            <note>
            Because 3D objects are not a regular 2D UIElements, it is not possible to set a ToolTipService's Placement to any value that would require the knowladge of the 2D size of the object - for example Right or Bottom.
            </note>
            </remarks>
            <example>
            <code lang="xaml">
            &lt;uiElements:BoxUIElement3D Size="10 10 10" Material="Silver" ToolTip="This is a simple tooltip"/&gt;
            </code>
            </example>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.Refresh">
            <summary>
            Recreates the Model3D used to display this UIElement3D.
            </summary>
            <remarks>
            <para>
            When UIElement3D is created in code and it is added to Viewport3D, the Model3D is automatically created on first rendering pass of WPF.
            However if the UIElement3D is not added to Viewport3D, the geometry is never created.
            </para>
            <para>
            To force creation of geometry, call Refresh method. This can be useful when the UIElement3D is used to create a Wireframe model.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to create wireframe from SphereUIElement3D.
            </para>
            <code>
            Ab3d.UIElements.SphereUIElement3D sphere;
            sphere = new Ab3d.UIElements.SphereUIElement3D();
            sphere.Radius = 200;
            sphere.Material = new DiffuseMaterial(Brushes.Red);
            sphere.Refresh(); // Creates the Model3D
            
            Ab3d.Models.WireframeFactory.CreateWireframe(sphere, 1, true, Colors.Black, Viewport1);
            </code>
            </example>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.ValidatePositiveDoublePropertyValue(System.Object)">
            <summary>
            Returns true if value is valid double and is positive
            </summary>
            <param name="value">value</param>
            <returns>true if value is valid double and is positive</returns>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.ValidateDoublePropertyValue(System.Object)">
            <summary>
            Returns true if value is valid double
            </summary>
            <param name="value">value</param>
            <returns>true if value is valid double</returns>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.ValidatePositiveIntPropertyValue(System.Object)">
            <summary>
            Returns true if value is positive integer
            </summary>
            <param name="value">value</param>
            <returns>true if value is positive integer</returns>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.ValidateSize3DPropertyValue(System.Object)">
            <summary>
            Returns true if the value is a valid Size3D object
            </summary>
            <param name="value">value</param>
            <returns>true if the value is a valid Size3D object</returns>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.ValidateSizePropertyValue(System.Object)">
            <summary>
            Returns true if the value is a valid Size object
            </summary>
            <param name="value">value</param>
            <returns>true if the value is a valid Size object</returns>
        </member>
        <member name="M:Ab3d.UIElements.BaseUIElement3D.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="T:Ab3d.UIElements.BoxUIElement3D">
            <summary>
            BoxUIElement3D class is used to create UIElement3D that represents a 3D Box.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BoxUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BoxUIElement3D.CenterPosition">
            <summary>
            Gets or sets the box center position
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BoxUIElement3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BoxUIElement3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BoxUIElement3D.Size">
            <summary>
            Gets or sets the size of the box
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BoxUIElement3D.XCellsCountProperty">
            <summary>
            XCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BoxUIElement3D.XCellsCount">
            <summary>
            Gets or sets the number of cells in x direction
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BoxUIElement3D.YCellsCountProperty">
            <summary>
            YCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BoxUIElement3D.YCellsCount">
            <summary>
            Gets or sets the 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.BoxUIElement3D.ZCellsCountProperty">
            <summary>
            ZCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.BoxUIElement3D.ZCellsCount">
            <summary>
            Gets or sets the  
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.BoxUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.CircleUIElement3D">
            <summary>
            CircleUIElement3D class is used to create UIElement3D that represents a 3D Circle.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.CircleUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CircleUIElement3D.CenterPosition">
            <summary>
            Gets or sets the circle center position 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CircleUIElement3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CircleUIElement3D.NormalProperty">
            <summary>
            NormalProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CircleUIElement3D.Normal">
            <summary>
            Gets or sets the circle normal as Vector3D 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CircleUIElement3D.UpDirectionProperty">
            <summary>
            UpDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CircleUIElement3D.UpDirection">
            <summary>
            Gets or sets the Vector3D that is pointing from center position to the circle's top position 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CircleUIElement3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CircleUIElement3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to define the circle
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CircleUIElement3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CircleUIElement3D.Radius">
            <summary>
            Gets or sets the radius of the circle 
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.CircleUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.ConeUIElement3D">
            <summary>
            ConeUIElement3D class is used to create UIElement3D that represents a 3D Cone.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.ConeUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ConeUIElement3D.BottomCenterPosition">
            <summary>
            Gets or sets the position of the bottom center of the Cone
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ConeUIElement3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ConeUIElement3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ConeUIElement3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to create the circular area of the Cone. Default value is 20.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ConeUIElement3D.TopRadiusProperty">
            <summary>
            TopRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ConeUIElement3D.TopRadius">
            <summary>
            Gets or sets the radius of the top circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ConeUIElement3D.BottomRadiusProperty">
            <summary>
            BottomRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ConeUIElement3D.BottomRadius">
            <summary>
            Gets or sets the radius of the bottom circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ConeUIElement3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ConeUIElement3D.Height">
            <summary>
            Gets or sets the height of Cone.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.ConeUIElement3D.IsSmoothProperty">
            <summary>
            IsSmoothProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.ConeUIElement3D.IsSmooth">
            <summary>
            Gets or sets the Boolean that specifies if the Cone is smoothly shaded. If false the Cone has sharp edges between segments.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.ConeUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.MultiModelBoxUIElement3D">
            <summary>
            MultiMaterialBoxVisual3D class is used to create a UIElement3D that represents a 3D Box where each side of the box can have its own material.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.MultiModelBoxUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.CenterPosition">
            <summary>
            Gets or sets the box center position
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.Size">
            <summary>
            Gets or sets the size of the box
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.XCellsCountProperty">
            <summary>
            XCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.XCellsCount">
            <summary>
            Gets or sets the number of cells in X direction
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.YCellsCountProperty">
            <summary>
            YCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.YCellsCount">
            <summary>
            Gets or sets the number of cells in Y direction
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.ZCellsCountProperty">
            <summary>
            ZCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.ZCellsCount">
            <summary>
            Gets or sets the number of cells in Z direction
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.TopMaterialProperty">
            <summary>
            TopMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.TopMaterial">
            <summary>
            Gets or sets the Material of the top side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.BottomMaterialProperty">
            <summary>
            BottomMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.BottomMaterial">
            <summary>
            Gets or sets the Material of the bottom side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.LeftMaterialProperty">
            <summary>
            LeftMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.LeftMaterial">
            <summary>
            Gets or sets the Material of the left side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.RightMaterialProperty">
            <summary>
            RightMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.RightMaterial">
            <summary>
            Gets or sets the Material of the right side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.FrontMaterialProperty">
            <summary>
            FrontMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.FrontMaterial">
            <summary>
            Gets or sets the Material of the front side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.BackMaterialProperty">
            <summary>
            BackMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.BackMaterial">
            <summary>
            Gets or sets the Material of the back side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.FallbackMaterialProperty">
            <summary>
            FallbackMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.FallbackMaterial">
            <summary>
            Gets or sets the Material that is used when the material for the specified side is not set.
            </summary>
            <remarks>
            <para>
            The <b>MultiMaterialBoxVisual3D</b> defines six material properties: <see cref="P:Ab3d.UIElements.MultiModelBoxUIElement3D.TopMaterial"/>, <see cref="P:Ab3d.UIElements.MultiModelBoxUIElement3D.BottomMaterial"/>, <see cref="P:Ab3d.UIElements.MultiModelBoxUIElement3D.LeftMaterial"/>, <see cref="P:Ab3d.UIElements.MultiModelBoxUIElement3D.RightMaterial"/>, <see cref="P:Ab3d.UIElements.MultiModelBoxUIElement3D.FrontMaterial"/> and <see cref="P:Ab3d.UIElements.MultiModelBoxUIElement3D.BackMaterial"/>. They can be used to specify the material for each side of the box.
            </para>
            <para>
            When more than one side is using the same material and only a few sides have different material, the <b>FallbackMaterial</b> to specify the material that will be used when the specific material for the side is not set.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to create a blue 3D Box with red top and front side.<br/>
            Note: <see cref="T:Ab3d.Common.MaterialTypeConverter"/> is used to simplify defining the materials.
            </para>
            <para>
            The following namespace declaration needs to be added to the root element:
            <c>xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"</c>
            </para>        
            <code lang="xaml">
            &lt;Viewport3D Name="MainViewport"&gt;
                &lt;visuals:MultiMaterialBoxVisual3D CenterPosition="-50 0 0" Size="200 100 50"
                                                  FallbackMaterial="Blue" TopMaterial="Red" FrontMaterial="Red"/&gt;
            &lt;/Viewport3D&gt;
            </code>        
            </example>
        </member>
        <member name="F:Ab3d.UIElements.MultiModelBoxUIElement3D.IsTwoSidedMaterialProperty">
            <summary>
            IsTwoSidedMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.IsTwoSidedMaterial">
            <summary>
            Gets or sets the Boolean that specifies if the material is set to both sides of each Model3D that define the box. 
            This means that BackMaterial for each side is set to the same value as Material. Default value is false.
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.TopSideModel">
            <summary>
            Gets the GeometryModel3D for the top side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.BottomSideModel">
            <summary>
            Gets the GeometryModel3D for the bottom side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.LeftSideModel">
            <summary>
            Gets the GeometryModel3D for the left side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.RightSideModel">
            <summary>
            Gets the GeometryModel3D for the right side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.FrontSideModel">
            <summary>
            Gets the GeometryModel3D for the front side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.MultiModelBoxUIElement3D.BackSideModel">
            <summary>
            Gets the GeometryModel3D for the back side of the box.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.MultiModelBoxUIElement3D.RefreshMaterial">
            <summary>
            Resets the content's material
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.MultiModelBoxUIElement3D.OnUpdateModel">
            <summary>
            OnUpdateModel is called in response to InvalidateModel and provides
            a place to set the Visual3DModel property
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.MultiModelBoxUIElement3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.TrapezoidUIElement3D">
            <summary>
            TrapezoidUIElement3D class is used to create UIElement3D that represents a 3D Trapezoid.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.TrapezoidUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TrapezoidUIElement3D.BottomCenterPosition">
            <summary>
            Gets or sets the center position of the bottom rectangle
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TrapezoidUIElement3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TrapezoidUIElement3D.BottomSizeProperty">
            <summary>
            BottomSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TrapezoidUIElement3D.BottomSize">
            <summary>
            Gets or sets the 2D size of the bottom rectangle
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TrapezoidUIElement3D.TopSizeProperty">
            <summary>
            TopSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TrapezoidUIElement3D.TopSize">
            <summary>
            Gets or sets the 2D size of the bottom rectangle
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TrapezoidUIElement3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TrapezoidUIElement3D.Height">
            <summary>
            Gets or sets the height of the Trapezoid.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.TrapezoidUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.TubeUIElement3D">
            <summary>
            ConeUIElement3D class is used to create UIElement3D that represents a 3D Cone.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.TubeUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TubeUIElement3D.BottomCenterPosition">
            <summary>
            Gets or sets the position of the bottom center of the Tube
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TubeUIElement3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TubeUIElement3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TubeUIElement3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to create the circular area of the Tube. Default value is 20.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TubeUIElement3D.OuterRadiusProperty">
            <summary>
            OuterRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TubeUIElement3D.OuterRadius">
            <summary>
            Gets or sets the outer radius of the Tube.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TubeUIElement3D.InnerRadiusProperty">
            <summary>
            InnerRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TubeUIElement3D.InnerRadius">
            <summary>
            Gets or sets the inner radius of the Tube.
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.TubeUIElement3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.TubeUIElement3D.Height">
            <summary>
            Gets or sets the height of Tube.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.TubeUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.VerticalPlaneUIElement3D">
            <summary>
            VerticalPlaneUIElement3D class is used to create UIElement3D that represents a Vertical 3D Plane - aligned with X and Y axis.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.VerticalPlaneUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.VerticalPlaneUIElement3D.CenterPosition">
            <summary>
            Gets or sets the plane center position 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.VerticalPlaneUIElement3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.VerticalPlaneUIElement3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.VerticalPlaneUIElement3D.Size">
            <summary>
            Gets or sets the size of the plane 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.VerticalPlaneUIElement3D.WidthCellsCountProperty">
            <summary>
            WidthCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.VerticalPlaneUIElement3D.WidthCellsCount">
            <summary>
            Gets or sets the cells count in width direction 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.VerticalPlaneUIElement3D.HeightCellsCountProperty">
            <summary>
            HeightCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.VerticalPlaneUIElement3D.HeightCellsCount">
            <summary>
            Gets or sets the cells count in height direction 
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.VerticalPlaneUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.CylinderUIElement3D">
            <summary>
            CylinderUIElement3D class is used to create UIElement3D that represents a 3D Cylinder.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.CylinderUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CylinderUIElement3D.BottomCenterPosition">
            <summary>
            Gets or sets the center position of the bottom circle that defines the cone 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CylinderUIElement3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CylinderUIElement3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CylinderUIElement3D.Segments">
            <summary>
            Gets or sets the number of segments that define the top and bottom circles of the cylinder 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CylinderUIElement3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CylinderUIElement3D.Radius">
            <summary>
            Gets or sets the radius of the cylinder 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CylinderUIElement3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CylinderUIElement3D.Height">
            <summary>
            Gets or sets the height of the cylinder 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.CylinderUIElement3D.IsSmoothProperty">
            <summary>
            IsSmoothProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.CylinderUIElement3D.IsSmooth">
            <summary>
            Gets or sets a value that specifies if the cylinder is smooth (true) or if the edges on the cylinder are sharp (false) 
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.CylinderUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.HorizontalPlaneUIElement3D">
            <summary>
            HorizontalPlaneUIElement3D class is used to create UIElement3D that represents a Horizontal Plane 3D - aligned with X and Z axis.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.HorizontalPlaneUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.HorizontalPlaneUIElement3D.CenterPosition">
            <summary>
            Gets or sets the plane center position 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.HorizontalPlaneUIElement3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.HorizontalPlaneUIElement3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.HorizontalPlaneUIElement3D.Size">
            <summary>
            Gets or sets the size of the plane 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.HorizontalPlaneUIElement3D.WidthCellsCountProperty">
            <summary>
            WidthCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.HorizontalPlaneUIElement3D.WidthCellsCount">
            <summary>
            Gets or sets the cells count in width direction 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.HorizontalPlaneUIElement3D.HeightCellsCountProperty">
            <summary>
            HeightCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.HorizontalPlaneUIElement3D.HeightCellsCount">
            <summary>
            Gets or sets the cells count in height direction 
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.HorizontalPlaneUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.PlaneUIElement3D">
            <summary>
            PlaneUIElement3D class is used to create UIElement3D that represents a 3D Plane.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.PlaneUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PlaneUIElement3D.CenterPosition">
            <summary>
            Gets or sets the plane center position
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PlaneUIElement3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PlaneUIElement3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PlaneUIElement3D.Size">
            <summary>
            Gets or sets the size of the plane 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PlaneUIElement3D.NormalProperty">
            <summary>
            NormalProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PlaneUIElement3D.Normal">
            <summary>
            Gets or sets the Vector3D that is perpendicular to the plane 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PlaneUIElement3D.HeightDirectionProperty">
            <summary>
            HeightDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PlaneUIElement3D.HeightDirection">
            <summary>
            Gets or sets the Vector3D that defines the direction of the height (used in size) 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PlaneUIElement3D.WidthCellsCountProperty">
            <summary>
            WidthCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PlaneUIElement3D.WidthCellsCount">
            <summary>
            Gets or sets the cells count in width direction 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PlaneUIElement3D.HeightCellsCountProperty">
            <summary>
            HeightCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PlaneUIElement3D.HeightCellsCount">
            <summary>
            Gets or sets the cells count in height direction 
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.PlaneUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.PyramidUIElement3D">
            <summary>
            PyramidUIElement3D class is used to create UIElement3D that represents a 3D Pyramid.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.PyramidUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PyramidUIElement3D.BottomCenterPosition">
            <summary>
            Gets or sets the center position of the bottom rectangle that defines the pyramid
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PyramidUIElement3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.PyramidUIElement3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.PyramidUIElement3D.Size">
            <summary>
            Gets or sets the size of pyramid 
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.PyramidUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.UIElements.SphereUIElement3D">
            <summary>
            SphereUIElement3D class is used to create UIElement3D that represents a 3D Sphere.
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.SphereUIElement3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.SphereUIElement3D.CenterPosition">
            <summary>
            Gets or sets the sphere center position 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.SphereUIElement3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.SphereUIElement3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.SphereUIElement3D.Segments">
            <summary>
            Gets or sets the number of segments that define the sphere 
            </summary>
        </member>
        <member name="F:Ab3d.UIElements.SphereUIElement3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.UIElements.SphereUIElement3D.Radius">
            <summary>
            Gets or sets the radius of the sphere 
            </summary>
        </member>
        <member name="M:Ab3d.UIElements.SphereUIElement3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Utilities.BaseEventSource3D">
            <summary>
            Base class for all EventSource3D classes.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the subscribed EventSource3D and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the subscribed EventSource3D and a mouse button is released.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseClick">
            <summary>
            Occurs when the user clicks on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseDoubleClick">
            <summary>
            Occurs when the user double-clicks on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseWheel">
            <summary>
            Occurs when the mouse wheel is used on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.BeginMouseDrag">
            <summary>
            Occurs when the user begins to drag the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.EndMouseDrag">
            <summary>
            Occurs when the user ends dragging the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseDrag">
            <summary>
            Occurs when the user is dragging the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.MouseMove">
            <summary>
            Occurs when the mouse pointer moves on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.TouchEnter">
            <summary>
            Occurs when the touch device moves on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.TouchDown">
            <summary>
            Occurs when the touch device touches the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.TouchMove">
            <summary>
            Occurs when the touch device moves on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.TouchUp">
            <summary>
            Occurs when the touch device releases touch on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.TouchLeave">
            <summary>
            Occurs when the touch device leaves the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.ManipulationStarted">
            <summary>
            Occurs when the manipulation on the subscribed EventSource3D has started.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.ManipulationCompleted">
            <summary>
            Occurs when the manipulation on the subscribed EventSource3D has completed.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.BaseEventSource3D.ManipulationDelta">
            <summary>
            Provides data regarding changes to a currently occurring manipulation.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.BaseEventSource3D.CustomData">
            <summary>
            Gets or sets any custom data that can be used in event handlers.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.BaseEventSource3D.Name">
            <summary>
            Gets or sets the optional name of the EventSource3D.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.BaseEventSource3D.IsDragSurface">
            <summary>
            Gets or sets a bool that specifies if the EventSource3D is registered as DragSurface.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.BaseEventSource3D.IsMyGeometryModel3D(System.Windows.Media.Media3D.GeometryModel3D)">
            <summary>
            Method that is called from EventManager3D to check if this EventSource3D contains hitGeometryModel3D
            </summary>
            <param name="hitGeometryModel3D">hitModel as GeometryModel3D</param>
            <returns>true if this EventSource3D contains hitMesh</returns>
        </member>
        <member name="M:Ab3d.Utilities.BaseEventSource3D.IsMyVisual(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Method that is called from EventManager3D to check if this EventSource3D contains hitVisual
            </summary>
            <param name="hitVisual">hitVisual as Visual3D</param>
            <returns>true if this EventSource3D contains hitVisual</returns>
        </member>
        <member name="M:Ab3d.Utilities.BaseEventSource3D.ContainsVisual3D(System.Windows.Media.Media3D.Visual3D,System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Returns true if hitVisual is the same as oneVisual or if hitVisual is define as any child in oneVisual and its Children
            </summary>
            <param name="rootVisual">root visual to start seach</param>
            <param name="hitVisual">Visual3D to find</param>
            <returns>true if hitVisual is found</returns>
        </member>
        <member name="M:Ab3d.Utilities.BaseEventSource3D.ContainsGeometryModel3D(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.GeometryModel3D)">
            <summary>
            Returns true if hitGeometryModel3D is define as any child in model3DGroup and its Children
            </summary>
            <param name="model3DGroup">Model3DGroup to start seach</param>
            <param name="hitGeometryModel3D">GeometryModel3D to find</param>
            <returns>true if hitGeometryModel3D is found</returns>
        </member>
        <member name="T:Ab3d.Utilities.BezierCurve">
            <summary>
            BezierCurve class is used to create a 3D Bezier curves.
            </summary>
            <remarks>
            <para>
            Bezier curves is a curve that goes through specified points and where the curvation at the specified points is defined by tangent points that define tangents to the specified points.
            </para>
            <para>
            The specified points (the points the curve will go though) and tangent points are define in a single control points list (IList&lt;Point3D&gt;).
            </para>
            <para>
            The structure of the control points is the following:<br/>
            control point index = 0: start position of the curve<br/>
            control point index = 1: point that define tangent from the curve start position to the next position<br/>
            <br/>
            control point index = 2: point that define tangent from the previous position to this position<br/>
            control point index = 3: the second position on the curve<br/>
            control point index = 4: point that define tangent from this position to the next position<br/> 
            <br/>
            ... (3 control points for other positions - 2 for tangents and one for curve position)
            <br/>
            control point index = n - 2: point that define tangent from the previous position to the last position<br/>
            control point index = n - 1: the last position on the curve<br/>
            </para>
            <para>
            It is possible to define the bezier curves with specifying all the control points.
            But because it could be quite hard to define all the tangent control points, it is also possible to define the bezier curve by just
            specifying the curve positions and defining the curve scale that define how far from the curve positions the tangent control points are defined.
            This way the curve scale defines the curvation of the curve.
            </para>
            <para>
            The BezierCurve instance can be created by specifying all the control points in the BezierCurve constructor.
            It is also possible to create the BezierCurve instance by calling the static <see cref="M:Ab3d.Utilities.BezierCurve.CreateFromCurvePositions(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})"/> or <see cref="M:Ab3d.Utilities.BezierCurve.CreateFromCurvePositions(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double)"/> method.
            </para>
            <para>
            To make the curve smooth, more points are created between two control points. The number of additional points is defined by positionsPerSegment number.
            </para>
            <para>
            The easiest way to create the curve is to use the static <see cref="M:Ab3d.Utilities.BezierCurve.CreateBezierCurve(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32)"/> or <see cref="M:Ab3d.Utilities.BezierCurve.CreateBezierCurveThroughPoints(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32)"/> methods.
            Both methods return Point3DCollection that define the curve.
            </para>
            <para>
            For advanced usage it is possible to create an instance of the BSpline class. 
            This enables calling <see cref="M:Ab3d.Utilities.BezierCurve.GetPositionOnCurve(System.Double)"/> method than can return any position on the curve defined by the t parameter. 
            The t parameter can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.
            </para>
            <para>
            NOTE: To create a <b>B-spline</b> or <b>NURBS curve</b> use the <see cref="T:Ab3d.Utilities.BSpline"/> class.
            </para>    
            </remarks>
        </member>
        <member name="F:Ab3d.Utilities.BezierCurve.DEFAULT_CURVE_SCALE">
            <summary>
            Default curve scale
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.BezierCurve.ControlPoints">
            <summary>
            Gets a list of control points.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Creates bezier curve with the specified control points list. Note that each curve segment requires 3 control points (one for the position on the curve and two to define tangents to that position).
            </summary>
            <param name="controlPoints">List of control points. Note that each curve segment requires 3 control points (one for the position on the curve and two to define tangents to that position).</param>
            <remarks>
            <para>
            Creates bezier curve with the specified control points list. Note that each curve segment requires 3 control points (one for the position on the curve and two to define tangents to that position).
            </para>
            <para>
            To create bezier curve that goes through specified points and without specifying tangent positions use the <see cref="M:Ab3d.Utilities.BezierCurve.CreateFromCurvePositions(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})"/> or <see cref="M:Ab3d.Utilities.BezierCurve.CreateFromCurvePositions(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double)"/> static methods. 
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.CreateBezierCurve(System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the bezier curve.
            </summary>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the bezier curve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.GetPositionOnCurve(System.Double)">
            <summary>
            Returns a Point3D that lies on the bezier curve. The t argument can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.
            </summary>
            <param name="t">The t argument can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.</param>
            <returns>Point3D that lies on the bezier curve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.CreateFromCurvePositions(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Returns an instance of BezierCurve that is created by the curvePositions. The method calculates all the control points (tangent positions) based on the default curve scale.
            </summary>
            <param name="curvePositions">list of positions on the curve</param>
            <returns>instance of BezierCurve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.CreateFromCurvePositions(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double)">
            <summary>
            Returns an instance of BezierCurve that is created by the curvePositions. The method calculates all the control points (tangent positions) based on the curveScale.
            </summary>
            <param name="curvePositions">list of positions on the curve</param>
            <param name="curveScale">Controls the scale of the curve. The larger the curveScale, the smaller the curvature at that Bezier points. Default value is 0.25</param>
            <returns>instance of BezierCurve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.CreateBezierCurve(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the bezier curve with the specified controlPoints (contains points on the curve and tangent control points).
            </summary>
            <param name="controlPoints">list of controlPoints (contains points on the curve and tanget control points)</param>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the bezier curve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.CreateBezierCurveThroughPoints(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the bezier curve that goes through curvePositions.
            </summary>
            <param name="curvePositions">list of positions on the curve</param>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the bezier curve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BezierCurve.CreateBezierCurveThroughPoints(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Double,System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the bezier curve that goes through curvePositions.
            </summary>
            <param name="curvePositions">list of positions on the curve</param>
            <param name="curveScale">curve scale that define how far from the curve positions the tangent control points are defined. This way the curve scale defines the curvation of the curve.</param>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the bezier curve</returns>
        </member>
        <member name="T:Ab3d.Utilities.BitmapRendering">
            <summary>
            BitmapRendering class contains static methods that can render any FrameworkElement to bitmap.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.BitmapRendering.RenderToBitmap(System.Windows.FrameworkElement,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Renders FrameworkElement specified with objectToRender to bitmap with specifed backgroundBrush and dpi.
            The size of the created bitmap is the same as the size of the objectToRender.
            </summary>
            <param name="objectToRender">FrameworkElement to render</param>
            <param name="backgroundBrush">brush used for background or null to have no background. Default value is null.</param>
            <param name="dpi">DPI settinig for the rendered bitmap. Default value is 96</param>
            <returns>RenderTargetBitmap</returns>
        </member>
        <member name="M:Ab3d.Utilities.BitmapRendering.RenderToBitmap(System.Windows.FrameworkElement,System.Int32,System.Int32,System.Boolean,System.Int32,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Renders FrameworkElement specified with objectToRender to bitmap.
            It is possible to specify custom bitmap width and height (when customWidth and customHeight are bigger than 0). 
            When antialiasingLevel is bigger than 1, the bitmap is rendered into bigger image and than scaled down to create an antialiasing effect.
            </summary>
            <param name="objectToRender">FrameworkElement to render</param>
            <param name="customWidth">when bigger than 0 it specifes the target bitmap width; when zero the width of objectToRender will be used</param>
            <param name="customHeight">when bigger than 0 it specifes the target bitmap height; when zero the height of objectToRender will be used</param>
            <param name="scaleToFill">when true the object will be scaled to fill the target bitmap (when source and target aspect ratio is not the same)</param>
            <param name="antialiasingLevel">when bigger than 1, the bitmap will be rendered into bigger image and than scaled down to create an antialiasing effect. The antialiasingLevel defines the scale factor of the intermediate bitmap. Max value is 8.</param>
            <param name="backgroundBrush">brush used for background or null to have no background. Default value is null.</param>
            <param name="dpi">DPI settinig for the rendered bitmap. Default value is 96</param>
            <returns>BitmapSource</returns>
        </member>
        <member name="T:Ab3d.Utilities.BSpline">
            <summary>
            BSpline class is used to create a 3D B-spline.
            </summary>
            <remarks>
            <para>
            B-spline is a curve that is defined by control points.
            </para>
            <para>
            It is also possible to create NURBS curve (Non-uniform rational B-spline). 
            The difference between normal B-spline and NURBS curve is that NURBS curve uses weighted control points. 
            For example if all the control points have weight of 1, and the 3rd control point have weight 5, the curve will go closer to the 3rd control point (making it more important).
            It is also possible to make the weight 0.5 - this would make the control point less important so the curve would go farther away from that control point.
            </para>
            <para>
            B-spline does not create the curve that goes through control point but only goes from the first to the last control points. Other control points are used to define the shape of the curve.
            To create a curve that goes through all control points (<b>Bezier curve</b>) use the <see cref="T:Ab3d.Utilities.BezierCurve"/> class.
            </para>
            <para>
            To make the curve smooth, more points are created between two control points. The number of additional points is defined by positionsPerSegment number.
            </para>
            <para>
            The easiest way to create the curve is to use the static <see cref="M:Ab3d.Utilities.BSpline.CreateBSpline(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32)"/> or <see cref="M:Ab3d.Utilities.BSpline.CreateNURBSCurve(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Double},System.Int32)"/> methods.
            Both methods return Point3DCollection that define the curve.
            </para>
            <para>
            For advanced usage it is possible to create an instance of the BSpline class. This enables calling <see cref="M:Ab3d.Utilities.BSpline.GetPositionOnBSpline(System.Double)"/> method than can return any position on the curve defined by the t parameter. The t parameter can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Utilities.BSpline.CurveDegree">
            <summary>
            Gets a degree of the curve (see definition of the B-spline on the internet for more info). Default value is 3.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.BSpline.ControlPoints">
            <summary>
            Gets s list of control points.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.BSpline.Weights">
            <summary>
            Gets s list of weights.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D})">
            <summary>
            Constructor
            </summary>
            <param name="controlPoints">list of control points</param>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructor
            </summary>
            <param name="controlPoints">list of control points</param>
            <param name="weights">list of weights</param>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="controlPoints">list of control points</param>
            <param name="curveDegree">degree of the curve (see definition of the B-spline on the internet for more info)</param>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="controlPoints">list of control points</param>
            <param name="weights">list of weights</param>
            <param name="curveDegree">degree of the curve (see definition of the B-spline on the internet for more info)</param>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.CreateBSpline(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the B-spline based on the controlPoints and positionsPerSegment.
            </summary>
            <param name="controlPoints">list of control points</param>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the B-spline</returns>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.CreateNURBSCurve(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the NURBS curve (Non-uniform rational B-spline) based on the controlPoints, weights and positionsPerSegment.
            </summary>
            <param name="controlPoints">list of control points</param>
            <param name="weights">list of weights</param>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the NURBS curve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.CreateBSpline(System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the B-spline based on the controlPoints (defined with the constructor) and positionsPerSegment.
            </summary>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the B-spline</returns>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.CreateNURBSCurve(System.Int32)">
            <summary>
            Returns a Point3DCollection that defines the NURBS curve based on the controlPoints and weights (defined with the constructor) and positionsPerSegment.
            </summary>
            <param name="positionsPerSegment">number of additional points to make the curve smooth - bigger value creates smoother curve</param>
            <returns>Point3DCollection that defines the NURBS curve</returns>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.GetPositionOnBSpline(System.Double)">
            <summary>
            Returns a Point3D that lies on the B-spline based on the controlPoints (defined with the constructor) and t. The t argument can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.
            </summary>
            <param name="t">The t argument can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.</param>
            <returns>Point3D that lies on the B-spline</returns>
        </member>
        <member name="M:Ab3d.Utilities.BSpline.GetPositionOnNURBSCurve(System.Double)">
            <summary>
            Returns a Point3D that lies on the NURBS curve based on the controlPoints and weights (defined with the constructor) and t. The t argument can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.
            </summary>
            <param name="t">The t argument can have any value from 0 to 1; 0 meaning the first control point and 1 meaning the last control point.</param>
            <returns>Point3D that lies on the NURBS curve</returns>
        </member>
        <member name="T:Ab3d.Utilities.CameraUtils">
            <summary>
            CameraUtils class contains some helper methods to work with Ab3d.Cameras.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.CameraUtils.CalculateCameraAngles(System.Windows.Media.Media3D.Vector3D,System.Double@,System.Double@)">
            <summary>
            Calculates heading and attitude angles in degrees from lookDirection as Vector3D.
            </summary>
            <param name="lookDirection">lookDirection as Vector3D</param>
            <param name="heading">heading in degrees</param>
            <param name="attitude">attitude in degrees</param>
        </member>
        <member name="M:Ab3d.Utilities.CameraUtils.CalculateCameraAnglesInRadians(System.Windows.Media.Media3D.Vector3D,System.Double@,System.Double@)">
            <summary>
            Calculates heading and attitude angles in radians from lookDirection as Vector3D.
            </summary>
            <param name="lookDirection">lookDirection as Vector3D</param>
            <param name="headingInRad">heading in radians</param>
            <param name="attitudeInRad">attitude in radians</param>
        </member>
        <member name="M:Ab3d.Utilities.CameraUtils.CalculateCameraAngles(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates heading, attitude and bank angles in degrees from lookDirection and upDirection as Vector3D.
            </summary>
            <param name="lookDirection">lookDirection as Vector3D</param>
            <param name="upDirection">upDirection as Vector3D</param>
            <param name="heading">heading in degrees</param>
            <param name="attitude">attitude in degrees</param>
            <param name="bank">bank in degrees</param>
        </member>
        <member name="M:Ab3d.Utilities.CameraUtils.CalculateCameraAnglesInRadians(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates heading, attitude and bank angles in radians from lookDirection and upDirection as Vector3D.
            </summary>
            <param name="lookDirection">lookDirection as Vector3D</param>
            <param name="upDirection">upDirection as Vector3D</param>
            <param name="heading">heading in radians</param>
            <param name="attitude">attitude in radians</param>
            <param name="bank">bank in radians</param>
        </member>
        <member name="M:Ab3d.Utilities.CameraUtils.CalculateUpDirection(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Calculates the up direction vector from look direction vector.
            </summary>
            <param name="lookDirection">look direction vector</param>
            <returns>up direction vector</returns>
        </member>
        <member name="M:Ab3d.Utilities.CameraUtils.CalculateCameraDirections(System.Double,System.Double,System.Double,System.Windows.Media.Media3D.Vector3D@,System.Windows.Media.Media3D.Vector3D@)">
            <summary>
            Returns the lookDirection and upDirection from the specifed heading, attitude and bank (angles in degrees).
            </summary>
            <param name="heading">heading in degrees</param>
            <param name="attitude">attitude in degrees</param>
            <param name="bank">bank in degrees</param>
            <param name="lookDirection">lookDirection as Vector3D</param>
            <param name="upDirection">upDirection as Vector3D</param>
        </member>
        <member name="T:Ab3d.Utilities.ICompositionRenderingSubscriber">
            <summary>
            ICompositionRenderingSubscriber need to be implemented by a class that wants to subscribe to Rendering event with <see cref="T:Ab3d.Utilities.CompositionRenderingHelper"/>.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.ICompositionRenderingSubscriber.OnRendering(System.EventArgs)">
            <summary>
            OnRendering is called by <see cref="T:Ab3d.Utilities.CompositionRenderingHelper"/> on each CompositionTarget.Rendering event.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="T:Ab3d.Utilities.CompositionRenderingHelper">
            <summary>
            CompositionRenderingHelper class helps work with CompositionTarget.Rendering event with allowing subscribed objects to be collected by Garbage Collection and therefore preventing infinite rendering subscription in case when the Rendering is not unsubscribed.
            </summary>
            <remarks>
            <para>
            <b>CompositionRenderingHelper</b> class helps work with CompositionTarget.Rendering event with allowing subscribed objects to be collected by Garbage Collection and therefore preventing infinite rendering subscription in case when the Rendering is not unsubscribed.
            </para>
            <para>
            To use the CompositionRenderingHelper, the class that wants to subscribe to CompositionTarget.Rendering need to implement <see cref="T:Ab3d.Utilities.ICompositionRenderingSubscriber"/> interface.
            </para>
            <para>
            Then the class can be subscribed to the CompositionTarget.Rendering event with calling the <see cref="M:Ab3d.Utilities.CompositionRenderingHelper.Subscribe(Ab3d.Utilities.ICompositionRenderingSubscriber)"/> method.
            To unsubscribe call the <see cref="M:Ab3d.Utilities.CompositionRenderingHelper.Unsubscribe(Ab3d.Utilities.ICompositionRenderingSubscriber)"/> method.
            </para>
            <para>
            CompositionRenderingHelper stores the subscribed classes as WeakReferences. This way the class is automatically unsubscribed when it is recylced by Garbage collector.
            </para>
            <para>
            When there is no subscribed assigned the CompositionRenderingHelper is not subscribed to the CompositionTarget.Rendering event.
            </para>
            <para>
            NOTE<br/>
            It's possible for Rendering to call back twice in the same frame.
            With setting <see cref="F:Ab3d.Utilities.CompositionRenderingHelper.PreventMultipleRenderingCallsOnSameFrame"/> to true (by default), such duplicate calls are prevented.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Utilities.CompositionRenderingHelper.Instance">
            <summary>
            Static instance of CompositionRenderingHelper
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.CompositionRenderingHelper.PreventMultipleRenderingCallsOnSameFrame">
            <summary>
            Gets or sets a boolean that specifies if duplicate Rendering calls on the same frame are prevented. Default valus is true.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.CompositionRenderingHelper.Subscribe(Ab3d.Utilities.ICompositionRenderingSubscriber)">
            <summary>
            Subscribe the specified subscriber to be called on each CompositionTarget.Rendering event. The method prevents multiple subscription of the same object.
            </summary>
            <param name="subscriber">subscriber that implements ICompositionRenderingSubscriber</param>
        </member>
        <member name="M:Ab3d.Utilities.CompositionRenderingHelper.Unsubscribe(Ab3d.Utilities.ICompositionRenderingSubscriber)">
            <summary>
            Unsubscribe the specified subscriber from being called on each CompositionTarget.Rendering event.
            </summary>
            <param name="subscriber">subscriber that implements ICompositionRenderingSubscriber</param>
        </member>
        <member name="T:Ab3d.Utilities.Dumper">
            <summary>
            Dumper class is a helper class that contains methods to show information about Model3D or displays the positions, normals and texture coordinates of the MeshGeometry3D.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.DumpMatrix3D(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Dumps the formated Matrix3D into the Visual Studio Output window
            </summary>
            <param name="matrix">Matrix3D</param>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.Dump(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Dumps the formated Matrix3D into the Visual Studio Output window
            </summary>
            <param name="matrix">Matrix3D</param>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.Dump(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Dumps a string with details about the GeometryModel3D or Model3DGroup into the Visual Studio Output window
            </summary>
            <param name="model">GeometryModel3D or Model3DGroup</param>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.Dump(System.Windows.Media.Media3D.Geometry3D)">
            <summary>
            Dumps the positions, normals and texture coordinates of the MeshGeometry3D into the Visual Studio Output window
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.Dump(System.Windows.Media.Media3D.Geometry3D,System.String)">
            <summary>
            Dumps the positions, normals and texture coordinates of the MeshGeometry3D into the Visual Studio Output window
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <param name="valuesStringFormat">string format to display values: for example "0.00" to show only 2 decimals; "" to show all decimals; "0" - no decimals</param>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.DumpMeshInitializationCode(System.Windows.Media.Media3D.Geometry3D,System.String)">
            <summary>
            Writes the C# code that can be used to create the geometry.
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <param name="valuesStringFormat">string format to display values: for example "0.00" to show only 2 decimals; "" to show all decimals; "0" - no decimals</param>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetModelInfoString(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Gets a string with details about the GeometryModel3D or Model3DGroup.
            </summary>
            <param name="model">GeometryModel3D or Model3DGroup</param>
            <returns>details string of the GeometryModel3D or Model3DGroup</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetModelInfoString(System.Windows.Media.Media3D.Model3D,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets a string with details about the GeometryModel3D or Model3DGroup.
            </summary>
            <param name="model">GeometryModel3D or Model3DGroup</param>
            <param name="namedObjects">dictionary with object names as Dictionary&lt;string, object&gt;</param>
            <returns>details string of the GeometryModel3D or Model3DGroup</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.CollectModelCounters(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Returns a ModelGroupCounters class that contains number of positions, triangle indices and other counters of the specifed model3D.
            </summary>
            <param name="model3D">Model3DGroup or GeometryModel3D</param>
            <returns>ModelGroupCounters</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetBoundsText(System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Returns the text that describes the Rect3D of the bounds.
            </summary>
            <param name="bounds">Rect3D</param>
            <returns>text that describes the Rect3D of the bounds</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetMaterialText(System.Windows.Media.Media3D.Material)">
            <summary>
            Returns the text that describes the Material.
            </summary>
            <param name="material">Material</param>
            <returns>text that describes the Material</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetTransformText(System.Windows.Media.Media3D.Transform3D)">
            <summary>
            Returns a text that describes the Transform3D.
            </summary>
            <param name="transfrom">Transform3D</param>
            <returns>text that describes the Transform3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetMatrix3DText(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Returns string from a Matrix3D in 4 column and 4 rows.
            </summary>
            <param name="matrix">Matrix3D</param>
            <returns>string from a Matrix3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetMatrix3DText(System.Windows.Media.Media3D.Matrix3D,System.String,System.String)">
            <summary>
            Returns string from a Matrix3D in 4 column and 4 rows. It is possible to specify the indent text (the text that is displayed in the begginging of each line to text) and new line text (text that is used for new line).
            </summary>
            <param name="matrix">Matrix3D</param>
            <param name="indentText">indent text (the text that is displayed in the begginging of each line to text)</param>
            <param name="newlineText">new line text (text that is used for new line)</param>
            <returns>string from a Matrix3D</returns>
        </member>
        <member name="T:Ab3d.Utilities.Dumper.ModelGroupCounters">
            <summary>
            ModelGroupCounters
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.Dumper.ModelGroupCounters.Positions">
            <summary>
            Positions count
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.Dumper.ModelGroupCounters.TriangleIndices">
            <summary>
            TriangleIndices count
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.Dumper.ModelGroupCounters.TextureCoordinates">
            <summary>
            TextureCoordinates count
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.Dumper.ModelGroupCounters.Normals">
            <summary>
            Normals count
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.Dumper.ModelGroupCounters.ModelsGroups">
            <summary>
            ModelsGroups count
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.Dumper.ModelGroupCounters.GeometryModels">
            <summary>
            GeometryModels count
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetDumpString(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Dumps a string with details about the GeometryModel3D or Model3DGroup into the Visual Studio Output window
            </summary>
            <param name="model">GeometryModel3D or Model3DGroup</param>
            <returns>text that describes the Model3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetDumpString(System.Windows.Media.Media3D.Material)">
            <summary>
            Returns the text that describes the Material.
            </summary>
            <param name="material">Material</param>
            <returns>text that describes the Material</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetDumpString(System.Windows.Media.Media3D.Geometry3D)">
            <summary>
            Returns the positions, normals and texture coordinates of the MeshGeometry3D.
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <returns>the positions, normals and texture coordinates of the MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetDumpString(System.Windows.Media.Media3D.Geometry3D,System.String)">
            <summary>
            Returns the positions, normals and texture coordinates of the MeshGeometry3D.
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <param name="valuesStringFormat">string format to display values: for example "0.00" to show only 2 decimals; "" to show all decimals; "0" - no decimals</param>
            <returns>the positions, normals and texture coordinates of the MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetDumpString(System.Windows.Media.Media3D.Geometry3D,System.Int32,System.String)">
            <summary>
            Returns the positions, normals and texture coordinates of the MeshGeometry3D. The maximum number of returned lines can be specified by maxLineCount parameter.
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <param name="maxLineCount">maximum number of displayed lines. If less or equal than 0 all lines are displayed</param>
            <param name="valuesStringFormat">string format to display values: for example "0.00" to show only 2 decimals; "" to show all decimals; "0" - no decimals</param>
            <returns>the positions, normals and texture coordinates of the MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.DumpMeshInitializationCode(System.Windows.Media.Media3D.Geometry3D)">
            <summary>
            Writes the C# code that can be used to create the geometry.
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetMeshInitializationCode(System.Windows.Media.Media3D.Geometry3D)">
            <summary>
            Returns string with the C# code that can be used to create the geometry.
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <returns>C# code that can be used to create the geometry</returns>
        </member>
        <member name="M:Ab3d.Utilities.Dumper.GetMeshInitializationCode(System.Windows.Media.Media3D.Geometry3D,System.String)">
            <summary>
            Returns string with the C# code that can be used to create the geometry.
            </summary>
            <param name="geometry">mesh as MeshGeometry3D</param>
            <param name="valuesStringFormat">string format to display values: for example "0.00" to show only 2 decimals; "" to show all decimals; "0" - no decimals</param>
            <returns>C# code that can be used to create the geometry</returns>
        </member>
        <member name="F:Ab3d.Utilities.VectorCharInfo.PointCollections">
            <summary>
            Collection of Int16: x1, y1, x2, y2, ..., 
            When x1 == Int16.MinValue => a new PointCollection is created - the next Int16 is again x1, ...
            </summary>
        </member>
        <member name="T:Ab3d.Utilities.MathUtils">
            <summary>
            MathUtils contains some math utility methods.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.IsOne(System.Double)">
            <summary>
            Returns true if the value is close to one (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to one</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.IsZero(System.Double)">
            <summary>
            Returns true if the value is close to zero (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to zero</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.IsZeroOrBigger(System.Double)">
            <summary>
            Returns true if the value is close to zero or bigger (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to zero or bigger</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.IsZeroOrSmaller(System.Double)">
            <summary>
            Returns true if the value is close to zero or smaller (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to zero or smaller</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.IsSame(System.Double,System.Double)">
            <summary>
            Returns true if value1 is same as value2 (taking double precision errors into account).
            </summary>
            <param name="value1">first value</param>
            <param name="value2">second value</param>
            <returns>true if value1 is same as value2</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.Rotate(System.Windows.Media.Media3D.Vector3D,System.Double,System.Double)">
            <summary>
            Rotates the Vector3D for heading and attitude in degrees
            </summary>
            <param name="originalVector">Vector3D to rotate</param>
            <param name="heading">heading in degrees</param>
            <param name="attitude">attitude in degrees</param>
            <returns>rotated vector</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.Rotate(System.Windows.Media.Media3D.Point3D,System.Double,System.Double)">
            <summary>
            Rotates the Point3D for heading and attitude in degrees
            </summary>
            <param name="originalPoint">Point3D to rotate</param>
            <param name="heading">heading in degrees</param>
            <param name="attitude">attitude in degrees</param>
            <returns>rotated point</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.GetRotationMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Returns a Matrix3D that rotates around all three axes
            </summary>
            <param name="heading">heading</param>
            <param name="attitude">attitude</param>
            <param name="bank">bank</param>
            <returns>Matrix3D that rotates around all three axes</returns>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.GetPerpendicularVectors(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D@,System.Windows.Media.Media3D.Vector3D@)">
            <summary>
            Calculate two vectors that are perpendicular to the inputVector. Both calculated vectors are normalized.
            </summary>
            <param name="inputVector">input vector</param>
            <param name="p1">first perpendicular vector (normalized)</param>
            <param name="p2">second perpendicular vector (normalized)</param>
        </member>
        <member name="M:Ab3d.Utilities.MathUtils.RayPlaneIntersection(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D@)">
            <summary>
            RayPlaneIntersection calculates a position where a ray interects a plane. Returns false if there is no intersection. 
            </summary>
            <param name="rayOrigin">ray origin as Point3D</param>
            <param name="rayDirection">ray direction as Vector3D</param>
            <param name="pointOnPlane">Point3D that lies on the plane</param>
            <param name="planeNormal">normal vector (perpendicular to the plane) that defines the orientation of the plane</param>
            <param name="intersectionPoint">returned intersection position</param>
            <returns>Returns false is there is no intersection</returns>
        </member>
        <member name="T:Ab3d.Utilities.ModelIterator">
            <summary>
            ModelIterator class allows easy iteration through complex 3D models hierarchies.
            </summary>
        </member>
        <member name="T:Ab3d.Utilities.ModelIterator.ModelVisual3DIteratorDelegate">
            <summary>
            ModelVisual3DIteratorDelegate defines ModelVisual3D and parent transform as parameters.
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
            <param name="parentTransform3D">parent transform for the current modelVisual3D</param>
        </member>
        <member name="T:Ab3d.Utilities.ModelIterator.GeometryModel3DIteratorDelegate">
            <summary>
            GeometryModel3DIteratorDelegate defines GeometryModel3D and parent transform as parameters.
            </summary>
            <param name="geometryModel3D">GeometryModel3D</param>
            <param name="parentTransform3D">parent transform for the current geometryModel3D</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelIterator.IterateGeometryModel3DObjects(System.Windows.Media.Media3D.ModelVisual3D,Ab3d.Utilities.ModelIterator.GeometryModel3DIteratorDelegate)">
            <summary>
            IterateGeometryModel3DObjects calls the callback delegate for each GeometryModel3D inside rootVisual and its children
            </summary>
            <param name="rootVisual">ModelVisual3D</param>
            <param name="callback">callback delegate that is called for each GeometryModel3D</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelIterator.IterateModelVisualsObjects(System.Windows.Media.Media3D.ModelVisual3D,Ab3d.Utilities.ModelIterator.ModelVisual3DIteratorDelegate)">
            <summary>
            IterateModelVisualsObjects calls the callback delegate for each ModelVisual3D inside rootVisual and its children
            </summary>
            <param name="rootVisual">ModelVisual3D</param>
            <param name="callback">callback delegate that is called for each ModelVisual3D</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelIterator.IterateGeometryModel3DObjects(System.Windows.Media.Media3D.Visual3DCollection,System.Windows.Media.Media3D.Transform3D,Ab3d.Utilities.ModelIterator.GeometryModel3DIteratorDelegate)">
            <summary>
            IterateGeometryModel3DObjects calls the callback delegate for each GeometryModel3D inside visual3DCollection and its children.
            </summary>
            <param name="visual3DCollection">Visual3DCollection</param>
            <param name="parentTransform3D">start transform</param>
            <param name="callback">callback delegate that is called for each GeometryModel3D</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelIterator.IterateGeometryModel3DObjects(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Transform3D,Ab3d.Utilities.ModelIterator.GeometryModel3DIteratorDelegate)">
            <summary>
            IterateGeometryModel3DObjects calls the callback delegate for each GeometryModel3D inside model3D and its children
            </summary>
            <param name="model3D">root Model3D</param>
            <param name="parentTransform3D">start transform</param>
            <param name="callback">callback delegate that is called for each GeometryModel3D</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelIterator.IterateModelVisualsObjects(System.Windows.Media.Media3D.Visual3DCollection,System.Windows.Media.Media3D.Transform3D,Ab3d.Utilities.ModelIterator.ModelVisual3DIteratorDelegate)">
            <summary>
            IterateModelVisualsObjects calls the callback delegate for each ModelVisual3D inside visual3DCollection and its children
            </summary>
            <param name="visual3DCollection">Visual3DCollection</param>
            <param name="parentTransform3D">start transform</param>
            <param name="callback">callback delegate that is called for each ModelVisual3D</param>
        </member>
        <member name="T:Ab3d.Utilities.ModelOptimizer">
            <summary>
            ModelOptimizer can be used to optimize the Model3D or Visual3D so it can be drawn faster by WPF 3D.
            </summary>
            <remarks>
            <para>
            <strong>ModelOptimizer</strong> can be used to optimize the Model3D or Visual3D so it can be drawn faster by WPF 3D.
            </para>
            <para>
            ModelOptimizer reduces the number of objects with combining the objects that have the same material.
            </para>
            <para>
            This can greatly improve performance, but prevents any further changed on the object.
            </para>
            <para>
            When model is created from many small objects, this can significantly decrease the performance.
            The reason for that is that each object is rendered with its own DirectX draw call. When many draw calls
            (more than 1000) are executed, the DirectX and driver overhead can limits the performance.
            </para>
            <para>
            Graphics card can render objects with many triangles very fast, but cannot render a lot of individual
            objects fast. Therefore the goal of the ModelOptimizer is to combine objects to reduce their number.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Utilities.ModelOptimizer.CompareMaterialsByHash">
            <summary>
            If true than special 64 bit hash code is calculated from each material and it is used to compare if two materials are the same (this combines difference instances of same material).
            If false than material references are compared.
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.ModelOptimizer.CombineModelsWithSameMaterial">
            <summary>
            If true than GeometryModel3D with the same material are combined into one GeometryModel3D.
            This reduces number of required GPU draw calls and can significantly improve performance.
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.ModelOptimizer.FreezeMaterials">
            <summary>
            Gets or sets a boolean that specifies if Materials are frozen.
            Freezing materials can improve performance and allow material objects to be user on different thread that the thread where they were created.
            A drawback is that when materials are frozen, they cannot be changed any more (but if GeometryModel3D is not frozen, the material can be still replaced by some other material).
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.ModelOptimizer.FreezeMeshGeometries">
            <summary>
            Gets or sets a boolean that specifies if MeshGeometries3D objects are frozen.
            Freezing MeshGeometries3D objects can improve performance and allow MeshGeometries3D objects to be user on different thread that the thread where they were created.
            A drawback is that when MeshGeometries3D objects are frozen, they cannot be changed any more - you cannot change individual positions or triangle indices (but if GeometryModel3D is not frozen, the value of Geometry property can be changed with some other Geometry).
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.ModelOptimizer.FreezeAll">
            <summary>
            Gets or sets a boolean that specifies if whole Model3D objects are frozen.
            Freezing Model3D objects can improve performance and allow Model3D objects to be user on different thread that the thread where they were created.
            Setting this property to true will also set <see cref="P:Ab3d.Utilities.ModelOptimizer.FreezeMaterials"/> and <see cref="P:Ab3d.Utilities.ModelOptimizer.FreezeMeshGeometries"/> to true.
            Default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.ModelOptimizer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.ModelOptimizer.Optimize(System.Windows.Media.Media3D.ModelVisual3D)">
            <summary>
            Optimizes the ModelVisual3D based on the ModelOptimizer settings.
            The method replaces the existing ModelVisual3D.Content with new Model3D object.
            </summary>
            <param name="visual3D">ModelVisual3D that will be optimized</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelOptimizer.Optimize(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Optimize method optimized the model3D and returns a new optimized Model3D object.
            Optimizations are done based on the ModelOptimizer settings.
            </summary>
            <param name="model3D">Model3D that will be optimized</param>
            <returns>optimized Model3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelOptimizer.Freeze(System.Windows.Media.Media3D.Model3D,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Freeze can freeze meshes, materials or whole Model3D.
            </summary>
            <param name="model">Model3DGroup or GeometryModel3D</param>
            <param name="freezeAll">if true the whole Model3D will be frozen</param>
            <param name="freezeMaterials">if true all Materials will be frozen</param>
            <param name="freezeMeshGeometries">if true all MeshGeometry3D objects will be frozen</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelOptimizer.OptimizeAll(System.Windows.Media.Media3D.Model3D)">
            <summary>
            OptimizeAll method uses ModelOptimizer to optimizes the Model3D with using the full optimization options.
            To specify optimization options, create an instance of ModelOptimizer and set its properties before calling Optimize method.
            </summary>
            <param name="model3D">Model3D that will be optimized</param>
            <returns>optimized Model3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelOptimizer.OptimizeAll(System.Windows.Media.Media3D.ModelVisual3D)">
            <summary>
            OptimizeAll method uses ModelOptimizer to optimizes the ModelVisual3D with using the full optimization options. 
            The method replaces the existing ModelVisual3D.Content with new Model3D object.
            To specify optimization options, create an instance of ModelOptimizer and set its properties before calling Optimize method.
            </summary>
            <param name="visual3D">ModelVisual3D that will be optimized</param>
        </member>
        <member name="T:Ab3d.Utilities.ModelUtils">
            <summary>
            ModelUtils class contains static methods that work on Model3D.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.GetBounds(System.Windows.Media.Media3D.Visual3DCollection,System.Windows.Media.Media3D.Transform3D,System.Boolean)">
            <summary>
            GetSceneBounds calculates the bounds of all 3D objects in the rootVisualCollection after the specified Transform3D has been applied to all positions or all mesh bounds.
            </summary>
            <param name="rootVisualCollection">Visual3DCollection</param>
            <param name="transform">Transform3D that will be applied to all child objects</param>
            <param name="checkOnlyBounds">if true true, then each MeshGeometry3D's Bounds will be checked; if false (by default) then every position will be checked</param>
            <returns>Rect3D that represents the bounds</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.CombineTransform(System.Windows.Media.Media3D.Transform3D,System.Windows.Media.Media3D.Transform3D)">
            <summary>
            CombineTransform combines the parent and child Transform3D and returns a new Transform3D or null if the combined transform is null or Identity.
            The method can accept any parent or child transform (including null).
            </summary>
            <param name="parent">parent transform or null</param>
            <param name="child">child transform or null</param>
            <returns>combined transform</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.ChangeMaterial(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material)">
            <summary>
            ChangeMaterial method changes Material and BackMaterial on all child models of the specified model.
            </summary>
            <param name="model">Model3D</param>
            <param name="newMaterial">new Material</param>
            <param name="newBackMaterial">new BackMaterial</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.ReplaceMaterial(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Material,System.Windows.Media.Media3D.Material,System.Boolean)">
            <summary>
            Goes through all models and replaces the materialToFind with newMaterial.
            When isBackMaterial is set to true, BackMaterial is replaced instead of Material.
            </summary>
            <param name="model">GeometryModel3D or Model3DGroup</param>
            <param name="materialToFind">Material that will be replaced by newMaterial</param>
            <param name="newMaterial">Material that will be used instead of materialToFind</param>
            <param name="isBackMaterial">if true then BackMaterial is replaced instead of Material</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.CopyModel(System.Windows.Media.Media3D.Model3D)">
            <summary>
            CopyModel returns a new Model3D that is a copy of the originalModel.
            The copied model contains new Model3DGroup, GeometryModel3D and new Light objects. But the models have the same materials and MeshGeometry3D objects.
            </summary>
            <param name="originalModel">original model</param>
            <returns>copy of the originalModel</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.GetMaterialDiffuseColor(System.Windows.Media.Media3D.Material,System.Windows.Media.Color)">
            <summary>
            Returns the color of the SolidColorBrush in the first DiffuseMaterial
            </summary>
            <param name="material">material</param>
            <param name="defaultColor">color that is returned when the DiffuseMaterial with SolidColorBrush is not found</param>
            <returns>color of the SolidColorBrush in the first DiffuseMaterial</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.HasAnyLight(System.Windows.Controls.Viewport3D,System.Boolean)">
            <summary>
            Returns true if the Viewport3D has any light defined. By default the AmbientLight is excluded.
            </summary>
            <param name="viewport3D">Viewport3D</param>
            <param name="excludeAmbientLight">if true then AmbientLight is excluded (method retuns false if only AmbientLight is defined).</param>
            <returns>true if the Viewport3D has any light defined (except AmbientLight)</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.HasAnyLight(System.Windows.Media.Media3D.Visual3D,System.Boolean)">
            <summary>
            Returns true if the Visual3D has any light defined. By default the AmbientLight is excluded.
            </summary>
            <param name="visual3D">Visual3D</param>
            <param name="excludeAmbientLight">if true then AmbientLight is excluded (method retuns false if only AmbientLight is defined).</param>
            <returns>true if the Visual3D has any light defined (except AmbientLight)</returns>
        </member>
        <member name="M:Ab3d.Utilities.ModelUtils.HasAnyLight(System.Windows.Media.Media3D.Model3D,System.Boolean)">
            <summary>
            Returns true if the Model3D has any light defined. By default the AmbientLight is excluded.
            </summary>
            <param name="model3D">Model3D</param>
            <param name="excludeAmbientLight">if true then AmbientLight is excluded (method retuns false if only AmbientLight is defined).</param>
            <returns>true if the Model3D has any light defined (except AmbientLight)</returns>
        </member>
        <member name="T:Ab3d.Utilities.MultiVisualEventSource3D">
            <summary>
            MultiVisualEventSource3D class is used to register more than one Visual3D object to the EventManager3D.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.MultiVisualEventSource3D.TargetVisuals3D">
            <summary>
            Gets or sets a IList of Visual3D that are used as the source of the mouse events.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.MultiVisualEventSource3D.TargetVisualNames">
            <summary>
            Gets or sets a comma separated list of names of the Visual3D that are used as the source of the mouse events.
            </summary>
            <remarks>
            <para>
            To use TargetVisualNames property a <see cref="P:Ab3d.Utilities.EventManager3D.NamedObjects"/> dictionary must be set on <see cref="T:Ab3d.Utilities.EventManager3D"/>. This way the real Visual3D can be resolved from the name.
            </para>
            <para>
            To set the list of Visual3D objects directly without using their names, set the <see cref="P:Ab3d.Utilities.MultiVisualEventSource3D.TargetVisuals3D"/> property instead.
            </para>
            </remarks>  
        </member>
        <member name="P:Ab3d.Utilities.MultiVisualEventSource3D.HitVisualName">
            <summary>
            Gets the name of the hit object (one of the names from TargetModelNames).
            </summary>
            <remarks>
            <para>
            This property is set after an event has occurred on this MultiVisualEventSource3D and when the TargetVisualNames was set.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Utilities.MultiVisualEventSource3D.HitVisual3D">
            <summary>
            Gets the Visual3D that was hit
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.MultiVisualEventSource3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.MultiVisualEventSource3D.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Visual3D})">
            <summary>
            Constructor
            </summary>
            <param name="targetVisuals3D">targetVisuals3D as IList of Visual3D</param>
        </member>
        <member name="M:Ab3d.Utilities.MultiVisualEventSource3D.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="targetVisualNames">comma separated list of names</param>
        </member>
        <member name="M:Ab3d.Utilities.MultiVisualEventSource3D.IsMyVisual(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Method that is called from EventManager3D to check if this EventSource3D contains hitVisual
            </summary>
            <param name="hitVisual">hitVisual as Visual3D</param>
            <returns>true if this EventSource3D contains hitVisual</returns>
        </member>
        <member name="T:Ab3d.Utilities.MultiModelEventSource3D">
            <summary>
            MultiModelEventSource3D class is used to register more than one Model3D object to the EventManager3D.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.MultiModelEventSource3D.TargetModels3D">
            <summary>
            Gets or sets a IList of Model3D that are used as the source of the mouse events.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.MultiModelEventSource3D.TargetModelNames">
            <summary>
            Gets or sets a comma separated list of names of the Model3D that are used as the source of the mouse events.
            </summary>
            <remarks>
            <para>
            To use TargetModelNames property a <see cref="P:Ab3d.Utilities.EventManager3D.NamedObjects"/> dictionary must be set on <see cref="T:Ab3d.Utilities.EventManager3D"/>. This way the real Model3D can be resolved from the name.
            </para>
            <para>
            Setting the name is useful when the 3D model was read with <b>Ab3d.Reader3ds</b> library. The Ab3d.Reader3ds class also defines the NamedObjects dictionary. It can be set to the EventManager3D and than all the ModelEventSource3D can be simply defined with the name of the 3D object.
            </para>
            <para>
            To set the list of Model3D objects directly without using their names, set the <see cref="P:Ab3d.Utilities.MultiModelEventSource3D.TargetModels3D"/> property instead.
            </para>
            </remarks>        
        </member>
        <member name="P:Ab3d.Utilities.MultiModelEventSource3D.HitModelName">
            <summary>
            Gets the name of the hit object (one of the names from TargetModelNames).
            </summary>
            <remarks>
            <para>
            This property is set after an event has occurred on this MultiModelEventSource3D and when the TargetModelNames was set.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Utilities.MultiModelEventSource3D.HitModel">
            <summary>
            Gets the Model3D that was hit
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.MultiModelEventSource3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.MultiModelEventSource3D.#ctor(System.Collections.Generic.IList{System.Windows.Media.Media3D.Model3D})">
            <summary>
            Constructor
            </summary>
            <param name="targetModels3D">targetModels3D as IList of Model3D</param>
        </member>
        <member name="M:Ab3d.Utilities.MultiModelEventSource3D.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="targetModelNames">comma separated list of names</param>
        </member>
        <member name="M:Ab3d.Utilities.MultiModelEventSource3D.IsMyGeometryModel3D(System.Windows.Media.Media3D.GeometryModel3D)">
            <summary>
            Method that is called from EventManager3D to check if this EventSource3D contains hitGeometryModel3D
            </summary>
            <param name="hitGeometryModel3D">hitModel as GeometryModel3D</param>
            <returns>true if this EventSource3D contains hitMesh</returns>
        </member>
        <member name="M:Ab3d.Utilities.PointCollectionHelper.Create2DConnectedLines(System.Windows.Media.PointCollection,System.Double,System.Boolean,System.Windows.Media.PointCollection@,System.Windows.Media.Int32Collection@)">
            <summary>
            Creates a widened line from inputPoints.
            Creates an outputPoints as PointCollection and outputTriangleIndeces as Int32Collection from inputPoints with specified thickness.
            If autoClose is true, the code checks if the first and last points are the same and in this case closes the path.
            </summary>
            <param name="inputPoints">inputPoints</param>
            <param name="thickness">thickness</param>
            <param name="autoClose">autoClose</param>
            <param name="outputPoints">outputPoints</param>
            <param name="outputTriangleIndeces">outputTriangleIndeces</param>
        </member>
        <member name="M:Ab3d.Utilities.PointCollectionHelper.GetLineIntersection(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean,System.Windows.Point@)">
            <summary>
            Gets the intersection of two lines
            </summary>
            <param name="lineStart1">start of first line</param>
            <param name="lineEnd1">end of first line</param>
            <param name="lineStart2">start of second line</param>
            <param name="lineEnd2">end of second line</param>
            <param name="extendLines">if true the intersection can be anywhere. If false the intersection must be on the lines.</param>
            <param name="intersection">intersection point</param>
            <returns>if true the methods got an intersection point - also based on the extendLines param</returns>
        </member>
        <member name="T:Ab3d.Utilities.TransformationsHelper">
            <summary>
            TransformationsHelper class contain methods that help to work with transformations, for example <see cref="M:Ab3d.Utilities.TransformationsHelper.GetModelTotalTransform(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Model3D,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransformationsHelper.GetModelTotalTransform(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Model3D,System.Boolean)">
            <summary>
            GetModelTotalTransform returns a Transform3D that is contains all the transformations from the rootModel to the finalModel.
            If no transformation is found, then null is returned.
            </summary>
            <remarks>
            <para>
            <b>GetModelTotalTransform</b> returns a Transform3D that is contains all the transformations from the rootModel to the finalModel.
            </para>
            <para>
            If no transformation is found, then null is returned.
            </para>
            <para>
            GetModelTotalTransform can be used when we want to get the transformation of a Model3D that is inside a hierarchy of objects - for example when
            we are showing selection lines of an object, the lines are not drawn in a separate Visual3D object and therefore we need to get the total transformation of the child Model3D.
            </para>
            </remarks>
            <param name="rootModel">The Model3D object that is the root of the hierarchy where the finalModel is</param>
            <param name="finalModel">The Model3D object for witch the Transform3D is created</param>
            <param name="addFinalModelTransformation">if true then the returned Transform3D also contains the transform of the finalModel</param>
            <returns>Transform3D or null if no transformation is found</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransformationsHelper.GetModelTotalTransform(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Model3D,System.Boolean,System.Boolean@)">
            <summary>
            GetModelTotalTransform returns a Transform3D that is contains all the transformations from the rootModel to the finalModel.
            If no transformation is found, then null is returned.
            </summary>
            <remarks>
            <para>
            <b>GetModelTotalTransform</b> returns a Transform3D that is contains all the transformations from the rootModel to the finalModel.
            </para>
            <para>
            If no transformation is found, then null is returned.
            </para>
            <para>
            GetModelTotalTransform can be used when we want to get the transformation of a Model3D that is inside a hierarchy of objects - for example when
            we are showing selection lines of an object, the lines are not drawn in a separate Visual3D object and therefore we need to get the total transformation of the child Model3D.
            </para>
            </remarks>
            <param name="rootModel">The Model3D object that is the root of the hierarchy where the finalModel is</param>
            <param name="finalModel">The Model3D object for witch the Transform3D is created</param>
            <param name="addFinalModelTransformation">if true then the returned Transform3D also contains the transform of the finalModel</param>
            <param name="isModelFound">false if the finalModel is not found under rootModel</param>
            <returns>Transform3D or null if no transformation is found</returns>
        </member>
        <member name="T:Ab3d.Utilities.TransparencyHelper">
            <summary>
            TransparencyHelper class contains helper static methods that are used by transparency sorting.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransparencyHelper.GetOpacity(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Returns opacity of the Visual3D (NOTE: Only gets opacity of the Content and not the Children).
            </summary>
            <param name="visual3D">Visual3D</param>
            <returns>opacity</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencyHelper.GetOpacity(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Returns opacity of the Model3D.
            </summary>
            <param name="model">Model3D</param>
            <returns>opacity</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencyHelper.GetOpacity(System.Windows.Media.Media3D.Material)">
            <summary>
            Returns opacity of the Material.
            </summary>
            <param name="material">Material</param>
            <returns>opacity</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencyHelper.GetTransparentObjectsCount(System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Returns count of transparent objects (objects where material's opacity &lt; 1) inside Model3DGroup.
            </summary>
            <param name="rootModelGroup">Model3DGroup</param>
            <returns>count of transparent objects</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencyHelper.GetTransparentObjectsList(System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Returns a List of Model3D that have opacity material.
            </summary>
            <param name="rootModelGroup">Model3DGroup or all the models</param>
            <returns>List of Model3D that have opacity material</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencyHelper.SortTransparentObjectsList(System.Windows.Media.Media3D.Model3DGroup,System.Collections.Generic.List{System.Windows.Media.Media3D.Model3D})">
            <summary>
            Moves the transparentObjects in the rootModelGroup after non-transparent objects.
            </summary>
            <param name="rootModelGroup">Model3DGroup of all models</param>
            <param name="transparentObjects">list of transparent models</param>
        </member>
        <member name="T:Ab3d.Utilities.TransparencySorter">
            <summary>
            TransparencySorter class can be used to solve the problems with transparent objects in WPF 3D.
            </summary>
            <remarks>
            <para>
            WPF 3D can show transparent 3D objects. 
            But to show them correctly, the transparent objects need to be defined after all the objects that are visible through them.
            This does not mean their position in 3D space but their index in the object's hierarchy (index in the parent's Children collection).
            The objects that are defined after the transparent objects cannot be seen through the transparent objects.
            </para>
            <para>
            The following image shows the transparency problem in a simple 3D scene (because the red boxes are defined after the semi-transparent GlassPlane they are not visible throug the GlassPlane. The order of objects is visible in the right):
            </para>
            <para>
            <img src="wpf_transparency_1.png"/>
            </para>
            <para>
            To solve the problem, the GlassPlane needs to be moved after the non-transparent objects. The following image is showing the correctly rendered scene.
            </para>
            <para>
            <img src="wpf_transparency_2.png"/>
            </para>
            <para>
            For cases when the number of transparent objects is not big and if the transparent objects are not positioned in 3D space one after another,
            the simple transparency sorting is usually enough to produce correct rendering in WPF 3D.
            </para>
            <para>
            But simply moving transparent objects after non-transparent objects is not always enough.
            For example if transparent object A is visible through transparent object B, than B must be defined after A.
            The problem in this case occurs when the camera is rotated so that B is visible through A. Now B must be defined before A.
            To solve this problem correctly, firstly the transparent objects must be moved after non-transparent objects and than transparent objects must be sorted by their distance to the camera.
            The sorting must be done after the camera is changed.
            </para>
            <para>
            <b>TransparencySorter</b> class can be used to perform a <b>simple</b> transparency sorting with just moving all transparent objects after non-transparent objects,
            or to perform a <b>ByCameraDistance</b> transparency sorting where the transparent objects are sorted by their distance to the camera.
            </para>
            <para>
            The sorting by camera distance can be also automated so the sorting is automatically done when the camera is changed.
            To improve performance sorting is not done on each camera change, but is done only if the angle of the camera is changed for more than <see cref="P:Ab3d.Utilities.TransparencySorter.CameraAngleChange"/>.
            By default the CameraAngleChange is 5. This means that the transparent object will be resorted after the camera has changed for more than 5 degrees.
            </para>
            <para>
            If it is not known if the scene contains any transparent objects (for examplie if it created from a external file), it is possible to check for transparent objects with the
            <see cref="M:Ab3d.Utilities.TransparencyHelper.GetTransparentObjectsCount(System.Windows.Media.Media3D.Model3DGroup)"/> method. 
            If the objects are read with Ab3d.Reader3ds, it is possible to get the number of transparent objects with TransparentObjectsCount property.
            </para>
            <para>
            The following line of code is enough to perform a simple transparency sorting:
            </para>
            <code>
            Ab3d.Utilities.TransparencySorter.SimpleSort(myRootObjectsGroup);
            </code>
            <para>
            The following line of code is enough to perform a transparency sorting by camera distance (sorting is performed only once):
            </para>
            <code>
            Ab3d.Utilities.TransparencySorter.SortByCameraDistance(myRootObjectsGroup, mySphericalCamera);
            </code>
            <para>
            Instead of using Ab3d.Camera (for example SphericalCamera), it is also possible to use camera's position (Point3D):
            </para>
            <code>
            Ab3d.Utilities.TransparencySorter.SortByCameraDistance(myRootObjectsGroup, cameraPosition);
            </code>    
            <para>
            To automatically sort the objects when the camera is changed the following code can be used:
            </para>
            <code>
            TransparencySorter transparencySorter;
            
            transparencySorter = new TransparencySorter(myRootObjectsGroup, mySphericalCamera);
            transparencySorter.StartSortingOnCameraChanged();
            
            // transparencySorter.StopSortingOnCameraChanged(); // Stops the sorting on camera changed
            </code>
            <para>
            When creating an instance of TransparencySorter class, it is possible to monitor the sorting with subscribing to <see cref="E:Ab3d.Utilities.TransparencySorter.TransparentModelIndexChanged"/> and <see cref="E:Ab3d.Utilities.TransparencySorter.SortingCompleted"/> events.
            To implement custom sorting or use custom values to sort the objects, it is possible to derive a custom class from TransparencySorter and override some of the metods that are used to perform the sorting.
            </para>
            </remarks>
        </member>
        <member name="T:Ab3d.Utilities.TransparencySorter.SortingModeTypes">
            <summary>
            SortingModeTypes defines possible type of transparency sorting.
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.TransparencySorter.SortingModeTypes.Disabled">
            <summary>
            The transparency sorting is disabled.
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.TransparencySorter.SortingModeTypes.Simple">
            <summary>
            Transparency sorting is done with moving transparent objects after non-transparent objects.
            </summary>
        </member>
        <member name="F:Ab3d.Utilities.TransparencySorter.SortingModeTypes.ByCameraDistance">
            <summary>
            Transparency sorting is done with moving transparent objects after non-transparent objects and also sorting the transparent objects by their distance from the camera.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparencySorter.CameraAngleChange">
            <summary>
            Gets or sets an angle in degrees that specify for how many degrees the camera can change before next automatic sorting is performed.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparencySorter.SortingMode">
            <summary>
            Gets or sets type of the transparency sorting.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparencySorter.CacheBounds">
            <summary>
            Gets or sets a Boolean that specify if the objects bounds can be cached.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparencySorter.TransparentModels">
            <summary>
            Gets root group of transparent models.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.TransparencySorter.TransparentModelIndexChanged">
            <summary>
            Notify that the specific Transparent model has been repositioned.
            </summary>
        </member>
        <member name="E:Ab3d.Utilities.TransparencySorter.SortingCompleted">
            <summary>
            Notify that the sorting is completed.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparencySorter.UsedCamera">
            <summary>
            Gets or sets a SphericalCamera that is used to make the sorting by camera distance.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Constructor with rootModelGroup. Sorting mode is set to Simple.
            </summary>
            <param name="rootModelGroup">Model3DGroup</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Media.Media3D.Model3DGroup,Ab3d.Cameras.SphericalCamera)">
            <summary>
            Constructor with rootModelGroup and usedCamera. Sorting mode is set to ByCameraDistance.
            </summary>
            <param name="rootModelGroup">Model3DGroup</param>
            <param name="usedCamera">SphericalCamera</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Media.Media3D.Model3DGroup,Ab3d.Cameras.SphericalCamera,System.Double)">
            <summary>
            Constructor with rootModelGroup, usedCamera and cameraAngleChange. Sorting mode is set to ByCameraDistance.
            </summary>
            <param name="rootModelGroup">Model3DGroup</param>
            <param name="usedCamera">SphericalCamera</param>
            <param name="cameraAngleChange">change of camera angle in degrees that will make a new sort</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Media.Media3D.ModelVisual3D)">
            <summary>
            Constructor with rootModelVisual3D. Sorting mode is set to Simple.
            </summary>
            <param name="rootModelVisual3D">ModelVisual3D</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Media.Media3D.Visual3DCollection)">
            <summary>
            Constructor with rootVisual3DCollection. Sorting mode is set to Simple.
            </summary>
            <param name="rootVisual3DCollection">Visual3DCollection</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Media.Media3D.ContainerUIElement3D)">
            <summary>
            Constructor with rootVisual3DCollection. Sorting mode is set to Simple.
            </summary>
            <param name="containerUIElement3D">ContainerUIElement3D</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor with rootViewport3D. Sorting mode is set to Simple.
            </summary>
            <param name="rootViewport3D">Viewport3D</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Controls.Viewport3D,Ab3d.Cameras.SphericalCamera)">
            <summary>
            Constructor with rootViewport3D and usedCamera. Sorting mode is set to ByCameraDistance.
            </summary>
            <param name="rootViewport3D">Viewport3D</param>
            <param name="usedCamera">SphericalCamera</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.#ctor(System.Windows.Controls.Viewport3D,Ab3d.Cameras.SphericalCamera,System.Double)">
            <summary>
            Constructor with rootViewport3D, usedCamera and cameraAngleChange. Sorting mode is set to ByCameraDistance.
            </summary>
            <param name="rootViewport3D">Viewport3D</param>
            <param name="usedCamera">SphericalCamera</param>
            <param name="cameraAngleChange">change of camera angle in degrees that will make a new sort</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SimpleSort(System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Sorts objects in Model3DGroup with moving transparent objects to the back of the objects collection.
            </summary>
            <param name="modelGroup">Model3DGroup</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SimpleSort(System.Windows.Media.Media3D.ModelVisual3D)">
            <summary>
            Sorts objects in ModelVisual3D with moving transparent objects to the back of the objects collection.
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SimpleSort(System.Windows.Media.Media3D.Visual3DCollection)">
            <summary>
            Sorts objects in Visual3DCollection with moving transparent objects to the back of the objects collection.
            </summary>
            <param name="visual3DCollection">Visual3DCollection</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SimpleSort(System.Windows.Media.Media3D.ContainerUIElement3D)">
            <summary>
            Sorts objects in containerUIElement3D with moving transparent objects to the back of the objects collection.
            </summary>
            <param name="containerUIElement3D">ContainerUIElement3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SimpleSort(System.Windows.Controls.Viewport3D)">
            <summary>
            Sorts objects in Viewport3D with moving transparent objects to the back of the objects collection.
            </summary>
            <param name="viewport3D">Viewport3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Media.Media3D.Model3DGroup,Ab3d.Cameras.SphericalCamera)">
            <summary>
            Sorts objects in Model3DGroup with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="modelGroup">Model3DGroup</param>
            <param name="camera">SphericalCamera</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Media.Media3D.ModelVisual3D,Ab3d.Cameras.SphericalCamera)">
            <summary>
            Sorts objects in ModelVisual3D with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
            <param name="camera">SphericalCamera</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Media.Media3D.Visual3DCollection,Ab3d.Cameras.SphericalCamera)">
            <summary>
            Sorts objects in Visual3DCollection with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="visual3DCollection">Visual3DCollection</param>
            <param name="camera">SphericalCamera</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Controls.Viewport3D,Ab3d.Cameras.SphericalCamera)">
            <summary>
            Sorts objects in Viewport3D with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="viewport3D">Viewport3D</param>
            <param name="camera">SphericalCamera</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Media.Media3D.Model3DGroup,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Sorts objects in Model3DGroup with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="modelGroup">Model3DGroup</param>
            <param name="cameraPosition">cameraPosition as Point3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Media.Media3D.ModelVisual3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Sorts objects in ModelVisual3D with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
            <param name="cameraPosition">cameraPosition as Point3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Media.Media3D.Visual3DCollection,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Sorts objects in Visual3DCollection with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="visual3DCollection">Visual3DCollection</param>
            <param name="cameraPosition">cameraPosition as Point3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Media.Media3D.ContainerUIElement3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Sorts objects in Visual3DCollection with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="containerUIElement3D">ContainerUIElement3D</param>
            <param name="cameraPosition">cameraPosition as Point3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.SortByCameraDistance(System.Windows.Controls.Viewport3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Sorts objects in Viewport3D with moving transparent objects to the back of the objects collection. 
            The transparent objects are arranged in that way that the objects that are farther away from the camera are rendered before objects that are closer to the camera.
            </summary>
            <param name="viewport3D">Viewport3D</param>
            <param name="cameraPosition">cameraPosition as Point3D</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.Sort">
            <summary>
            Sort the objects.
            </summary>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.Sort(Ab3d.Utilities.TransparencySorter.SortingModeTypes)">
            <summary>
            Sort the objects with the sortingType.
            </summary>
            <param name="sortingType">sorting type</param>
            <returns>true if any object was moved</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.StartSortingOnCameraChanged">
            <summary>
            StartSortingOnCameraChanged method starts checking the camera changed events and performs automatic sorting when the camera is changed for more than <see cref="P:Ab3d.Utilities.TransparencySorter.CameraAngleChange"/>.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.StopSortingOnCameraChanged">
            <summary>
            Stops automatic sorting on camera changed event.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.RecollectTransparentModels(System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Refreshes the collection of transparent objects.
            </summary>
            <param name="newRootModelGroup">Model3DGroup</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.RecollectTransparentModels(System.Windows.Media.Media3D.ModelVisual3D)">
            <summary>
            Refreshes the collection of transparent objects.
            </summary>
            <param name="newRootModelVisual3D">ModelVisual3D</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.RecollectTransparentModels(System.Windows.Media.Media3D.Visual3DCollection)">
            <summary>
            Refreshes the collection of transparent objects.
            </summary>
            <param name="newRootVisual3DCollection">Visual3DCollection</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.RecollectTransparentModels(System.Windows.Controls.Viewport3D)">
            <summary>
            Refreshes the collection of transparent objects.
            </summary>
            <param name="newRootViewport3D">Viewport3D</param>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.RecollectTransparentModels">
            <summary>
            Refreshes the list of current transparent models (used in case when the opacity of some already collected models is changed).
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.CalculateSortedValue(Ab3d.Common.Utilities.BaseTransparentObject3D,Ab3d.Utilities.TransparencySorter.SortingModeTypes)">
            <summary>
            CalculateSortedValue returns the sorted value for transparentModel3D and sortingType that will be used to set the model's order.
            The method can be overridden to provide custom objects ordering.
            </summary>
            <param name="transparentModel3D">TransparentModel3D</param>
            <param name="sortingType">TransparencySortingType</param>
            <returns>sorted value that will be used to set the model's order</returns>
        </member>
        <member name="M:Ab3d.Utilities.TransparencySorter.IsRearangeNeeded(Ab3d.Cameras.SphericalCamera)">
            <summary>
            Returns true is the camera has changed enough to perform automatic sorting.
            </summary>
            <param name="sphericalCamera">SphericalCamera</param>
            <returns>true is the camera has changed enough to perform automatic sorting</returns>
        </member>
        <member name="T:Ab3d.Utilities.TransparentModelIndexChangedEventHandler">
            <summary>
            Delegate used for the <see cref="E:Ab3d.Utilities.TransparencySorter.TransparentModelIndexChanged"/> event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Ab3d.Utilities.TransparentModelIndexChangedEventArgs">
            <summary>
            TransparentModelIndexChangedEventArgs is used in for the <see cref="E:Ab3d.Utilities.TransparencySorter.TransparentModelIndexChanged"/> event.
            It is used to notify which event was rearranged and from and to which position.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparentModelIndexChangedEventArgs.Changed3DObject">
            <summary>
            Gets the changed 3D object.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparentModelIndexChangedEventArgs.OldIndex">
            <summary>
            Gets the old index of the changed object.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.TransparentModelIndexChangedEventArgs.NewIndex">
            <summary>
            Gets the new index of the changed object.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.TransparentModelIndexChangedEventArgs.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="changedTransparentObject3D">changed 3D object</param>
            <param name="oldIndex">old index</param>
            <param name="newIndex">new index</param>
        </member>
        <member name="T:Ab3d.Utilities.Triangulator">
            <summary>
            Triangulator can be used to convert a polygon that is defined by a list of 3D points into triangles that can be than used to create 3D object.
            </summary>
            <remarks>
            <para>
            Triangulator uses a process that is called triangulation. 
            Triangulation gets a list of points and creates triangles in such a way that they define a polygon.
            The triangles can be than used to create 3D objects.
            </para>
            <para>
            The algorithm that is used in Triangulator first analyzes the polygon defined by the specified points.
            If the polygon is convex, than a simple triangle fan algorithm is used.
            Otherwise the ear clipping algorithm is used (based on algorithm defined defined by David Eberly - http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf).
            The current implementation of Triangulator does not support polygons with holes.
            </para>
            <para>
            Triangulator can be used in two ways:<br/>
            - with its static <see cref="M:Ab3d.Utilities.Triangulator.Triangulate(System.Collections.Generic.IList{System.Windows.Point})"/> method,
            - with creating an instance of Triangulator class and than calling its <see cref="M:Ab3d.Utilities.Triangulator.CreateTriangleIndices"/> method.
            </para>
            <para>
            When creating an instance of Triangulator you need to specify the list of points.
            After that it is possible to get some of the properties of the polygon defined by the points: <see cref="P:Ab3d.Utilities.Triangulator.IsClockwise"/>, <see cref="P:Ab3d.Utilities.Triangulator.IsClosed"/>, <see cref="P:Ab3d.Utilities.Triangulator.IsPolygonConvex"/> and <see cref="P:Ab3d.Utilities.Triangulator.PolygonArea"/>.
            For example the IsClockwise property is useful when creating extruded objects from polygons - if the IsClockwise is false, the normals for the extruded object need to be flipped.
            </para>
            <para>
            Both <see cref="M:Ab3d.Utilities.Triangulator.Triangulate(System.Collections.Generic.IList{System.Windows.Point})"/> and <see cref="M:Ab3d.Utilities.Triangulator.CreateTriangleIndices"/> methods return a List of integer values that can be used as TriangleIndices in the mesh (points can be used as Positions in the mesh). 
            </para>
            <para>
            <b>IMPORTANT:</b><br/>
            When the points define an invalid polygon (for example when the polygon lines intersect each other) both Triangulate and CreateTriangleIndices can return a FormatException.
            Therefore if you do not control the way the points are defined (for example when user can define them in any way), than you need to catch the FormatException.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Utilities.Triangulator.IsClosed">
            <summary>
            Gets a boolean that specifies if the specified points define a close path.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.Triangulator.IsClockwise">
            <summary>
            Gets a boolean that specifies if the specified points are oriented in clockwise direction.
            </summary>
            <remarks>
            <para>
            <b>IsClockwise </b> gets a boolean that specifies if the specified points are oriented in clockwise direction.
            </para>
            <para>
            This property is useful when creating extruded objects from polygons - if the IsClockwise is false, the normals for the extruded object need to be flipped.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Utilities.Triangulator.IsPolygonConvex">
            <summary>
            Gets a boolean that specifies if the specified points define a convex polygon.
            In convex polygon every internal angle is less than or equal to 180 degrees and every line segment between two vertices remains inside or on the boundary of the polygon.
            For example square is convex, but star is not (it is concave).
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.Triangulator.PolygonArea">
            <summary>
            Gets a double that specifies the area defined by the specified points.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.Triangulator.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Constructor.
            </summary>
            <param name="points">list of points that define the polygon that need to be triangulated.</param>
        </member>
        <member name="M:Ab3d.Utilities.Triangulator.CreateTriangleIndices">
            <summary>
            CreateTriangleIndices method triangulates the specified points and creates a list of triangle indices that define the polygon.
            </summary>
            <exception cref="T:System.FormatException">FormatException is thrown when the points define an invalid polygon - usually when the polygon lines intersect each other.</exception>
            <returns>List of triangle indices that define the polygon</returns>
        </member>
        <member name="M:Ab3d.Utilities.Triangulator.Triangulate(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Triangulate method triangulates the specified points and creates a list of triangle indices that define the polygon.
            </summary>
            <param name="points">List of triangle indices that define the polygon</param>
            <exception cref="T:System.FormatException">FormatException is thrown when the points define an invalid polygon - usually when the polygon lines intersect each other.</exception>
            <returns>List of triangle indices that define the polygon</returns>
        </member>
        <member name="T:Ab3d.Utilities.VisualEventSource3D">
            <summary>
            VisualEventSource3D class is used to register a Visual3D object to the EventManager3D.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.VisualEventSource3D.TargetVisual3D">
            <summary>
            Gets or sets the Visual3D that is used as the source of the mouse events.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.VisualEventSource3D.TargeVisualName">
            <summary>
            Gets or sets the name of the Visual3D that is used as the source of the mouse events.
            </summary>
            <remarks>
            <para>
            To use TargeVisualName property a <see cref="P:Ab3d.Utilities.EventManager3D.NamedObjects"/> dictionary must be set on <see cref="T:Ab3d.Utilities.EventManager3D"/>. This way the real Visual3D can be resolved from the name.
            </para>
            <para>
            To set the Visual3D directly without using its name, set the <see cref="P:Ab3d.Utilities.VisualEventSource3D.TargetVisual3D"/> property instead.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Utilities.VisualEventSource3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.VisualEventSource3D.#ctor(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Constructor
            </summary>
            <param name="targetVisual3D">targetVisual3D</param>
        </member>
        <member name="M:Ab3d.Utilities.VisualEventSource3D.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="visualName">visualName</param>
        </member>
        <member name="M:Ab3d.Utilities.VisualEventSource3D.IsMyVisual(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Method that is called from EventManager3D to check if this EventSource3D contains hitVisual
            </summary>
            <param name="hitVisual">hitVisual as Visual3D</param>
            <returns>true if this EventSource3D contains hitVisual</returns>
        </member>
        <member name="T:Ab3d.Utilities.ModelEventSource3D">
            <summary>
            ModelEventSource3D class is used to register a Model3D object to the EventManager3D. 
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.ModelEventSource3D.TargetModel3D">
            <summary>
            Gets or sets the Model3D that is used as the source of the mouse events.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.ModelEventSource3D.TargetModelName">
            <summary>
            Gets or sets the name of the Model3D that is used as the source of the mouse events.
            </summary>
            <remarks>
            <para>
            To use TargetModelName property a <see cref="P:Ab3d.Utilities.EventManager3D.NamedObjects"/> dictionary must be set on <see cref="T:Ab3d.Utilities.EventManager3D"/>. This way the real Model3D can be resolved from the name.
            </para>
            <para>
            Setting the name is useful when the 3D model was read with <b>Ab3d.Reader3ds</b> library. The Ab3d.Reader3ds class also defines the NamedObjects dictionary. It can be set to the EventManager3D and than all the ModelEventSource3D can be simply defined with the name of the 3D object.
            </para>
            <para>
            To set the Model3D directly without using its name, set the <see cref="P:Ab3d.Utilities.ModelEventSource3D.TargetModel3D"/> property instead.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Utilities.ModelEventSource3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.ModelEventSource3D.#ctor(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Constructor
            </summary>
            <param name="targetObject">targetObject</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelEventSource3D.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="modelName">modelName</param>
        </member>
        <member name="M:Ab3d.Utilities.ModelEventSource3D.IsMyGeometryModel3D(System.Windows.Media.Media3D.GeometryModel3D)">
            <summary>
            Method that is called from EventManager3D to check if this EventSource3D contains hitGeometryModel3D
            </summary>
            <param name="hitGeometryModel3D">hitModel as GeometryModel3D</param>
            <returns>true if this EventSource3D contains hitMesh</returns>
        </member>
        <member name="T:Ab3d.Utilities.EventManager3D">
            <summary>
            EventManager3D class is a helper class that enables user to simply subscribe to mouse and touch events on 3D objects.
            </summary>
            <remarks>
            <para>
            Some mouse events support is already available with WPF's ModelUIElement3D class, but it only support
            some of the mouse events and provide only limited information about the hit objects. 
            Its usage also requires breaking the 3D objects that are grouped with Model3DGroup into individual ModelUIElement3D objects. 
            Using EventManager3D provides much better events support and does not require any change in the 3D objects organization.
            </para>
            <para>
            The following mouse events are supported:<br/>
            MouseEnter<br/>
            MouseLeave,<br/>
            MouseMove,<br/>
            MouseDown,<br/>
            MouseUp,<br/>
            MouseClick,<br/>
            MouseDoubleClick,<br/>
            MouseWheel,<br/>
            BeginMouseDrag,<br/>
            MouseDrag,<br/>
            EndMouseDrag.<br/>
            </para>
            <para>
            When a .Net 4 version of Ab3d.PowerToys library is used, EventManager3D also supports the following touch events:<br/>
            TouchEnter,<br/>
            TouchDown,<br/>
            TouchMove,<br/>
            TouchUp,<br/>
            TouchLeave.<br/>
            </para>
            <para>
            It is also possible to use touch manipulations events (pinch scale and rotate).
            To use manipulation events, first set IsManipulationEnabled to true (some mouse events will not happen after that) and than you can subscribe to the following events:<br/>
            ManipulationStarted,<br/>
            ManipulationDelta,<br/>
            ManipulationCompleted.<br/>
            </para>
            <para>
            This way you do not need to do the complicated 3D hit testing any more. 
            You can simply subscribe to mouse events. This way you the code is much simpler and better organized.
            </para>
            <para>
            It is also possible to exclude some Visual3D objects from hit testing with <see cref="M:Ab3d.Utilities.EventManager3D.RegisterExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)"/> method.
            This means that when the ray from the mouse will hit the excluded Visual3D, it will not produce a hit test but will continue with checking if there are any objects behind.
            To remove the Visual3D form exclusion list, call the <see cref="M:Ab3d.Utilities.EventManager3D.RemoveExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)"/> method (exclusion list is also cleared when called <see cref="M:Ab3d.Utilities.EventManager3D.ResetEventSources3D"/> method).
            </para>
            <para>
            This can be very useful for example when we are drawing an object or 3D line at the position of mouse hit. 
            Without an option to exclude the drawn object or 3d line, we would get many MouseEnter and MouseLeave events because mouse will sometimes hit the back object and sometimes the drawn object or 3D line.
            </para>
            <para>
            <b>Important:</b><br/>
            It is highly recommended not to have more than one EventManager3D object per Viewport3D. 
            Having multiple EventManager3D object can greatly reduce the performance because each time the Viewport3D camera is changed, 
            each EventManager3D must perform a full 3D hit testing from the current mouse position. 
            This operation is very CPU intensive and can affect performance when there are many 3D objects in the scene.
            When multiple EventManager3D object are defined, then the 3D hit testing is performed multiple times.
            Therefore it is recommended to have only one EventManager3D object per Viewport3D.
            </para>
            <para>
            It is also recommended to remove registered event sources after they are not used any more.
            This can be done with <see cref="M:Ab3d.Utilities.EventManager3D.RemoveEventSource3D(Ab3d.Utilities.BaseEventSource3D)"/> method. 
            </para>
            <para>
            <see cref="M:Ab3d.Utilities.EventManager3D.UpdateHitObjects"/> method can be called to manually update the 3D objects that are behind the current mouse position.
            This is useful when the camera is changed without moving the mouse. 
            In this case the 3D objects behind the mouse position can change. 
            If this happens the MouseEnter, MouseLeave and other event handlers will be called from the UpdateHitObjects method.
            </para>
            <para>
            <strong>Usage:</strong>
            </para>
            <para>
            To use EventManager3D create an instance of EventManager3D class and pass TargetViewport3D as constructor parameter.
            </para>
            <para>
            Than if you need to subscribe events on Model3D create <see cref="T:Ab3d.Utilities.ModelEventSource3D"/> and set its TargetModel3D to the Model3D. Now you can subscribe to the events on the created ModelEventSource3D. The last thing to do is to register the ModelEventSource3D to the EventManager3D with the <see cref="M:Ab3d.Utilities.EventManager3D.RegisterEventSource3D(Ab3d.Utilities.BaseEventSource3D)"/> method on the EventManager3D.
            </para>
            <para>
            If you need to subscribe to events on Visual3D use <see cref="T:Ab3d.Utilities.VisualEventSource3D"/> instead of ModelEventSource3D.
            </para>
            <para>
            It is also possible to subscribe the same events on more Model3D or Visual3D objects. In this case use <see cref="T:Ab3d.Utilities.MultiModelEventSource3D"/> or <see cref="T:Ab3d.Utilities.MultiVisualEventSource3D"/>.
            </para>
            <para>
            If you have read 3D objects with <strong>Ab3d.Reader3ds</strong> or have the 3D objects already organized in a Dictionary with name object pairs, you can define the objects or visuals by their name. In this case the <see cref="P:Ab3d.Utilities.EventManager3D.NamedObjects"/> dictionary must be set on EventManager3D.
            </para>
            </remarks>
            <example>
            <para>
            The following sample shows how to subscribe to click event on MyBoxVisual3D object and change the material on the object.
            </para>
            <code>
            private bool _isSelected;
            Ab3d.Utilities.EventManager3D _eventManager;
            
            private void SubscribeEvents()
            {
                Ab3d.Utilities.VisualEventSource3D eventSource3D;
            
                _eventManager = new Ab3d.Utilities.EventManager3D(MyViewport3D);
            
                eventSource3D = new Ab3d.Utilities.VisualEventSource3D();
                eventSource3D.TargetVisual3D = MyBoxVisual3D;
                eventSource3D.MouseClick += new Ab3d.Common.EventManager3D.MouseButton3DEventHandler(eventSource3D_MouseClick);
            
                _eventManager.RegisterEventSource3D(eventSource3D);
            }
            
            void eventSource3D_MouseClick(object sender, Ab3d.Common.EventManager3D.MouseButton3DEventArgs e)
            {
                Material newMaterial;
            
                if (_isSelected)
                    newMaterial = new DiffuseMaterial(Brushes.Blue);
                else
                    newMaterial = new DiffuseMaterial(Brushes.Red);
            
                MyBoxVisual3D.Material = newMaterial;
            
                _isSelected = !_isSelected;
            }
            </code>
            </example>
        </member>
        <member name="P:Ab3d.Utilities.EventManager3D.DragMouseDistance">
            <summary>
            Gets or sets the distance mouse must make when the move is considered as mouse drag. The default value is 5.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.EventManager3D.TargetViewport3D">
            <summary>
            Gets or sets a Viewport3D that contains the Model3D and Visual3D objects that are used by this EventManager3D.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.EventManager3D.CustomEventsSourceElement">
            <summary>
            Gets or sets a FrameworkElement that can be used instead of TargetViewport3D to get the mouse events (MouseMove, MouseEnter, MouseLeave). If null (default) than TargetViewport3D is used as event source.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.EventManager3D.IsEnabled">
            <summary>
            Gets or sets a boolean value that specifies if the EventManager3D is enabled.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.EventManager3D.IsManipulationEnabled">
            <summary>
            Gets or sets a boolean that specifies if Manipulation (touch based) events are enabled by this EventManager3D (this works only when .Net 4 or higher version of the library is used). Default valus is false.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.EventManager3D.UsePreviewEvents">
            <summary>
            Gets or sets a boolean that specifies if EventManager3D subscribed to Preview moouse and touch events instead of standard events - for example PreviewMouseUp event instead of MouseUp event.
            Default value is false;
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.EventManager3D.NamedObjects">
            <summary>
            Gets or sets a Dictionary&lt;string, object&gt; that is can be used to specify object names in the registered EventSource3D objects.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.#ctor(System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="targetViewport3D">parent Viewport3D on which the registered EventSource3D are shown</param>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.RegisterEventSource3D(Ab3d.Utilities.BaseEventSource3D)">
            <summary>
            Registers the eventSource to the EventManager3D
            </summary>
            <param name="eventSource">EventSource3D to be registered</param>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.RemoveEventSource3D(Ab3d.Utilities.BaseEventSource3D)">
            <summary>
            Removes the eventSource from the EventManager3D
            </summary>
            <param name="eventSource">EventSource3D to be removed</param>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.ResetEventSources3D">
            <summary>
            Clears all the registered EventSource3D objects. This also removes all registered Visuals that are not hit visible.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.RegisterExcludedVisual3D(System.Windows.Media.Media3D.Visual3D[])">
            <summary>
            Registers a list of visual3D objects that will be excluded from hit testing - the ray from the mouse will "travel" through that Visual and will hit the objects behind.
            </summary>
            <param name="visuals">list of visuals that will be excluded</param>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.RegisterExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Registers a visual3D that will be excluded from hit testing - the ray from the mouse will "travel" through that Visual and will hit the objects behind.
            </summary>
            <param name="visual3D">visual3D that will be excluded from hit testing</param>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.RemoveExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Removed the visual3D from the excluded visuals list. To remove all excluded visuals it is also possible to call <see cref="M:Ab3d.Utilities.EventManager3D.ResetEventSources3D"/> method.
            </summary>
            <param name="visual3D">visual3D that will be removed from excluded list.</param>
        </member>
        <member name="M:Ab3d.Utilities.EventManager3D.UpdateHitObjects">
            <summary>
            UpdateHitObjects method can be called to manually update the 3D objects that are behind the current mouse position.
            This is useful when the camera is changed without moving the mouse. 
            In this case the 3D objects behind the mouse position can change. 
            If this happens the MouseEnter, MouseLeave and other event handlers will be called from the UpdateHitObjects method.
            </summary>
        </member>
        <member name="T:Ab3d.Utilities.LinesUpdater">
            <summary>
            LinesUpdater class is a helper class that updates all the shown 3D Lines.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.LinesUpdater.Instance">
            <summary>
            Gets a static instance of LinesUpdater.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.LinesUpdater.RegisteredLinesCount">
            <summary>
            Gets count of RegisteredLines
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.LinesUpdater.UpdateMode">
            <summary>
            Gets or sets a LinesUpdated mode that defines how often the LinesUpdater automatically updates the lines.
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.LinesUpdater.IsEmissiveMaterialUsed">
            <summary>
            Gets or sets a bool that specifies if EmissiveMaterial is used to display the lines. The default value is true.
            </summary>
            <remarks>
            <para>
            If IsEmissiveMaterialUsed is true the lines are self illuminated regardless of the lights on the scene. In this case the following code is used to create a Material:
            </para>
            <code>
            lineMaterial = new MaterialGroup();
            lineMaterial.Children.Add(new DiffuseMaterial(Brushes.Black));
            lineMaterial.Children.Add(new EmissiveMaterial(new SolidColorBrush(lineColor)));
            </code>
            <para>
            If the lines should be illuminated only by the Light, the IsEmissiveMaterialUsed can be set to false.
            </para>
            <para>
            Another case when the IsEmissiveMaterialUsed can be set to false is to prevent some undesired color effects when two 3D lines overlap.
            </para>
            <para>
            This can occur because when EmissiveMaterial is used the final color of the overlapping 3D points are calculated with adding the colors of the individual 3D points.
            For example if two orange 3D lines overlap, the overlapping colors will be yellow.
            </para>
            <para>
            The problem is probably caused by the GPU. Strange thing is that this problem only occur on some of the colors, but not on others (for example Red and White do not have such problems).
            </para>
            <para>
            The best way to prevent this problem is to define the 3D lines so, that they are not overlapping. Another solution is to try to find another color that do not have the problems. 
            </para>
            <para>
            If the problem cannot be prevented, set the IsEmissiveMaterialUsed to false. In this case the lines will not be self illuminated any more, so you need to provide lights that will illuminate the lines.
            </para>
            <note>
            When the IsEmissiveMaterialUsed is changed, the already drawn lines will not be updated. So you need to set IsEmissiveMaterialUsed before creating the lines.
            </note>
            </remarks>
        </member>
        <member name="P:Ab3d.Utilities.LinesUpdater.MaxLineArrowLength">
            <summary>
            Gets or sets a double value that specifies the maximum arrow length set as fraction of the line length - e.g. 0.2 means that the maximum arrow length will be 1 / 5 (=0.2) of the line length.
            If the line is short so that the arrow length exceeds the amount defined by MaxLineArrowLength, the arrow is shortened (the arrow angle is increased).
            </summary>
        </member>
        <member name="P:Ab3d.Utilities.LinesUpdater.LineArrowAngle">
            <summary>
            Gets or sets the angle of the line arrows. Default value is 15 degrees.
            Note that if the line is short so that the arrow length exceeds the amount defined by MaxLineArrowLength, the arrow is shortened which increased the arrow angle.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.Refresh(System.Boolean)">
            <summary>
            Manually updates all the registered lines
            </summary>
            <param name="forceRegenerateAll">when set to true, all line geometries will be regenerated</param>
            <returns>number of regenerated lines</returns>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.Reset">
            <summary>
            Manually clears all the registered lines.
            </summary>
            <remarks>
            <para>
            <b>Reset</b> method manually clears all the registered lines.
            </para>
            <para>
            All the lines that are created with Ab3d.PowerToys library are registered with LinesUpdater.
            LinesUpdater checks the camera and when it is changed it updates the lines accordingly.
            The LinesUpdater also checks if the lines, parent Visuals or Viewport3D are removed from the visual tree. In this case it unregisters the line.
            But it is also possible to unregister the lines manually with <b>Reset</b> or <see cref="M:Ab3d.Utilities.LinesUpdater.UnregisterLine(System.Windows.Media.Media3D.Model3D)"/> method.
            </para>
            <para>
            Note that the Reset method removed all the lines from all the Viewport3D controls. 
            For example if one Viewport3D is showing a wireframe and a CameraAxisPanel is also shown, the Reset method will remove all the wireframe lines and also the lines from the CameraAxisPanel.
            When a line is removed from the LinesUpdater, it will stop being updated when the camera is changed.
            </para>
            <para>
            Therefore the Reset method must be used with caution. It is recommended to use the <see cref="M:Ab3d.Utilities.LinesUpdater.UnregisterLine(System.Windows.Media.Media3D.Model3D)"/> method instead because it gives you more predicted results.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.Reset(System.Windows.Controls.Viewport3D)">
            <summary>
            Manually clears all the registered lines that are shown in parentViewport.
            </summary>
            <param name="parentViewport">Viewport3D that contains lines that should be unregistered.</param>
            <remarks>
            <para>
            Manually clears all the registered lines that are shown in parentViewport.
            </para>
            <para>
            The method <see cref="M:Ab3d.Utilities.LinesUpdater.Reset"/> without parameters removes all the registered lines regardless of the Viewport3D. 
            </para>
            <para>
            This is not always desired. For example if the application is using CameraAxisPanel and calls Reset() method without parameters, the LinesUpdater will stop updating the lines that show the axes in CameraAxisPanel.
            This can be prevented with calling Reset method and passing Viewport3D as a parameter.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.UnregisterLine(System.Windows.Media.Media3D.Model3D)">
            <summary>
            UnregisterLine method can be called to manually remove the line model from being updated with LinesUpdater.
            </summary>
            <remarks>
            <para>
            <b>UnregisterLine</b> method can be called to manually remove the line model from being updated with LinesUpdater.
            </para>
            <para>
            All the lines that are created with Ab3d.PowerToys library are registered with LinesUpdater.
            LinesUpdater checks the camera and when it is changed it updates the lines accordingly.
            The LinesUpdater also checks if the lines, parent Visuals or Viewport3D are removed from the visual tree. In this case it unregisters the line.
            But it is also possible to unregister the lines manually with <b>Reset</b> or <b>UnregisterLine</b> methods.
            </para>
            </remarks>
            <param name="lineModel">lineModel as Model3D</param>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.UnregisterLine(Ab3d.Visuals.BaseLineVisual3D)">
            <summary>
            UnregisterLine method can be called to manually remove the line Visual3D from being updated with LinesUpdater.
            </summary>
            <remarks>
            <para>
            <b>UnregisterLine</b> method can be called to manually remove the line Visual3D from being updated with LinesUpdater.
            </para>
            <para>
            All the lines that are created with Ab3d.PowerToys library are registered with LinesUpdater.
            LinesUpdater checks the camera and when it is changed it updates the lines accordingly.
            The LinesUpdater also checks if the lines, parent Visuals or Viewport3D are removed from the visual tree. In this case it unregisters the line.
            But it is also possible to unregister the lines manually with <b>Reset</b> or <b>UnregisterLine</b> methods.
            </para>
            </remarks>
            <param name="lineVisual3D">lineModel as any Visual3D derived from BaseLineVisual3D</param>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.RegisterViewport3D(System.Windows.Controls.Viewport3D)">
            <summary>
            RegisterViewport3D registers the specified viewport3D to prevent its automatic unloading with LinesUpdater.
            Instead the viewport3D must be manually unloaded with <see cref="M:Ab3d.Utilities.LinesUpdater.UnregisterViewport3D(System.Windows.Controls.Viewport3D)"/> method.
            </summary>
            <remarks>
            <para>
            When a 3D lines is added to Viewport3D, the LinesUpdates starts checking the Viewport3D and its camera for any changes.
            LinesUpdates also checkes if Viewport3D is still connected to the parent controls (IsLoaded). 
            When the Viewport3D gets unloaded, this means that LinesUpdates can dispose all the lines shown on that Viewport3D and released other references (events) and objects.
            When Viewport3D is dynamically added and removed from parent controls, this can mean that the lines will not be updates any more because LinesUpdater will stop refreshing the lines.
            LinesUpdates can prevent that in some cases (for example in TabControl or when Viewport3D is moved from one panel to another. 
            But is some cases LinesUpdates can stop updating the lines because it thinks that Viewport3D is not alive any more.
            </para>
            <para>
            To prevent that it is possible to manually register and unregister the Viewport3D.
            Registering can be done with this method. Unregistering can be done with <see cref="M:Ab3d.Utilities.LinesUpdater.UnregisterViewport3D(System.Windows.Controls.Viewport3D)"/> method.
            </para>
            </remarks>
            <param name="viewport3D">Viewport3D that will be registered</param>
        </member>
        <member name="M:Ab3d.Utilities.LinesUpdater.UnregisterViewport3D(System.Windows.Controls.Viewport3D)">
            <summary>
            UnregisterViewport3D unregisters the viewport3D that has been registered with <see cref="M:Ab3d.Utilities.LinesUpdater.RegisterViewport3D(System.Windows.Controls.Viewport3D)"/> method.
            </summary>
            <param name="viewport3D">Viewport3D</param>
        </member>
        <member name="T:Ab3d.Utilities.MeshUtils">
            <summary>
            MeshUtils class contains static methods that work on MeshGeometry3D.
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.MeshUtils.CalculateNormals(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Calculates normals for the meshGeometry. The normals are normalized.
            </summary>
            <param name="meshGeometry">MeshGeometry3D that is used to calculate normals</param>
            <returns>normals as Vector3DCollection</returns>
        </member>
        <member name="M:Ab3d.Utilities.MeshUtils.CalculateNormals(System.Windows.Media.Media3D.MeshGeometry3D,System.Boolean)">
            <summary>
            Calculates normals for the meshGeometry.
            </summary>
            <param name="meshGeometry">MeshGeometry3D that is used to calculate normals</param>
            <param name="normalize">if true the calculated normals are normalized</param>        
            <returns>normals as Vector3DCollection</returns>
        </member>
        <member name="M:Ab3d.Utilities.MeshUtils.CombineMeshes(System.Windows.Media.Media3D.MeshGeometry3D[])">
            <summary>
            CombineMeshes return a MeshGeometry3D that is created with combining all Positions, Normals, TextureCoordinates and TriangleIndices for all the meshes that are set to the meshes parameter.
            </summary>
            <param name="meshes">MeshGeometry3D objects</param>
            <returns>combined MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.MeshUtils.CombineMeshes(System.Collections.Generic.IList{System.Windows.Media.Media3D.MeshGeometry3D})">
            <summary>
            CombineMeshes return a MeshGeometry3D that is created with combining all Positions, Normals, TextureCoordinates and TriangleIndices for all the meshes that are set to the meshes parameter.
            </summary>
            <param name="meshes">list of MeshGeometry3D objects</param>
            <returns>combined MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.MeshUtils.GenerateCylindricalTextureCoordinates(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Returns a TextureCoordinates for the specified mesh. 
            TextureCoordinates are calculated with using the Cylindrical projection.
            TextureCoordinates for position that are parallel to the cylinderDirectionVector use simple planar projection. 
            TextureCoordinates for other positions are calculated based on the angle from the cylinder center axis to the position.
            The GenerateCylindricalTextureCoordinates does not set the TextureCoordinates on the mesh.
            </summary>
            <param name="mesh">MeshGeometry3D</param>
            <param name="cylinderDirectionVector">Vector3D that specifies the direction of the cylinder (its height direction)</param>
            <param name="cylinderPlaneHeightVector">Vector3D that specifies the direction of the height direction in the up and bottom cylinder plane</param>
            <returns>PointCollection with calculated TextureCoordinates</returns>
        </member>
        <member name="M:Ab3d.Utilities.MeshUtils.GenerateCylindricalTextureCoordinates(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Rect,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Boolean)">
            <summary>
            Returns a TextureCoordinates for the specified mesh. 
            TextureCoordinates are calculated with using the Cylindrical projection.
            TextureCoordinates for position that are parallel to the cylinderDirectionVector use simple planar projection. 
            TextureCoordinates for other positions are calculated based on the angle from the cylinder center axis to the position.
            The GenerateCylindricalTextureCoordinates does not set the TextureCoordinates on the mesh.
            </summary>
            <param name="mesh">MeshGeometry3D</param>
            <param name="planeBounds">Rect that defines the bounds for the cylinder up and bottom plane</param>
            <param name="cylinderDirectionVector">Vector3D that specifies the direction of the cylinder (its height direction)</param>
            <param name="cylinderPlaneHeightVector">Vector3D that specifies the direction of the height direction in the up and bottom cylinder plane</param>
            <param name="invertBottomYCoordinate">when true (by default) the bottom Y texture coordinates are inverted to make the text on the bottom texture correctly oriented; false to make the bottom texture coordinates the same as on the top</param>
            <returns>PointCollection with calculated TextureCoordinates</returns>
        </member>
        <member name="M:Ab3d.Utilities.MeshUtils.Project3DPointsTo2DPlane(System.Collections.Generic.IList{System.Windows.Media.Media3D.Point3D},System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Rect@)">
            <summary>
            Projects a list of 3D position into a 2D plane with specified planeNormalVector and planeHeightVector.
            </summary>
            <param name="positions">list of 3D position</param>
            <param name="planeNormalVector">Vector3D that defines the plane normal - vector perpendicular to the plane</param>
            <param name="planeHeightVector">Vector3D that defines the direction of the 2D height vector on the plane</param>
            <param name="bounds">out: Rect with bounds of the 2D plane coordinates</param>
            <returns>List of 2D points</returns>
        </member>
        <member name="M:Ab3d.Utilities.Model3DTreeHelper.FindFirst``1(System.Windows.Controls.Viewport3D,``0)">
            <summary>
            Searches the 3D tree and tries to find objectToFind.
            If objectToFind is null, return the first object of type T
            </summary>
            <typeparam name="T">Returned type. If objectToFind is null, the first object of type T is returned.</typeparam>
            <param name="parentViewport3D">parentViewport3D</param>
            <param name="objectToFind">objectToFind</param>
            <returns>Object to find or first object of type T if objectToFind is null</returns>
        </member>
        <member name="M:Ab3d.Utilities.Model3DTreeHelper.FindFirst``1(System.Windows.Controls.Viewport3D,System.Func{System.Windows.DependencyObject,System.Boolean})">
            <summary>
            Searches the 3D tree and tries to find the object of type T that returns true from the filterFunct
            </summary>
            <typeparam name="T">found object</typeparam>
            <param name="parentViewport3D">parentViewport3D</param>
            <param name="filterFunc">Func that returns true if the correct object is found</param>
            <returns>Object to find</returns>
        </member>
        <member name="T:Ab3d.Utilities.ShadingHelper">
            <summary>
            Class library that contains static methods for converting models into flat or smooth shaded models    
            </summary>
        </member>
        <member name="M:Ab3d.Utilities.ShadingHelper.FlatendModel3D(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Convert Model3D into flat shaded model
            </summary>
            <param name="modelToConvert">modelToConvert</param>
        </member>
        <member name="M:Ab3d.Utilities.ShadingHelper.SmoothenModel3D(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Convert Model3D into smooth shaded model
            </summary>
            <param name="modelToConvert">modelToConvert</param>
        </member>
        <member name="M:Ab3d.Utilities.ShadingHelper.GetFlatShadedMesh(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Creates a new MeshGeometry3D that is created from originalGeometry and looks flat shaded.
            </summary>
            <param name="originalGeometry">originalGeometry</param>
            <returns>Flat shaded MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Utilities.ShadingHelper.GetSmoothShadedMesh(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Creates a new MeshGeometry3D that is created from originalGeometry and looks smooth shaded.
            </summary>
            <remarks>
            <para>
            Mesh smoothing is done with optimizing the Positions Point3DCollection - all the same Positions are removed from the collection.
            </para>
            <para>
            WARNING:<br/>
            Because Positions collection is optimized, this also reduces the size of TextureCoordinates collection. When using texture image for the material, smoothing can lead to wrongly mapped textures!
            </para>
            </remarks>
            <param name="originalGeometry">originalGeometry</param>
            <returns>Smooth shaded MeshGeometry3D</returns>
        </member>
        <member name="T:Ab3d.Visuals.ArrowVisual3D">
            <summary>
            ArrowVisual3D class is used to create Visual3D that represents a 3D arrow.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ArrowVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ArrowVisual3D.StartPosition">
            <summary>
            Gets or sets line's start position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ArrowVisual3D.StartPositionProperty">
            <summary>
            StartPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ArrowVisual3D.EndPosition">
            <summary>
            Gets or sets the line's end position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ArrowVisual3D.EndPositionProperty">
            <summary>
            EndPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ArrowVisual3D.Radius">
            <summary>
            Gets or sets the radius of the cone that defines the 3D line (without arrow).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ArrowVisual3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ArrowVisual3D.ArrowRadius">
            <summary>
            Gets or sets the radius of the arrow - half of the arrow width. If not set than arrow radius is calculated as two time the value of Radius property.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ArrowVisual3D.ArrowRadiusProperty">
            <summary>
            ArrowRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ArrowVisual3D.ArrowAngle">
            <summary>
            Gets or sets the angle of the arrow in degrees. Default value is 60.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ArrowVisual3D.ArrowAngleProperty">
            <summary>
            ArrowAngleProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ArrowVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that define the circles used to create arrow sections. Default value is 30.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ArrowVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ArrowVisual3D.GenerateTextureCoordinates">
            <summary>
            Gets or sets a Boolean that specified if texture coordinates are generated (created mesh is more complicated in this case). Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ArrowVisual3D.GenerateTextureCoordinatesProperty">
            <summary>
            GenerateTextureCoordinatesProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ArrowVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.BaseVisual3D">
            <summary>
            BaseVisual3D is a base class for all Visual3D classes in Ab3d.PowerToys. It adds IsVisible property and support for ISupportInitialize interface.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseVisual3D.savedHiddenContent">
            <summary>
            savedHiddenContent stored the content of this model when it is hidden by setting IsVisible to false.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseVisual3D.IsVisibleProperty">
            <summary>
            IsVisibleProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseVisual3D.IsVisible">
            <summary>
            Gets or sets a Boolean that specify if the object is visible.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.OnIsVisiblePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnIsVisiblePropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when the IsVisible property is changed
            </summary>
            <param name="newIsVisibleValue">newIsVisibleValue as bool</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.OnPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnPropertyChanged method calls UpdateContentIfNotInitializing that recreates the model is visible (IsVisible is true) and if not initializing (between BeginInit and EndInit).
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.UpdateContentIfNotInitializing">
            <summary>
            Recreates the models if the Visual3D is visible (IsVisible is true) and it is not initializing (between BeginInit and EndInit)
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
            <returns>Model3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            OnVisualParentChanged
            </summary>
            <param name="oldParent">oldParent</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.ValidateDoublePropertyValue(System.Object)">
            <summary>
            Returns true if value is valid double
            </summary>
            <param name="value">value</param>
            <returns>true if value is valid double</returns>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.ValidatePositiveDoublePropertyValue(System.Object)">
            <summary>
            Returns true if value is valid double and is positive
            </summary>
            <param name="value">value</param>
            <returns>true if value is valid double and is positive</returns>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.ValidatePositiveIntPropertyValue(System.Object)">
            <summary>
            Returns true if value is positive integer
            </summary>
            <param name="value">value</param>
            <returns>true if value is positive integer</returns>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.ValidateSize3DPropertyValue(System.Object)">
            <summary>
            Returns true if the value is a valid Size3D object
            </summary>
            <param name="value">value</param>
            <returns>true if the value is a valid Size3D object</returns>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.ValidateSize3DOneZeroAllowedPropertyValue(System.Object)">
            <summary>
            Returns true if the value is a valid Size3D object used for Box3D (one size component is allowed to be zero)
            </summary>
            <param name="value">value</param>
            <returns>true if the value is a valid Size3D object</returns>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.ValidateSizePropertyValue(System.Object)">
            <summary>
            Returns true if the value is a valid Size object
            </summary>
            <param name="value">value</param>
            <returns>true if the value is a valid Size object</returns>
        </member>
        <member name="F:Ab3d.Visuals.BaseVisual3D.isInitializing">
            <summary>
            if true the Visual3D is initializing (between BeginInit and EndInit)
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.BeginInit">
            <summary>
            Signals the line 3D that initialization is starting.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseVisual3D.EndInit">
            <summary>
            Signals the line 3D that initialization is complete.
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.BoxVisual3D">
            <summary>
            BoxVisual3D class is used to create Visual3D that represents a 3D Box.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BoxVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BoxVisual3D.CenterPosition">
            <summary>
            Gets or sets the box center position
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BoxVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BoxVisual3D.OnCenterPositionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnCenterPositionPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Visuals.BoxVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BoxVisual3D.Size">
            <summary>
            Gets or sets the size of the box
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BoxVisual3D.OnSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnSizePropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Visuals.BoxVisual3D.XCellsCountProperty">
            <summary>
            XCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BoxVisual3D.XCellsCount">
            <summary>
            Gets or sets the number of cells in X direction
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BoxVisual3D.YCellsCountProperty">
            <summary>
            YCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BoxVisual3D.YCellsCount">
            <summary>
            Gets or sets the number of cells in Y direction
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BoxVisual3D.ZCellsCountProperty">
            <summary>
            ZCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BoxVisual3D.ZCellsCount">
            <summary>
            Gets or sets the number of cells in Z direction
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BoxVisual3D.UseCachedMeshGeometry3DProperty">
            <summary>
            UseCachedMeshGeometry3DProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BoxVisual3D.UseCachedMeshGeometry3D">
            <summary>
            Gets or sets a boolean that specifies if cached MeshGeometry3D is used to create the Model3D.
            In that case the position and size of the Model3D is specified with with using transformations on the cached mesh.
            This mode can be used only where XCellsCount = YCellsCount = ZCellsCount = 1. If false then a new MeshGeometry3D is created for every BoxVisual3D.
            </summary>
            <remarks>
            <para>
            <b>UseCachedMeshGeometry3D</b> gets or sets a boolean that specifies if cached MeshGeometry3D is used to create the Model3D.
            </para>
            <para>
            When using cached MeshGeometry3D, the position and size of the Model3D is specified with with using transformations on the cached mesh.
            This can greatly improve performance when using many 3D objects, because the geometry data is shaderd between the objects.
            </para>
            <para>
            If UseCachedMeshGeometry3D is false, than a new MeshGeometry3D is created for each instance of BoxVisual3D and each time the position or size is changed.
            </para>
            <para>
            Default value is true.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Visuals.BoxVisual3D.OnUseCachedMeshGeometry3DChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnUseCachedMeshGeometry3DChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.BoxVisual3D.FreezeMeshGeometry3D">
            <summary>
            Gets or sets a Boolean that specifes if the Box's MeshGeometry3D is frozen.
            This can greatly improve performance when many BoxVisual3D objects are generated.
            It is recommended that this property is set before other properties.
            The default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BoxVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.CircleVisual3D">
            <summary>
            CircleVisual3D class is used to create Visual3D that represents a 3D Circle.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.CircleVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CircleVisual3D.CenterPosition">
            <summary>
            Gets or sets the circle center position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CircleVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CircleVisual3D.NormalProperty">
            <summary>
            NormalProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CircleVisual3D.Normal">
            <summary>
            Gets or sets the circle normal as Vector3D 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CircleVisual3D.UpDirectionProperty">
            <summary>
            UpDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CircleVisual3D.UpDirection">
            <summary>
            Gets or sets the Vector3D that is pointing from center position to the circle's top position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CircleVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CircleVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to define the circle
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CircleVisual3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CircleVisual3D.Radius">
            <summary>
            Gets or sets the radius of the circle 
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.CircleVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.ConeTubeVisual3D">
            <summary>
            ConeTubeVisual3D class is used to create Visual3D that represents a 3D Tube with different top and bottom radius.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ConeTubeVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.BottomCenterPosition">
            <summary>
            Gets or sets the position of the bottom center of the Cone
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.HeightDirection">
            <summary>
            Gets or sets a Vector3D that specifies the height direction. Default value is up vector (0, 1, 0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.HeightDirectionProperty">
            <summary>
            HeightDirectionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to create the circular area of the Cone. Default value is 20.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.TopInnerRadiusProperty">
            <summary>
            TopInnerRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.TopInnerRadius">
            <summary>
            Gets or sets the radius of the top circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.BottomInnerRadiusProperty">
            <summary>
            BottomRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.BottomInnerRadius">
            <summary>
            Gets or sets the radius of the bottom circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.TopOuterRadiusProperty">
            <summary>
            TopOuterRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.TopOuterRadius">
            <summary>
            Gets or sets the radius of the top circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.BottomOuterRadiusProperty">
            <summary>
            BottomRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.BottomOuterRadius">
            <summary>
            Gets or sets the radius of the bottom circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeTubeVisual3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeTubeVisual3D.Height">
            <summary>
            Gets or sets the height of Cone.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ConeTubeVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.ConeVisual3D">
            <summary>
            ConeVisual3D class is used to create Visual3D that represents a 3D Cone.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ConeVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeVisual3D.BottomCenterPosition">
            <summary>
            Gets or sets the position of the bottom center of the Cone
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeVisual3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to create the circular area of the Cone. Default value is 20.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeVisual3D.TopRadiusProperty">
            <summary>
            TopRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeVisual3D.TopRadius">
            <summary>
            Gets or sets the radius of the top circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeVisual3D.BottomRadiusProperty">
            <summary>
            BottomRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeVisual3D.BottomRadius">
            <summary>
            Gets or sets the radius of the bottom circle of the Cone.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeVisual3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeVisual3D.Height">
            <summary>
            Gets or sets the height of Cone.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ConeVisual3D.IsSmoothProperty">
            <summary>
            IsSmoothProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ConeVisual3D.IsSmooth">
            <summary>
            Gets or sets the Boolean that specifies if the Cone is smoothly shaded. If false the Cone has sharp edges between segments.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ConeVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.BaseLineVisual3D">
            <summary>
            BaseLineVisual3D is a base abstract for all 3D line Visual3D classes
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseLineVisual3D.DXLineInfoProperty">
            <summary>
            DXLineInfoProperty is used to annotate GeometryModel3D objects that are used to show 3D lines with 3D line data that can be used by DXEngine to create the 3D line in geometry shader
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseLineVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseLineVisual3D.LineThicknessProperty">
            <summary>
            LineThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseLineVisual3D.LineThickness">
            <summary>
            Gets or sets the thickness of the line in screen coordinates.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseLineVisual3D.ValidateLineThicknessPropertyValue(System.Object)">
            <summary>
            Returns true if line thickness is valid double and bigger or equal to 0
            </summary>
            <param name="value">value</param>
            <returns>true if line thickness is valid double and bigger or equal to 0</returns>
        </member>
        <member name="F:Ab3d.Visuals.BaseLineVisual3D.LineColorProperty">
            <summary>
            LineColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseLineVisual3D.LineColor">
            <summary>
            Gets or sets the color of the line
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseLineVisual3D.OnColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnColorPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseLineVisual3D.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when the IsVisible property is changed
            </summary>
            <param name="newIsVisibleValue">newIsVisibleValue as bool</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseLineVisual3D.CreateLineMaterial(System.Windows.Media.Color)">
            <summary>
            Creates line Material from line color
            </summary>
            <param name="lineColor">lineColor</param>
            <returns>line Material</returns>
        </member>
        <member name="T:Ab3d.Visuals.BaseLineCapVisual3D">
            <summary>
            BaseLineCapVisual3D is a base abstract for all 3D line Visual3D classes that support StartLineCap and EndLineCap
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseLineCapVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseLineCapVisual3D.StartLineCap">
            <summary>
            Gets or sets one of the <see cref="T:Ab3d.Common.Models.LineCap"/> that is used for start position of the line
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseLineCapVisual3D.StartLineCapProperty">
            <summary>
            StartLineCapProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseLineCapVisual3D.EndLineCap">
            <summary>
            Gets or sets one of the <see cref="T:Ab3d.Common.Models.LineCap"/> that is used for end position of the line
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseLineCapVisual3D.EndLineCapCapProperty">
            <summary>
            EndLineCapCapProperty
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.BaseMultiLineVisual3D">
            <summary>
            BaseMultiLineVisual3D is a base abstract for all line 3D Visual3D classes that have Positions properties
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseMultiLineVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseMultiLineVisual3D.Positions">
            <summary>
            Gets or sets a Point3DCollection that define the 3D lines
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseMultiLineVisual3D.PositionsProperty">
            <summary>
            PositionsProperty
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.AxisVisual3D">
            <summary>
            AxisVisual3D class is used to create Visual3D that represents a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.AxisVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.AxisVisual3D.LengthProperty">
            <summary>
            LengthProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.AxisVisual3D.Length">
            <summary>
            Gets or sets the length of the axis lines. Default length is 100.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.AxisVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
            <returns>Model3D</returns>
        </member>
        <member name="T:Ab3d.Visuals.ColoredAxisVisual3D">
            <summary>
            AxisVisual3D class is used to create Visual3D that represents a simple 3D axis that is created from 3 lines - one for x axis, one for y axis and one for z axis.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ColoredAxisVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ColoredAxisVisual3D.LengthProperty">
            <summary>
            LengthProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ColoredAxisVisual3D.Length">
            <summary>
            Gets or sets the length of the axis lines. Default length is 100.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ColoredAxisVisual3D.LineThicknessProperty">
            <summary>
            LineThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ColoredAxisVisual3D.LineThickness">
            <summary>
            Gets or sets the  
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ColoredAxisVisual3D.XAxisColorProperty">
            <summary>
            XAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ColoredAxisVisual3D.XAxisColor">
            <summary>
            Gets or sets the color of X axis  
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ColoredAxisVisual3D.YAxisColorProperty">
            <summary>
            YAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ColoredAxisVisual3D.YAxisColor">
            <summary>
            Gets or sets the color of Y axis   
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ColoredAxisVisual3D.ZAxisColorProperty">
            <summary>
            ZAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ColoredAxisVisual3D.ZAxisColor">
            <summary>
            Gets or sets the color of Z axis
            
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ColoredAxisVisual3D.CreateLineMaterial(System.Windows.Media.Color)">
            <summary>
            Creates line Material from line color
            </summary>
            <param name="lineColor">lineColor</param>
            <returns>line Material</returns>
        </member>
        <member name="M:Ab3d.Visuals.ColoredAxisVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.CenteredTextVisual3D">
            <summary>
            CenteredTextVisual3D class is used to create Visual3D that represents a 3D texts created by a series of 3D lines.
            The text is centered at CenterPosition.
            </summary>
            <remarks>
            <para>
            <b>CenteredTextVisual3D</b> class is used to create Visual3D that represents a 3D texts created by a series of 3D lines. The text is centered at CenterPosition.
            </para>
            <para>
            The 3D text is positioned by its <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.CenterPosition"/> property. It specifies the center position of the text.
            </para>
            <para>
            The direction of the text is defined by <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.TextDirection"/> and <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.UpDirection"/> properties. 
            <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.TextDirection"/> is a Vector3D that defines the direction in which the text is drawn (default value is (1,0,0) - a vector that is pointing in the x axis direction).
            The <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.UpDirection"/> defines the text's up direction (default value is (0,1,0) - a vector that is pointing up).
            </para>
            <para>
            The displayed text is defined by the <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.Text"/> property.
            It is possible to display also special characters - most of the characters from ASCII 32 (space) to ASCII 254 can be displayed.
            The <b>new line</b> '\n' and <b>tab</b> '\t' characters are also supported. Tab is displayed as 4 spaces.
            </para>
            <para>
            Text appearance is controlled by <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.FontSize"/>, <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.TextColor"/> and <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.LineThickness"/> properties.
            <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.FontSize"/> defines the height of the characters (in the <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.UpDirection"/>). 
            <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.TextColor"/> is used to define the color of the text.
            <see cref="P:Ab3d.Visuals.CenteredTextVisual3D.LineThickness"/> specifies the thickness of the used 3D lines. The default value is 1.
            </para>
            </remarks>
            <example>
            <para>
            The following code shows how to display the 3D text.
            </para>
            <para>
            The following namespace declaration needs to be added to the root element:
            <c>xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"</c>
            </para>
            <code lang="xaml">
            &lt;Viewport3D Name="MainViewport"&gt;
                &lt;visuals:CenteredTextVisual3D x:Name="TextVisual1" Position="0 0 0" 
                                      LineThickness="2" FontSize="30" TextColor="Yellow"
                                      Text="This is a sample 3D text"/&gt;
            &lt;/Viewport3D&gt;
            </code>
            </example>
        </member>
        <member name="M:Ab3d.Visuals.CenteredTextVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CenteredTextVisual3D.CenterPosition">
            <summary>
            Gets or sets the center position of the text.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CenteredTextVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CenteredTextVisual3D.TextDirectionProperty">
            <summary>
            TextDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CenteredTextVisual3D.TextDirection">
            <summary>
            Gets or sets the Vector3D that is pointing in the direction in which the text is drawn. Default value is (1,0,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CenteredTextVisual3D.UpDirectionProperty">
            <summary>
            UpDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CenteredTextVisual3D.UpDirection">
            <summary>
            Gets or sets the Vector3D that is pointing in the text's up direction.  Default value is (0,1,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CenteredTextVisual3D.TextProperty">
            <summary>
            TextProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CenteredTextVisual3D.Text">
            <summary>
            Gets or sets the text that is displayed with 3D lines.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CenteredTextVisual3D.FontSizeProperty">
            <summary>
            FontSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CenteredTextVisual3D.FontSize">
            <summary>
            Gets or sets a double that represents a size of the used font.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CenteredTextVisual3D.LineThicknessProperty">
            <summary>
            LineThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CenteredTextVisual3D.LineThickness">
            <summary>
            Gets or sets the thickness of the line in screen coordinates.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CenteredTextVisual3D.TextColorProperty">
            <summary>
            TextColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CenteredTextVisual3D.TextColor">
            <summary>
            Gets or sets the color of the text
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.CenteredTextVisual3D.OnColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnColorPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Visuals.CenteredTextVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.HeightMapVisual3D">
            <summary>
            HeightMapVisual3D class is used to create Visual3D that represents a 3D height map.
            </summary>
            <remarks>
            <para>
            <b>HeightMapVisual3D</b> class is used to create Visual3D that represents a 3D height map.
            </para>
            <para>
            The height map is similar to 3D Plane. The difference is that each position in a height map can have its height defined - the distance from the plane.
            The position heights are defined with the <see cref="P:Ab3d.Visuals.HeightMapVisual3D.HeightData"/> property.
            The height data are defined as two dimensional array of double values.
            The dimensions of the array also define the number of position used for the height map - one position of one array element.
            </para>
            <para>
            The position and the size of the height map can be set with <see cref="P:Ab3d.Visuals.HeightMapVisual3D.CenterPosition"/> and <see cref="P:Ab3d.Visuals.HeightMapVisual3D.Size"/> properties.
            </para>
            <para>
            The color or texture used to display the height map can be set with <see cref="P:Ab3d.Visuals.BaseModelVisual3D.Material"/> and <see cref="P:Ab3d.Visuals.BaseModelVisual3D.BackMaterial"/> properties.
            When BackMaterial property is not set the height map will not be visible from below.
            </para>
            <para>
            The <see cref="M:Ab3d.Visuals.HeightMapVisual3D.CreateHeightTextureFromGradient(System.Windows.Media.LinearGradientBrush)"/> method can automatically create a texture for the height data from the specified LinearGradientBrush.
            </para>
            <para>
            By default the height map is shown as solid surface. 
            It is also possible to show wireframe for the height map. Wireframe is controlled by <see cref="P:Ab3d.Visuals.HeightMapVisual3D.IsWireframeShown"/>, <see cref="P:Ab3d.Visuals.HeightMapVisual3D.WireframeThickness"/> and <see cref="P:Ab3d.Visuals.HeightMapVisual3D.WireframeColor"/> properties.
            If only wireframe should be shown, than it is possible to set the <see cref="P:Ab3d.Visuals.HeightMapVisual3D.IsSolidSurfaceShown"/> properties to false.
            </para>
            <para>
            NOTE:<br/>
            Showing wireframe for bigger height maps (for example more than 100 x 100) can be very slow. 
            The reason for that is that WPF 3D does not support hardware accelerated 3D lines.
            Therefore showing wireframe should be used only when using smaller array dimensions.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Visuals.HeightMapVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.CenterPosition">
            <summary>
            Gets or sets the plane center position
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HeightMapVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HeightMapVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.Size">
            <summary>
            Gets or sets the size of the HeightMap. Note that the Size.Y defines the scale that is used to multiply each height data value with.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HeightMapVisual3D.HeightDataProperty">
            <summary>
            HeightDataProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.HeightData">
            <summary>
            Gets or sets a two dimensional array of double that defines the height of each point in heigth map.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HeightMapVisual3D.IsWireframeShownProperty">
            <summary>
            IsWireframeShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.IsWireframeShown">
            <summary>
            Gets or set a boolean that specifies if the HeightMapVisual3D shows wireframe for the height map. Default value is false.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HeightMapVisual3D.WireframeThicknessProperty">
            <summary>
            WireframeThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.WireframeThickness">
            <summary>
            Gets or sets the thickness of the wireframe lines.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.HeightMapVisual3D.ValidateWireframeThicknessPropertyValue(System.Object)">
            <summary>
            Returns true if line thickness is valid double and bigger or equal to 0
            </summary>
            <param name="value">value</param>
            <returns>true if line thickness is valid double and bigger or equal to 0</returns>
        </member>
        <member name="F:Ab3d.Visuals.HeightMapVisual3D.WireframeColorProperty">
            <summary>
            WireframeColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.WireframeColor">
            <summary>
            Gets or sets the color of the wireframe lines.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.HeightMapVisual3D.OnWireframeColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnColorPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Visuals.HeightMapVisual3D.IsSolidSurfaceShownProperty">
            <summary>
            IsSolidSurfaceShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.IsSolidSurfaceShown">
            <summary>
            Gets or set a boolean that specifies if the HeightMapVisual3D shows solid surface for the height map. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HeightMapVisual3D.WireframeDistance">
            <summary>
            Gets or sets a double that specifies the distance between wireframe and solid model. Default value is 0.001.
            </summary>
            <remarks>
            This value is used to prevent Z-fighing when the wireframe and solid model are drawn on the same points in space.
            With moving wireframe slightly above the solid model the wireframe is correctly shown.
            This value must be set before the wireframe is created.
            </remarks>
        </member>
        <member name="M:Ab3d.Visuals.HeightMapVisual3D.CreateHeightTextureFromGradient(System.Windows.Media.LinearGradientBrush)">
            <summary>
            This methods created a height texture from the height data and specified gradient and set it as the HeightMap Material property.
            </summary>
            <remarks>
            <para>
            This methods created a height texture from the height data and specified gradient and set it as the HeightMap Material property.
            </para>
            <para>
            It is also possible to create height texture manually with static methods on <see cref="T:Ab3d.Meshes.HeightMapMesh3D"/>.
            </para>
            </remarks>
            <param name="gradient">gradient as LinearGradientBrush</param>
        </member>
        <member name="M:Ab3d.Visuals.HeightMapVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.HeightMapVisual3D.RefreshMaterial">
            <summary>
            Resets the Content's material
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.HeightMapVisual3D.UpdateContent">
            <summary>
            UpdateContent updates the height map 3D mesh. The method can be called after the data in the HeightData array are changed.
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.LineWithTextVisual3D">
            <summary>
            LineWithTextVisual3D class is used to create Visual3D that represents a 3D Line that displays a 3D text above the line.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LineWithTextVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineWithTextVisual3D.StartPosition">
            <summary>
            Gets or sets line's start position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineWithTextVisual3D.StartPositionProperty">
            <summary>
            StartPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineWithTextVisual3D.EndPosition">
            <summary>
            Gets or sets the line's end position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineWithTextVisual3D.EndPositionProperty">
            <summary>
            EndPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineWithTextVisual3D.TextUpDirectionProperty">
            <summary>
            TextUpDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineWithTextVisual3D.TextUpDirection">
            <summary>
            Gets or sets the Vector3D that is pointing in the text's up direction.  Default value is (0,1,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineWithTextVisual3D.TextProperty">
            <summary>
            TextProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineWithTextVisual3D.Text">
            <summary>
            Gets or sets the text that is displayed above the line.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineWithTextVisual3D.FontSizeProperty">
            <summary>
            FontSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineWithTextVisual3D.FontSize">
            <summary>
            Gets or sets a double that represents a size of the used font.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LineWithTextVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.ModelDecoratorVisual3D">
            <summary>
            ModelDecoratorVisual3D is a Visual3D that can be used to show bounding box, normals and triangles for the specified TargetModel3D.
            </summary>
            <remarks>
            <para>
            <b>ModelDecoratorVisual3D</b> is a Visual3D that can be used to show bounding box, normals and triangles for the specified TargetModel3D.
            </para>
            <para>
            The <see cref="P:Ab3d.Visuals.ModelDecoratorVisual3D.TargetModel3D"/> property should be set to the Model3D that will be "decorated" with bounding box, triangles or normals.
            It is also recommended to set the <see cref="P:Ab3d.Visuals.ModelDecoratorVisual3D.RootModelVisual3D"/> that specifies a parent ModelVisual3D for TargetModel3D. 
            This way ModelDecoratorVisual3D can take into account any transformations that are used on parent Visual3D objects.
            </para>
            <example>
            <para>
            The following XAML shows how a ModelDecoratorVisual3D can be used (it should be defined inside Viewport3D):
            </para>
            <code>
            &lt;visuals1:ModelDecoratorVisual3D x:Name="SelectedModelDecorator" 
                                            ShowBoundingBox="False" BoundingBoxLineColor="Red" BoundingBoxLineThickness="2"
                                            ShowNormals="True" NormalsLineColor="Blue" NormalsLineThickness="1"
                                            ShowTriangles="True" TrianglesLineColor="Green" TrianglesLineThickness="1"
                                            TargetModel3D="{Binding ElementName=MyModel3D}" /&gt;
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.TargetModel3D">
            <summary>
            Gets or sets Model3D for witch bounding box, normals or triangles will be shown with this ModelDecoratorVisual3D.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.TargetModel3DProperty">
            <summary>
            TargetModel3DProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelDecoratorVisual3D.OnTargetModel3DPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnTargetModel3DPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.RootModelVisual3D">
            <summary>
            Gets or sets a ModelVisual3D that is a parent ModelVisual3D for TargetModel3D.
            </summary>
            <remarks>
            <para>
            RootModelVisual3D gets or sets a ModelVisual3D that is a parent ModelVisual3D for TargetModel3D.
            </para>
            <para>
            RootModelVisual3D must be set when the parent Visual3D object or its parents use transformations.
            Without setting RootModelVisual3D, the ModelDecoratorVisual3D will not be aware or the transformation and will show the 3D lines at wrong position and with wrong size.
            </para>
            <para>
            When no transformations are used on Visual3D objects, the RootModelVisual3D can remain null.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.RootModelVisual3DProperty">
            <summary>
            RootModelVisual3DProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.ShowBoundingBox">
            <summary>
            Gets or sets a boolean that specifies if a wire box that encloses the TargetModel3D is shown. 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.ShowBoundingBoxProperty">
            <summary>
            ShowBoundingBoxProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelDecoratorVisual3D.OnBoundingBoxPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnTargetModel3DPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.BoundingBoxLineThickness">
            <summary>
            Gets or sets the thickness of the lines that show the bounding box. Default values is 2.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.BoundingBoxLineThicknessProperty">
            <summary>
            BoundingBoxLineThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.BoundingBoxLineColor">
            <summary>
            Gets or sets the color of the lines that show the bounding box. Default values is Red.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.BoundingBoxLineColorsProperty">
            <summary>
            BoundingBoxLineColorsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.ShowTriangles">
            <summary>
            Gets or sets a boolean that specifies if triangles of the TargetModel3D are shown. 
            The TargetModel3D must be GeometryModel3D and not Model3DGroup.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.ShowTrianglesProperty">
            <summary>
            ShowTrianglesProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelDecoratorVisual3D.OnTrianglesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnTrianglesPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.TrianglesLineThickness">
            <summary>
            Gets or sets the thickness of the lines that show the triangles. Default values is 1.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.TrianglesLineThicknessProperty">
            <summary>
            TrianglesLineThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.TrianglesLineColor">
            <summary>
            Gets or sets the color of the lines that show the triangles. Default values is Blue.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.TrianglesLineColorProperty">
            <summary>
            TrianglesLineColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.ShowNormals">
            <summary>
            Gets or sets a boolean that specifies if normals of the TargetModel3D are shown. 
            The TargetModel3D must be GeometryModel3D and not Model3DGroup.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.ShowNormalsProperty">
            <summary>
            ShowNormalsProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelDecoratorVisual3D.OnNormalsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnNormalsPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.NormalsLineThickness">
            <summary>
            Gets or sets the thickness of the lines that show the model normals. Default values is 1.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.NormalsLineThicknessProperty">
            <summary>
            NormalsLineThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.NormalsLineColor">
            <summary>
            Gets or sets the color of the lines that show the normals. Default values is Green.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.NormalsLineColorProperty">
            <summary>
            NormalsLineColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelDecoratorVisual3D.NormalsLineLength">
            <summary>
            Gets or sets the length of the normal lines. When set to NaN (by default) the normals length is calculated from the size of the TargetModel3D.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelDecoratorVisual3D.NormalsLineLengthProperty">
            <summary>
            NormalsLineLengthProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelDecoratorVisual3D.Refresh">
            <summary>
            Recreates the shown lines. Can be called when the TargetModel3D has been moved.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelDecoratorVisual3D.CreateModel">
            <summary>
            CreateModel creates the Model3D objects and sets them to Content property.
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.ModelMoverVisual3D">
            <summary>
            ModelMoverVisual3D is a ModelVisual3D object that shows 3 arrows and 3 planes that can be used by user to move a 3D model with dragging the arrows with the mouse.
            </summary>
            <remarks>
            <para>
            <b>ModelMoverVisual3D</b> is a ModelVisual3D object that shows 3 arrows and 3 planes that can be used by user to move a 3D model with dragging the arrows with the mouse.
            </para>
            <para>
            By default the ModelMoverVisual3D uses shows the arrows in the direction of the standard WPF's axes.
            But you can change that with using a ModelMoverVisual3D constructor that takes 3 axes as parameter and define your own direction of axes - for example:
            </para>
            <example>
            ModelMover = new ModelMoverVisual3D(new Vector3D(-1, 0, 0), new Vector3D(0, -1, 0), new Vector3D(0, 0, -1));
            </example>
            <para>
            You can even define angles that are not aligned with coordinate axes:
            </para>
            <example>
            ModelMover = new ModelMoverVisual3D(new Vector3D(-1, -1, 0), new Vector3D(-1, 1, 0), new Vector3D(0, 0, -1));
            </example>
            <para>
            When you are using <b>Ab3d.DXEngine</b> to show your scene, it is recommended to show ModelMoverVisual3D in a Viewport3D
            that is shown over the DXViewportView (as demonstrated in the ModelMoverOverlaySample sample).
            Note that in this case you cannot use DirectXOverlay as PresentationType because this will prevent showing the Viewport3D overlay.
            </para>
            <para>
            If you need to use DirectXOverlay as PresentationType or prefer to show ModelMoverVisual3D inside selected object
            (as demonstrated in the ModelMoverInsideObjectSample sample), then by default the ModelMoverVisual3D will not work
            because mouse events on UIElement3D objects that are used inside MouseMoverVisual3D will not work.
            </para>
            <para>
            To make MouseMoverVisual3D work inside Ab3d.DXEngin, the MouseMoverVisual3D also support using Ab3d.Utilities.EventManager3D 
            for processing mouse events.
            </para>
            <para>
            To make MouseMoverVisual3D work inside DXEngine, the following code changes need to be done:
            </para>
            <para>
            1) EventManager3D needs to be created and its CustomEventsSourceElement must be set the DXViewportView or a parent Border or some other parent element that has Background property set.
            </para>
            <para>
            2) When ModelMoverVisual3D is created, we need to call the SubscribeWithEventManager3D method on the created ModelMoverVisual3D and pass the EventManager3D as parameter. 
            </para>
            <para>
            3) To allow user to click on arrows that are inside the selected model, we need to exclude the selected model from being processed by EventManager3D. This can be done with calling RegisterExcludedVisual3D on EventManager3D.
            </para>
            <para>
            4) Because we called RegisterExcludedVisual3D, we need to call RemoveExcludedVisual3D after the mouse moving is completed.
            </para>
            <para>
            See the ModelMoverInsideObjectSample sample that comes with Ab3d.DXEngine samples for more information.
            </para>
            </remarks>
        </member>
        <member name="T:Ab3d.Visuals.ModelMoverVisual3D.ModelMovedEventHandler">
            <summary>
            ModelMovedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">ModelMovedEventArgs</param>
        </member>
        <member name="E:Ab3d.Visuals.ModelMoverVisual3D.ModelMoveStarted">
            <summary>
            ModelMoveStarted event is fired when moving of the model is started.
            </summary>
        </member>
        <member name="E:Ab3d.Visuals.ModelMoverVisual3D.ModelMoved">
            <summary>
            ModelMoved event is fired when model is moved. Event handler can get the amount of move by getting the value of the MoveVector3D property.
            </summary>
        </member>
        <member name="E:Ab3d.Visuals.ModelMoverVisual3D.ModelMoveEnded">
            <summary>
            ModelMoveEnded event is fired when moving of the model is stopped.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.MoveVector3D">
            <summary>
            Gets the Vector3D that specifes the amount of move that was performed by the user.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.PositionProperty">
            <summary>
            PositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.Position">
            <summary>
            Gets or sets Point3D that specifies the position of the ModelMover axis origin.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.XAxisColorProperty">
            <summary>
            XAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.XAxisColor">
            <summary>
            Gets or sets the color of X axis.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.YAxisColorProperty">
            <summary>
            YAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.YAxisColor">
            <summary>
            Gets or sets the color of Y axis.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.ZAxisColorProperty">
            <summary>
            ZAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.ZAxisColor">
            <summary>
            Gets or sets the color of Z axis.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.IsXAxisShownProperty">
            <summary>
            IsXAxisShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.IsXAxisShown">
            <summary>
            Gets or sets a Boolean that specifies if the X axis is shown. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.IsYAxisShownProperty">
            <summary>
            IsYAxisShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.IsYAxisShown">
            <summary>
            Gets or sets a Boolean that specifies if the Y axis is shown. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.IsZAxisShownProperty">
            <summary>
            IsXAxisShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.IsZAxisShown">
            <summary>
            Gets or sets a Boolean that specifies if the Z axis is shown. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.AxisLengthProperty">
            <summary>
            AxisLengthProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.AxisLength">
            <summary>
            Gets or sets the length of axes that are shown by ModelMover. Default value is 100.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.AxisRadiusProperty">
            <summary>
            AxisRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.AxisRadius">
            <summary>
            Gets or sets the radius of the axis arrows.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.AxisArrowRadiusProperty">
            <summary>
            AxisArrowRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.AxisArrowRadius">
            <summary>
            Gets or sets the radius of the axis arrows.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.SelectedMaterial">
            <summary>
            Gets or sets a Material that is used when mouse is over the arrow. If set to null, the arrow material is not changed. Default value is Yellow DiffuseMaterial.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.SelectedCursor">
            <summary>
            Gets or sets a Cursor that is shown when mouse is over the arrow. If set to null, cursor is not changed. Default value is Hand.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelMoverVisual3D.ShowMovablePlanesProperty">
            <summary>
            ShowMovablePlanesProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelMoverVisual3D.ShowMovablePlanes">
            <summary>
            Gets or sets boolean that specifies if planes that allow moving object on a plane are visible. Default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelMoverVisual3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.Visuals.ModelMoverVisual3D"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelMoverVisual3D.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.Visuals.ModelMoverVisual3D"/> class.
            </summary>
            <param name="xAxisVector3D">Direction of x axis</param>
            <param name="yAxisVector3D">Direction of y axis</param>
            <param name="zAxisVector3D">Direction of z axis</param>
        </member>
        <member name="M:Ab3d.Visuals.ModelMoverVisual3D.SubscribeWithEventManager3D(Ab3d.Utilities.EventManager3D)">
            <summary>
            SubscribeWithEventManager3D method can be used to use EventManager3D for mouse events processing instead of using UIElement3D for mouse events.
            This can be used when ModelMoverVisual3D is used inside Ab3d.DXEngine that does not support processing events on UIElement3D objects.
            In this case the CustomEventsSourceElement on EventManager3D must be set.
            </summary>
            <param name="eventManager3D">EventManager3D used for event processing</param>
        </member>
        <member name="M:Ab3d.Visuals.ModelMoverVisual3D.OnModelMoveStarted">
            <summary>
            OnModelMoveStarted
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelMoverVisual3D.OnModelMoved(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            OnModelMoved
            </summary>
            <param name="moveVector3D">moveVector3D</param>
        </member>
        <member name="M:Ab3d.Visuals.ModelMoverVisual3D.OnModelMoveEnded">
            <summary>
            OnModelMoveEnded
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.ModelRotatorVisual3D">
            <summary>
            ModelRotatorVisual3D is a ModelVisual3D object that shows 3 circles that can be used by user to rotate a 3D model with dragging the circles with the mouse.
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.ModelRotatorVisual3D.ModelRotatedEventHandler">
            <summary>
            ModelRotatedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">ModelRotatedEventArgs</param>
        </member>
        <member name="E:Ab3d.Visuals.ModelRotatorVisual3D.ModelRotateStarted">
            <summary>
            ModelRotatingStarted event is fired when rotating of the model is started.
            </summary>
        </member>
        <member name="E:Ab3d.Visuals.ModelRotatorVisual3D.ModelRotated">
            <summary>
            ModelRotating event is fired when model is rotated.
            </summary>
        </member>
        <member name="E:Ab3d.Visuals.ModelRotatorVisual3D.ModelRotateEnded">
            <summary>
            ModelMoveEnded event is fired when moving of the model is stopped.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.PositionProperty">
            <summary>
            PositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.Position">
            <summary>
            Gets or sets Point3D that specifies the position of the ModelMover axis origin.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.XAxisRotationCircleColorProperty">
            <summary>
            XAxisRotationCircleColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.XAxisRotationCircleColor">
            <summary>
            Gets or sets the color of rotation circle for X axis.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.YAxisRotationCircleColorProperty">
            <summary>
            YAxisRotationCircleColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.YAxisRotationCircleColor">
            <summary>
            Gets or sets the color of rotation circle Y axis.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.ZAxisRotationCircleColorProperty">
            <summary>
            ZAxisColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.ZAxisRotationCircleColor">
            <summary>
            Gets or sets the color of rotation circle Z axis.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.IsXAxisRotationCircleShownProperty">
            <summary>
            IsXAxisRotationCircleShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.IsXAxisRotationCircleShown">
            <summary>
            Gets or sets a Boolean that specifies if rotation circle for X axis is shown. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.IsYAxisRotationCircleShownProperty">
            <summary>
            IsYAxisRotationCircleShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.IsYAxisRotationCircleShown">
            <summary>
            Gets or sets a Boolean that specifies if rotation circle for Y axis is shown. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.IsZAxisRotationCircleShownProperty">
            <summary>
            IsZAxisRotationCircleShownProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.IsZAxisRotationCircleShown">
            <summary>
            Gets or sets a Boolean that specifies if rotation circle for Z axis is shown. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.InnerRadiusProperty">
            <summary>
            InnerRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.InnerRadius">
            <summary>
            Gets or sets the inner radius of rotation circles. Default value is 30.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ModelRotatorVisual3D.OuterRadiusProperty">
            <summary>
            OuterRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.OuterRadius">
            <summary>
            Gets or sets the outer radius of rotation circles. Default value is 50.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.SelectedMaterial">
            <summary>
            Gets or sets a Material that is used when mouse is over the arrow. If set to null, the arrow material is not changed. Default value is Yellow DiffuseMaterial.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ModelRotatorVisual3D.SelectedCursor">
            <summary>
            Gets or sets a Cursor that is shown when mouse is over the arrow. If set to null, cursor is not changed. Default value is Hand.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelRotatorVisual3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.Visuals.ModelMoverVisual3D"/> class.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ModelRotatorVisual3D.SubscribeWithEventManager3D(Ab3d.Utilities.EventManager3D)">
            <summary>
            SubscribeWithEventManager3D method can be used to use EventManager3D for mouse events processing instead of using UIElement3D for mouse events.
            This can be used when ModelMoverVisual3D is used inside Ab3d.DXEngine that does not support processing events on UIElement3D objects.
            In this case the CustomEventsSourceElement on EventManager3D must be set.
            </summary>
            <param name="eventManager3D">EventManager3D used for event processing</param>
        </member>
        <member name="M:Ab3d.Visuals.ModelRotatorVisual3D.OnRotatingStartedCallback(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            OnRotatingStartedCallback
            </summary>
            <param name="rotationAxis">axis of rotation as Vector3D</param>
        </member>
        <member name="M:Ab3d.Visuals.ModelRotatorVisual3D.OnRotatingCallback(System.Double,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            OnRotatingCallback
            </summary>
            <param name="rotationAngle">double that specifies the current rotation angle</param>
            <param name="rotationAxis">Vector3D that represents the axis of rotation</param>
        </member>
        <member name="M:Ab3d.Visuals.ModelRotatorVisual3D.OnRotatingEndedCallback">
            <summary>
            OnRotatingEndedCallback
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.MultiMaterialBoxVisual3D">
            <summary>
            MultiMaterialBoxVisual3D class is used to create Visual3D that represents a 3D Box where each side of the box can have its own material.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.MultiMaterialBoxVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.CenterPosition">
            <summary>
            Gets or sets the box center position
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.Size">
            <summary>
            Gets or sets the size of the box
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.XCellsCountProperty">
            <summary>
            XCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.XCellsCount">
            <summary>
            Gets or sets the number of cells in X direction
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.YCellsCountProperty">
            <summary>
            YCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.YCellsCount">
            <summary>
            Gets or sets the number of cells in Y direction
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.ZCellsCountProperty">
            <summary>
            ZCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.ZCellsCount">
            <summary>
            Gets or sets the number of cells in Z direction
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.TopMaterialProperty">
            <summary>
            TopMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.TopMaterial">
            <summary>
            Gets or sets the Material of the top side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.BottomMaterialProperty">
            <summary>
            BottomMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.BottomMaterial">
            <summary>
            Gets or sets the Material of the bottom side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.LeftMaterialProperty">
            <summary>
            LeftMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.LeftMaterial">
            <summary>
            Gets or sets the Material of the left side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.RightMaterialProperty">
            <summary>
            RightMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.RightMaterial">
            <summary>
            Gets or sets the Material of the right side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.FrontMaterialProperty">
            <summary>
            FrontMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.FrontMaterial">
            <summary>
            Gets or sets the Material of the front side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.BackMaterialProperty">
            <summary>
            BackMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.BackMaterial">
            <summary>
            Gets or sets the Material of the back side of the box.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.FallbackMaterialProperty">
            <summary>
            FallbackMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.FallbackMaterial">
            <summary>
            Gets or sets the Material that is used when the material for the specified side is not set.
            </summary>
            <remarks>
            <para>
            The <b>MultiMaterialBoxVisual3D</b> defines six material properties: <see cref="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.TopMaterial"/>, <see cref="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.BottomMaterial"/>, <see cref="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.LeftMaterial"/>, <see cref="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.RightMaterial"/>, <see cref="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.FrontMaterial"/> and <see cref="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.BackMaterial"/>. They can be used to specify the material for each side of the box.
            </para>
            <para>
            When more than one side is using the same material and only a few sides have different material, the <b>FallbackMaterial</b> to specify the material that will be used when the specific material for the side is not set.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to create a blue 3D Box with red top and front side.<br/>
            Note: <see cref="T:Ab3d.Common.MaterialTypeConverter"/> is used to simplify defining the materials.
            </para>
            <para>
            The following namespace declaration needs to be added to the root element:
            <c>xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"</c>
            </para>        
            <code lang="xaml">
            &lt;Viewport3D Name="MainViewport"&gt;
                &lt;visuals:MultiMaterialBoxVisual3D CenterPosition="-50 0 0" Size="200 100 50"
                                                  FallbackMaterial="Blue" TopMaterial="Red" FrontMaterial="Red"/&gt;
            &lt;/Viewport3D&gt;
            </code>        
            </example>
        </member>
        <member name="F:Ab3d.Visuals.MultiMaterialBoxVisual3D.IsTwoSidedMaterialProperty">
            <summary>
            IsTwoSidedMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.IsTwoSidedMaterial">
            <summary>
            Gets or sets the Boolean that specifies if the material is set to both sides of each Model3D that define the box. 
            This means that BackMaterial for each side is set to the same value as Material. Default value is false.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.Model">
            <summary>
            Gets the Model3D of this Visual3D
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.TopSideModel">
            <summary>
            Gets the GeometryModel3D for the top side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.BottomSideModel">
            <summary>
            Gets the GeometryModel3D for the bottom side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.LeftSideModel">
            <summary>
            Gets the GeometryModel3D for the left side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.RightSideModel">
            <summary>
            Gets the GeometryModel3D for the right side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.FrontSideModel">
            <summary>
            Gets the GeometryModel3D for the front side of the box.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiMaterialBoxVisual3D.BackSideModel">
            <summary>
            Gets the GeometryModel3D for the back side of the box.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.MultiMaterialBoxVisual3D.SetModel(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Sets the Content of the Visual3D
            </summary>
            <param name="newModel">new Model3D</param>
        </member>
        <member name="M:Ab3d.Visuals.MultiMaterialBoxVisual3D.RefreshMaterial">
            <summary>
            Resets the content's material
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.MultiMaterialBoxVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.MultiPolyLineVisual3D">
            <summary>
            MultiPolyLineVisual3D class is used to create Visual3D that show multiple polylines. This can improve performance compared to creating multiple PolyLineVisual3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiPolyLineVisual3D.PositionsList">
            <summary>
            Gets or sets a list of Point3DCollection that define the polylines.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiPolyLineVisual3D.PositionsListProperty">
            <summary>
            PositionsListProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.MultiPolyLineVisual3D.IsClosed">
            <summary>
            Gets or sets a value that specifies if the MultiPolyLineVisual3D closes all polylines
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.MultiPolyLineVisual3D.IsClosedProperty">
            <summary>
            IsClosedProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.MultiPolyLineVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.ObjModelVisual3D">
            <summary>
            ObjModelVisual3D is a Visual3D class that shows 3D models that are read from obj file specified with Source property.
            </summary>
            <remarks>
            <para>
            ObjModelVisual3D can be used in XAML to show 3D models that are read from obj file.
            </para>
            <para>
            The source of the obj file is specified with <see cref="P:Ab3d.Visuals.ObjModelVisual3D.Source"/> property.
            </para>
            <para>
            The read 3D model is positioned according to the <see cref="P:Ab3d.Visuals.ObjModelVisual3D.Position"/> and <see cref="P:Ab3d.Visuals.ObjModelVisual3D.PositionType"/> properties
            </para>
            <para>
            If the PositionType is set to Center (default), the 3D model will be position so that its center will be at the Position coordinates.
            If the PositionType is set to BottomCenter, the 3D model will be positioned above the Position coordinates.
            </para>
            <para>
            The size of the shown object is controlled by the <see cref="P:Ab3d.Visuals.ObjModelVisual3D.SizeX"/>, <see cref="P:Ab3d.Visuals.ObjModelVisual3D.SizeY"/>, <see cref="P:Ab3d.Visuals.ObjModelVisual3D.SizeZ"/> and <see cref="P:Ab3d.Visuals.ObjModelVisual3D.PreserveScaleAspectRatio"/> properties.
            </para>
            <para>
            By default all the SizeX, SizeY and SizeZ are set to -1. This means that the original size of the object is used. But if the SizeX is set to let's say 100, the object would be scaled so its SizeX would be 100.
            </para>
            <para>
            If PreserveScaleAspectRatio is true (default), than the aspect ratio of the 3D model is preserved. This means that the model is stretched to one side mode than to the other - the scale is evenly set to all the axis. This also means that if all SizeX, SizeY and SizeZ are defined, the object will be scaled so it will not exceed and of the specified sizes. 
            </para>
            <para>
            If PreserveScaleAspectRatio is false, than the aspect ration of the 3D model will not be preserved. In this case the SizeX, SizeY and SizeZ will be applied so the object will be exactly the size of the specified sizes.
            </para>
            </remarks>
            <example>
            <para>
            Before using ObjModelVisual3D the following namespace declaration has to be added to the root xaml element:
            </para>
            <code>
            xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"
            </code>
            <para>
            Now the ObjModelVisual3D can be used in XAML. The following example shown a 3D model from ab3d.obj file. The model's center is positioned at (-250, 0, 0) and its size is set so its SizeX is 80:
            </para>
            <code lang="xaml">
            &lt;visuals:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                     SizeX="80"
                     Position="0 40 0" PositionType="Center"/&gt;
            </code>
            <para>
            The following code shows the same mode, but this time it is custom sized:
            </para>
            <code lang="xaml">
            &lt;visuals:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                     SizeX="50" SizeY="30" SizeZ="40"
                     PreserveScaleAspectRatio="False"
                     Position="0 40 0" PositionType="Center"/&gt;
            </code>
            <para>
            The following code shows how to use ObjModelVisual3D in code behine:
            </para>
            <code>
            var objModelVisual = new Ab3d.Visuals.ObjModelVisual3D()
            {
                Source = new Uri(System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources/myModel.obj"), UriKind.Absolute),
                DefaultMaterial = new DiffuseMaterial(Brushes.Silver),
                Position = new Point3D(0, 0, 0),
                PositionType = Visuals.ObjModelVisual3D.VisualPositionType.BottomCenter,
                SizeX = 100
            };
            
            MainViewport3D.Children.Add(objModelVisual);
            </code>
            </example>
        </member>
        <member name="T:Ab3d.Visuals.ObjModelVisual3D.VisualPositionType">
            <summary>
            VisualPositionType defines the type of Position that is used in ObjModelVisual3D.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.VisualPositionType.Center">
            <summary>
            Objects center is used to position the 3D model.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.VisualPositionType.BottomCenter">
            <summary>
            The 3D models will be placed above the Position coordinates.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.modelTransformGroup">
            <summary>
            Transform3DGroup that is used to scale and position the model
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.modelTranslate">
            <summary>
            TranslateTransform3D that is used to position the model
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.modelScale">
            <summary>
            ScaleTransform3D that is used to scale the model
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ObjModelVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.UsedReaderObj">
            <summary>
            Gets a Ab3d.ReaderObj instance that is used to read the obj file.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.Source">
            <summary>
            Gets or sets the Source of the obj file
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.SourceProperty">
            <summary>
            SourceProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.TexturesPath">
            <summary>
            Gets or sets the path where the textures are located. If null or "" the path of the obj file is used.
            It is also possible to set TexturesPath to url of the textures (http://...) or to the application resources ("pack://application:,,,/XAMLBrowserApplication1;component/models")
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.TexturesPathProperty">
            <summary>
            TexturesPathProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.Position">
            <summary>
            Gets or sets the Position of the read obj model. The type of position is determined by <see cref="P:Ab3d.Visuals.ObjModelVisual3D.PositionType"/> property.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.PositionProperty">
            <summary>
            PositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.PositionType">
            <summary>
            Gets or sets the <see cref="T:Ab3d.Visuals.ObjModelVisual3D.VisualPositionType"/> value that specifies the type of the <see cref="P:Ab3d.Visuals.ObjModelVisual3D.Position"/>
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.PositionTypeProperty">
            <summary>
            PositionTypeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.SizeX">
            <summary>
            Gets or sets the size in of the 3D model in X dimension.
            </summary>
            <remarks>
            <para>
            The default value of SizeX is -1. This means that the original X Size of the object is preserved.
            </para>
            <para>
            How the SizeX is applied to the shown model depends on the <see cref="P:Ab3d.Visuals.ObjModelVisual3D.PreserveScaleAspectRatio"/> property.
            </para>
            <para>
            If it is false, than the x size of the shown object will be the same as the specified SizeX (if -1 than the original object x size is used).
            </para>
            <para>
            If PreserveScaleAspectRatio is true (by default), than the aspect ratio of the 3D model is preserved. This means that the model is stretched to one side mode than to the other - the scale is evenly set to all the axis. This also means that if all SizeX, SizeY and SizeZ are defined, the object will be scaled so it will not exceed and of the specified sizes.
            </para>
            </remarks>
            <example>
            <para>
            The following example shown a 3D model from ab3d.obj file. The model's center is positioned at (-250, 0, 0) and its size is set so its SizeX is 80. Note that by default the PreserveScaleAspectRatio is set to true.
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="80"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            <para>
            The following code shows the same mode, but this time it is custom sized:
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="50" SizeY="30" SizeZ="40"
                               PreserveScaleAspectRatio="False"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            </example>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.SizeXProperty">
            <summary>
            SizeXProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.SizeY">
            <summary>
            Gets or sets the size in of the 3D model in Y dimension.
            </summary>
            <remarks>
            <para>
            The default value of SizeY is -1. This means that the original Y Size of the object is preserved.
            </para>
            <para>
            How the SizeY is applied to the shown model depends on the <see cref="P:Ab3d.Visuals.ObjModelVisual3D.PreserveScaleAspectRatio"/> property.
            </para>
            <para>
            If it is false, than the y size of the shown object will be the same as the specified SizeY (if -1 than the original object y size is used).
            </para>
            <para>
            If PreserveScaleAspectRatio is true (by default), than the aspect ratio of the 3D model is preserved. This means that the model is stretched to one side mode than to the other - the scale is evenly set to all the axis. This also means that if all SizeX, SizeY and SizeZ are defined, the object will be scaled so it will not exceed and of the specified sizes.
            </para>
            </remarks>
            <example>
            <para>
            The following example shown a 3D model from ab3d.obj file. The model's center is positioned at (-250, 0, 0) and its size is set so its SizeX is 80. Note that by default the PreserveScaleAspectRatio is set to true.
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="80"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            <para>
            The following code shows the same mode, but this time it is custom sized:
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="50" SizeY="30" SizeZ="40"
                               PreserveScaleAspectRatio="False"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            </example>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.SizeYProperty">
            <summary>
            SizeYProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.SizeZ">
            <summary>
            Gets or sets the size in of the 3D model in Z dimension.
            </summary>
            <remarks>
            <para>
            The default value of SizeZ is -1. This means that the original Z Size of the object is preserved.
            </para>
            <para>
            How the SizeZ is applied to the shown model depends on the <see cref="P:Ab3d.Visuals.ObjModelVisual3D.PreserveScaleAspectRatio"/> property.
            </para>
            <para>
            If it is false, than the z size of the shown object will be the same as the specified SizeZ (if -1 than the original object z size is used).
            </para>
            <para>
            If PreserveScaleAspectRatio is true (by default), than the aspect ratio of the 3D model is preserved. This means that the model is stretched to one side mode than to the other - the scale is evenly set to all the axis. This also means that if all SizeX, SizeY and SizeZ are defined, the object will be scaled so it will not exceed and of the specified sizes.
            </para>
            </remarks>
            <example>
            <para>
            The following example shown a 3D model from ab3d.obj file. The model's center is positioned at (-250, 0, 0) and its size is set so its SizeX is 80. Note that by default the PreserveScaleAspectRatio is set to true.
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="80"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            <para>
            The following code shows the same mode, but this time it is custom sized:
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="50" SizeY="30" SizeZ="40"
                               PreserveScaleAspectRatio="False"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            </example>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.SizeZProperty">
            <summary>
            SizeZProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.PreserveScaleAspectRatio">
            <summary>
            Gets or sets a Boolean that specifies if the 3D model is scaled so its aspect ratio is preserved (the ratio between width, height and depth of the object).
            </summary>
            <remarks>
            <para>
            The size of the shown object is controlled by the <see cref="P:Ab3d.Visuals.ObjModelVisual3D.SizeX"/>, <see cref="P:Ab3d.Visuals.ObjModelVisual3D.SizeY"/>, <see cref="P:Ab3d.Visuals.ObjModelVisual3D.SizeZ"/> and <see cref="P:Ab3d.Visuals.ObjModelVisual3D.PreserveScaleAspectRatio"/> properties.
            </para>
            <para>
            By default all the SizeX, SizeY and SizeZ are set to -1. This means that the original size of the object is used. But if the SizeX is set to let's say 100, the object would be scaled so its SizeX would be 100.
            </para>
            <para>
            If PreserveScaleAspectRatio is true (default), than the aspect ratio of the 3D model is preserved. This means that the model is stretched to one side mode than to the other - the scale is evenly set to all the axis. This also means that if all SizeX, SizeY and SizeZ are defined, the object will be scaled so it will not exceed and of the specified sizes. 
            </para>
            <para>
            If PreserveScaleAspectRatio is false, than the aspect ration of the 3D model will not be preserved. In this case the SizeX, SizeY and SizeZ will be applied so the object will be exactly the size of the specified sizes.
            </para>
            </remarks>
            <example>
            <para>
            The following example shown a 3D model from ab3d.obj file. The model's center is positioned at (-250, 0, 0) and its size is set so its SizeX is 80. Note that by default the PreserveScaleAspectRatio is set to true.
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="80"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            <para>
            The following code shows the same mode, but this time it is custom sized:
            </para>
            <code lang="xaml">
            &lt;ObjModelVisual3D:ObjModelVisual3D Source="/Resources/ab3d.obj" 
                               SizeX="50" SizeY="30" SizeZ="40"
                               PreserveScaleAspectRatio="False"
                               Position="0 40 0" PositionType="Center"/&gt;
            </code>
            </example>        
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.PreserveScaleAspectRatioProperty">
            <summary>
            PreserveScaleAspectRatioProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.DefaultMaterialProperty">
            <summary>
            DefaultMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.DefaultMaterial">
            <summary>
            Gets or sets the default material that is used when the material is not defined in obj file.
            Default value is a Silver DiffuseMaterial.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.ObjModelVisual3D.DefaultBackMaterialProperty">
            <summary>
            DefaultBackMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.ObjModelVisual3D.DefaultBackMaterial">
            <summary>
            Gets or sets the default material that is used for BackMaterial when the back material is not defined in obj file.
            Default value is null.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ObjModelVisual3D.Reload">
            <summary>
            Forces a reload of the obj file
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ObjModelVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ObjModelVisual3D.SetModelTranslate">
            <summary>
            SetModelTranslate sets the modelTranslate as TranslateTransform3D. It is used to position the model. The method can be overridden to provide custom positioning.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.ObjModelVisual3D.SetModel(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Sets the Content of the Visual3D
            </summary>
            <param name="model">new Model3D</param>
        </member>
        <member name="M:Ab3d.Visuals.ObjModelVisual3D.SetModelScale">
            <summary>
            SetModelScale set the modelScale as ScaleTransform3D. It is used to scale the model. The method can be overridden to provide custom scaling.
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.RectangleVisual3D">
            <summary>
            RectangleVisual3D class is used to create Visual3D that represents a 3D rectangle.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.RectangleVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.RectangleVisual3D.Position">
            <summary>
            Gets or sets the position of the top left point of the rectangle.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.RectangleVisual3D.PositionProperty">
            <summary>
            PositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.RectangleVisual3D.Size">
            <summary>
            Gets or sets the size of the rectangle.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.RectangleVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.RectangleVisual3D.WidthDirection">
            <summary>
            Gets or sets the direction of the width. Default value is x axis vector (1,0,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.RectangleVisual3D.WidthDirectionProperty">
            <summary>
            WidthDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.RectangleVisual3D.HeightDirection">
            <summary>
            Gets or sets the direction of the height. Default value is up vector (0,1,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.RectangleVisual3D.HeightDirectionProperty">
            <summary>
            HeightDirectionProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.RectangleVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
            <returns>Model3D</returns>
        </member>
        <member name="T:Ab3d.Visuals.LightingRigVisual3D">
            <summary>
            LightingRigVisual3D is a ModelVisual3D that contains 3 DirectionalLight and one AmbientLight objects that define the standard lighting with key, fill and back light.
            </summary>
            <remarks>
            <para>
            <b>LightingRigVisual3D</b> is a ModelVisual3D that contains 3 DirectionalLight and one AmbientLight objects that define the standard lighting with key, fill and back light.
            </para>
            <para>
            The <b>key light</b> is the brightest, and provides the main illumination and shadows. This will typically be positioned to match a real light source such as an overhead lamp, a window, or the sun for an outdoor scene.
            </para>
            <para>
            The <b>fill light</b> is dimmer, and usually angled at 90 degrees to the key. This is used to soften the shadows, adding shading and definition to areas that would otherwise be solid black.
            </para>
            <para>
            The <b>back light</b> is positioned behind the character, facing toward the camera. This illuminates only the silhouette edges, helping the character stand out against the background.    
            </para>
            <para>
            The <b>Ambient light</b> adds an slight ambient lighting that illuminates the objects from all directions.
            </para>
            <para>
            With <see cref="P:Ab3d.Visuals.LightingRigVisual3D.KeyLightDirection"/> it is possible to change the direction of the key light. This also changes the direction of other lights accordingly.
            </para>
            <para>
            It is also possible to change the color of each of the light. 
            To make changing color easier, it is possible to use <see cref="M:Ab3d.Visuals.LightingRigVisual3D.GetColorFromBrightness(System.Double)"/> method and create a light color only from a brightness percentage value.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.keyLight">
            <summary>
            Key light is a DirectionalLight that directly illuminates the scene.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.fillLight">
            <summary>
            Fill light is a DirectionalLight that is angled at 90 degrees to the key light. 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.backLight">
            <summary>
            Back light is a DirectionalLight that is directed in the opposite direction as the key light.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.ambientLight">
            <summary>
            Ambient light illuminates the scene from all directions.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.KeyLightDirectionProperty">
            <summary>
            KeyLightDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LightingRigVisual3D.KeyLightDirection">
            <summary>
            Gets or sets the length of the axis lines
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LightingRigVisual3D.ValidateKeyLightDirectionPropertyValue(System.Object)">
            <summary>
            Returns true if value is valid direction for key light.
            </summary>
            <param name="value">value</param>
            <returns>true if value is valid valid direction for key light</returns>
        </member>
        <member name="M:Ab3d.Visuals.LightingRigVisual3D.OnKeyLightDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnKeyLightDirectionPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.KeyLightColorProperty">
            <summary>
            KeyLightColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LightingRigVisual3D.KeyLightColor">
            <summary>
            Gets or sets the color of the key light (default value is White with 92% brightness).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.FillLightColorProperty">
            <summary>
            FillLightColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LightingRigVisual3D.FillLightColor">
            <summary>
            Gets or sets the color of the fill light (default value is White with 60% brightness). 
            Fill light is a DirectionalLight that is angled at 90 degrees to the key light. 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.BackLightColorProperty">
            <summary>
            BackLightColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LightingRigVisual3D.BackLightColor">
            <summary>
            Gets or sets the color of the back light (default value is White with 35% brightness).
            Back light is a DirectionalLight that is directed in the opposite direction as the key light.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LightingRigVisual3D.AmbientLightColorProperty">
            <summary>
            AmbientLightColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LightingRigVisual3D.AmbientLightColor">
            <summary>
            Gets or sets the color of the ambient light (default value is White with 8% brightness).
            Ambient light illuminates the scene from all directions.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LightingRigVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LightingRigVisual3D.SetKeyLightDirection(System.Double,System.Double)">
            <summary>
            Sets the key light direction with using simple heading and attitude values (in degrees).
            </summary>
            <param name="heading">heading in degrees</param>
            <param name="attitude">attitude in degrees</param>
        </member>
        <member name="M:Ab3d.Visuals.LightingRigVisual3D.CreateLights">
            <summary>
            CreateLights creates keyLight, fillLight, backLight and ambientLight protected fields.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LightingRigVisual3D.OnColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnKeyLightDirectionPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Visuals.LightingRigVisual3D.GetColorFromBrightness(System.Double)">
            <summary>
            Returns a color that is defined by brightness - a percentage of used White color. 1 means full White, 0.5 means half white (R = 128, G = 128, B = 128)-
            </summary>
            <param name="brightness">brightness from 0 to 1</param>
            <returns>color that is defined by brightness</returns>
        </member>
        <member name="T:Ab3d.Visuals.TextVisual3D">
            <summary>
            TextVisual3D class is used to create Visual3D that represents a 3D texts created by a series of 3D lines.
            </summary>
            <remarks>
            <para>
            <b>TextVisual3D</b> class is used to create Visual3D that represents a 3D texts created by a series of 3D lines.
            </para>
            <para>
            The 3D text is positioned by its <see cref="P:Ab3d.Visuals.TextVisual3D.Position"/> property. It specifies the top left position of the first character.
            </para>
            <para>
            The direction of the text is defined by <see cref="P:Ab3d.Visuals.TextVisual3D.TextDirection"/> and <see cref="P:Ab3d.Visuals.TextVisual3D.UpDirection"/> properties. 
            <see cref="P:Ab3d.Visuals.TextVisual3D.TextDirection"/> is a Vector3D that defines the direction in which the text is drawn (default value is (1,0,0) - a vector that is pointing in the x axis direction).
            The <see cref="P:Ab3d.Visuals.TextVisual3D.UpDirection"/> defines the text's up direction (default value is (0,1,0) - a vector that is pointing up).
            </para>
            <para>
            The displayed text is defined by the <see cref="P:Ab3d.Visuals.TextVisual3D.Text"/> property.
            It is possible to display also special characters - most of the characters from ASCII 32 (space) to ASCII 254 can be displayed.
            The <b>new line</b> '\n' and <b>tab</b> '\t' characters are also supported. Tab is displayed as 4 spaces.
            </para>
            <para>
            Text appearance is controlled by <see cref="P:Ab3d.Visuals.TextVisual3D.FontSize"/>, <see cref="P:Ab3d.Visuals.TextVisual3D.TextColor"/> and <see cref="P:Ab3d.Visuals.TextVisual3D.LineThickness"/> properties.
            <see cref="P:Ab3d.Visuals.TextVisual3D.FontSize"/> defines the height of the characters (in the <see cref="P:Ab3d.Visuals.TextVisual3D.UpDirection"/>). 
            <see cref="P:Ab3d.Visuals.TextVisual3D.TextColor"/> is used to define the color of the text.
            <see cref="P:Ab3d.Visuals.TextVisual3D.LineThickness"/> specifies the thickness of the used 3D lines. The default value is 1.
            </para>
            </remarks>
            <example>
            <para>
            The following code shows how to display the 3D text.
            </para>
            <para>
            The following namespace declaration needs to be added to the root element:
            <c>xmlns:visuals="clr-namespace:Ab3d.Visuals;assembly=Ab3d.PowerToys"</c>
            </para>
            <code lang="xaml">
            &lt;Viewport3D Name="MainViewport"&gt;
                &lt;visuals:TextVisual3D x:Name="TextVisual1" Position="-150 30 0" 
                                      LineThickness="2" FontSize="30" TextColor="Yellow"
                                      Text="This is a sample 3D text"/&gt;
            &lt;/Viewport3D&gt;
            </code>
            </example>
        </member>
        <member name="M:Ab3d.Visuals.TextVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TextVisual3D.Position">
            <summary>
            Gets or sets the top left 3D position of the first character.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TextVisual3D.PositionProperty">
            <summary>
            PositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TextVisual3D.TextDirectionProperty">
            <summary>
            TextDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TextVisual3D.TextDirection">
            <summary>
            Gets or sets the Vector3D that is pointing in the direction in which the text is drawn. Default value is (1,0,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TextVisual3D.UpDirectionProperty">
            <summary>
            UpDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TextVisual3D.UpDirection">
            <summary>
            Gets or sets the Vector3D that is pointing in the text's up direction. Default value is (0,1,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TextVisual3D.TextProperty">
            <summary>
            TextProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TextVisual3D.Text">
            <summary>
            Gets or sets the text that is displayed with 3D lines.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TextVisual3D.FontSizeProperty">
            <summary>
            FontSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TextVisual3D.FontSize">
            <summary>
            Gets or sets a double that represents a size of the used font.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TextVisual3D.LineThicknessProperty">
            <summary>
            LineThicknessProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TextVisual3D.LineThickness">
            <summary>
            Gets or sets the thickness of the line in screen coordinates.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TextVisual3D.TextColorProperty">
            <summary>
            TextColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TextVisual3D.TextColor">
            <summary>
            Gets or sets the color of the text
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TextVisual3D.OnColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnColorPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Visuals.TextVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.TrapezoidVisual3D">
            <summary>
            TrapezoidVisual3D class is used to create Visual3D that represents a simple 3D Trapezoid.
            </summary>
            <remarks>
            <para>
            <b>TrapezoidVisual3D</b> class is used to create Visual3D that represents a simple 3D Trapezoid.
            </para>
            <para>
            To create a Trapezoid with custom top center position and custom direction, use the <see cref="M:Ab3d.Models.Model3DFactory.CreateTrapezoid(System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Point3D,System.Windows.Size,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Material)"/> method 
            or create an instance of <see cref="T:Ab3d.Meshes.TrapezoidMesh3D"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Visuals.TrapezoidVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TrapezoidVisual3D.BottomCenterPosition">
            <summary>
            Gets or sets the center position of the bottom rectangle
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TrapezoidVisual3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TrapezoidVisual3D.BottomSizeProperty">
            <summary>
            BottomSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TrapezoidVisual3D.BottomSize">
            <summary>
            Gets or sets the 2D size of the bottom rectangle
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TrapezoidVisual3D.TopSizeProperty">
            <summary>
            TopSizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TrapezoidVisual3D.TopSize">
            <summary>
            Gets or sets the 2D size of the bottom rectangle
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TrapezoidVisual3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TrapezoidVisual3D.Height">
            <summary>
            Gets or sets the height of the Trapezoid.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TrapezoidVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.TubeLineVisual3D">
            <summary>
            TubeLineVisual3D class is used to create Visual3D that represents a 3D line from StartPosition to EndPosition created with 3D tube.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TubeLineVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeLineVisual3D.StartPosition">
            <summary>
            Gets or sets line's start position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeLineVisual3D.StartPositionProperty">
            <summary>
            StartPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeLineVisual3D.EndPosition">
            <summary>
            Gets or sets the line's end position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeLineVisual3D.EndPositionProperty">
            <summary>
            EndPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeLineVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeLineVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to create the circular area of the Tube. Default value is 10.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeLineVisual3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeLineVisual3D.Radius">
            <summary>
            Gets or sets the radius of the Tube.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeLineVisual3D.GenerateTextureCoordinates">
            <summary>
            Gets or sets a Boolean that specifies if texture coordinates are generated (created mesh is more complicated in this case). Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeLineVisual3D.GenerateTextureCoordinatesProperty">
            <summary>
            GenerateTextureCoordinatesProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeLineVisual3D.IsStartPositionClosed">
            <summary>
            Gets or sets a Boolean that specifies if the tube is closed at its start position. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeLineVisual3D.IsStartPositionClosedProperty">
            <summary>
            IsStartPositionClosedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeLineVisual3D.IsEndPositionClosed">
            <summary>
            Gets or sets a Boolean that specifies if the tube is closed at its end position. Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeLineVisual3D.IsEndPositionClosedProperty">
            <summary>
            IsEndPositionClosedProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TubeLineVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.TubePathVisual3D">
            <summary>
            TubePathVisual3D class is used to create a Visual3D that represents a series of connected 3D lines created with connected 3D tube models.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TubePathVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubePathVisual3D.PathPositions">
            <summary>
            Gets or sets a Point3DCollection that specifies the path positions.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubePathVisual3D.PathPositionsProperty">
            <summary>
            PathPositionsProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubePathVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubePathVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to create the circular area of the Tube. Default value is 10.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubePathVisual3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubePathVisual3D.Radius">
            <summary>
            Gets or sets the radius of the Tube.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubePathVisual3D.GenerateTextureCoordinates">
            <summary>
            Gets or sets a Boolean that specifies if texture coordinates are generated (created mesh is more complicated in this case). Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubePathVisual3D.GenerateTextureCoordinatesProperty">
            <summary>
            GenerateTextureCoordinatesProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubePathVisual3D.IsTubeClosed">
            <summary>
            Gets or sets a value that specifies if the start and end segment of the TubePathVisual3D are closed so that it is not possible to see inside the tube.
            Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubePathVisual3D.IsTubeClosedProperty">
            <summary>
            IsTubeClosedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubePathVisual3D.IsPathClosed">
            <summary>
            Gets or sets a value that specifies if end position is connected to the start position.
            Default value is false.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubePathVisual3D.IsPathClosedProperty">
            <summary>
            IsPathClosedProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TubePathVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.TubeVisual3D">
            <summary>
            ConeVisual3D class is used to create Visual3D that represents a 3D Cone.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TubeVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeVisual3D.BottomCenterPosition">
            <summary>
            Gets or sets the position of the bottom center of the Tube
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeVisual3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeVisual3D.HeightDirection">
            <summary>
            Gets or sets a Vector3D that specifies the height direction. Default value is up vector (0, 1, 0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeVisual3D.HeightDirectionProperty">
            <summary>
            HeightDirectionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that are used to create the circular area of the Tube. Default value is 20.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeVisual3D.OuterRadiusProperty">
            <summary>
            OuterRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeVisual3D.OuterRadius">
            <summary>
            Gets or sets the outer radius of the Tube.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeVisual3D.InnerRadiusProperty">
            <summary>
            InnerRadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeVisual3D.InnerRadius">
            <summary>
            Gets or sets the inner radius of the Tube.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.TubeVisual3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.TubeVisual3D.Height">
            <summary>
            Gets or sets the height of Tube.
            When Height is set to 0, then only one tube ring is created withouth bottom and top ring.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.TubeVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.WireCrossVisual3D">
            <summary>
            WireCrossVisual3D class is used to create Visual3D that creates three perpendicular 3D lines that are crossing at the specified position.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireCrossVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireCrossVisual3D.Position">
            <summary>
            Gets or sets the position of the lines crossing
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireCrossVisual3D.PositionProperty">
            <summary>
            PositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireCrossVisual3D.LinesLengthProperty">
            <summary>
            LinesLengthProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireCrossVisual3D.LinesLength">
            <summary>
            Gets or sets the length of the lines
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireCrossVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.WireBoxVisual3D">
            <summary>
            WireBoxVisual3D class is used to create Visual3D that represents a 3D box defined by 3D lines.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireBoxVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireBoxVisual3D.CenterPosition">
            <summary>
            Gets or sets the center position of the 3D box used to create the lines
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireBoxVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireBoxVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireBoxVisual3D.Size">
            <summary>
            Gets or sets the size of the 3D box used to create the lines
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireBoxVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.VerticalPlaneVisual3D">
            <summary>
            VerticalPlaneVisual3D class is used to create Visual3D that represents a Vertical 3D Plane - aligned with X and Y axis.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.VerticalPlaneVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.VerticalPlaneVisual3D.CenterPosition">
            <summary>
            Gets or sets the plane center position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.VerticalPlaneVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.VerticalPlaneVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.VerticalPlaneVisual3D.Size">
            <summary>
            Gets or sets the size of the plane 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.VerticalPlaneVisual3D.WidthCellsCountProperty">
            <summary>
            WidthCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.VerticalPlaneVisual3D.WidthCellsCount">
            <summary>
            Gets or sets the cells count in width direction 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.VerticalPlaneVisual3D.HeightCellsCountProperty">
            <summary>
            HeightCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.VerticalPlaneVisual3D.HeightCellsCount">
            <summary>
            Gets or sets the cells count in height direction 
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.VerticalPlaneVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.LineArcVisual3D">
            <summary>
            LineArcVisual3D class is used to create Visual3D that represents a 3D Arc (part of the circle).
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LineArcVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineArcVisual3D.CircleCenterPosition">
            <summary>
            Gets or sets the center position of the circle that defined the arc.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineArcVisual3D.CircleCenterPositionProperty">
            <summary>
            CircleCenterPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineArcVisual3D.CircleNormal">
            <summary>
            Gets or sets the normal vector of the circle that defined the arc (the vector that is perpendicular to the circle).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineArcVisual3D.CircleNormalProperty">
            <summary>
            CircleNormalProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineArcVisual3D.ZeroAngleDirectionProperty">
            <summary>
            ZeroAngleDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineArcVisual3D.ZeroAngleDirection">
            <summary>
            Gets or sets the Vector3D that is pointing from center position to the position on the circle where the arc's angle is zero.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineArcVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineArcVisual3D.Segments">
            <summary>
            Gets or sets the number of lines that are used to define the arc.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineArcVisual3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineArcVisual3D.Radius">
            <summary>
            Gets or sets the radius of the circle that defines the arc.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineArcVisual3D.StartAngleProperty">
            <summary>
            StartAngleProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineArcVisual3D.StartAngle">
            <summary>
            Gets or sets the angle in degrees where the arc begins.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineArcVisual3D.EndAngleProperty">
            <summary>
            EndAngleProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineArcVisual3D.EndAngle">
            <summary>
            Gets or sets the angle in degrees where the arc ends.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LineArcVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.PolyLineVisual3D">
            <summary>
            PolyLineVisual3D class is used to create Visual3D that represents a series of 3D lines that are defined with positions Point3DCollection. The lines are connected with each other.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PolyLineVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PolyLineVisual3D.IsClosed">
            <summary>
            Gets or sets a value that specifies if the PolylineMesh3D closes the lines
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PolyLineVisual3D.IsClosedProperty">
            <summary>
            IsClosedProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PolyLineVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.MultiLineVisual3D">
            <summary>
            MultiLineVisual3D class is used to create Visual3D that represents a series of 3D lines that are defined with positions Point3DCollection. The lines are not connected with each other.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.MultiLineVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.MultiLineVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.LineVisual3D">
            <summary>
            LineVisual3D class is used to create Visual3D that represents a 3D Line.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LineVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineVisual3D.StartPosition">
            <summary>
            Gets or sets line's start position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineVisual3D.StartPositionProperty">
            <summary>
            StartPositionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.LineVisual3D.EndPosition">
            <summary>
            Gets or sets the line's end position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.LineVisual3D.EndPositionProperty">
            <summary>
            EndPositionProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.LineVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.WireframeVisual3D">
            <summary>
            WireframeVisual3D shows the 3D model specified in OriginalModel property as wireframe model. In XAML the OriginalModel can be also specified as content of the WireframeVisual3D element.
            </summary>
            <remarks>
            <para>
            <b>WireframeVisual3D</b> shows the 3D model specified in OriginalModel property as wireframe model. In XAML the OriginalModel can be also specified as content of the WireframeVisual3D element.
            </para>
            <para>
            The Model3D specified as <see cref="P:Ab3d.Visuals.WireframeVisual3D.OriginalModel"/> can be shown in many different ways (as wirframe only, as various combinations of wireframe and solid model or as solid model).
            The type of shown object is set by the <see cref="P:Ab3d.Visuals.WireframeVisual3D.WireframeType"/> property - the possible values are defined in the <see cref="T:Ab3d.Visuals.WireframeVisual3D.WireframeTypes"/> enum.
            </para>
            <para>
            <b>Performance considerations:</b><br/>
            Regenerating wireframe geometry can take long time and therefore it is important to do this as few times as possible.
            </para>
            <para>
            WireframeVisual3D is subscribed to any changed done in the Model3D set to the OriginalModel property.
            When <see cref="P:Ab3d.Visuals.WireframeVisual3D.AutoUpdate"/> is true (by default) any changes to the OriginalModel will regenerate the whole wireframe geometry.
            If you are changing a lot of data on the Model3D (for example changing individual Positions on MeshGeometry3D) then each individual change will regenerate the whole wireframe geometry.
            </para>
            <para>
            Also if you change multiple properties on WireframeVisual3D (for example LineColor and LineThickness), each change will regenerate the whole wirframe geometry.
            </para>    
            <para>
            To prevent that it is possible to set the <see cref="P:Ab3d.Visuals.WireframeVisual3D.AutoUpdate"/> to false and after the changes have been made manually call the <see cref="M:Ab3d.Visuals.WireframeVisual3D.RecreateWireframeModel"/> method.
            </para>
            <para>
            Another option is to call <b>BeginInit()</b> method on WireframeVisual3D, do all the changes and then call <b>EndInit()</b> method. For example:
            </para>
            <example>
            wireframeVisual3D.BeginInit();
            
            wireframeVisual3D.OriginalModel = model3D;
            wireframeVisual3D.LineColor = Colors.White;
            wireframeVisual3D.LineThickness = 3;
            
            meshGeometry3D.Positions[0] += new Vector3D(0, 10, 0);
            meshGeometry3D.Positions[1] += new Vector3D(0, 10, 0);
            
            // wireframe will be updated only once after the following EndInit call (instead of 5 times)
            wireframeVisual3D.EndInit(); 
            </example>
            </remarks>    
        </member>
        <member name="T:Ab3d.Visuals.WireframeVisual3D.WireframeTypes">
            <summary>
            WireframeType enum defines the possible types of showing wireframe model.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.WireframeTypes.None">
            <summary>
            Nothing is shown.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.WireframeTypes.Wireframe">
            <summary>
            Only wireframe of the model is shown.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.WireframeTypes.OriginalSolidModel">
            <summary>
            Only unchanged original model is shown.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.WireframeTypes.WireframeWithOriginalSolidModel">
            <summary>
            Wireframe is shown on top of unchanged original model.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.WireframeTypes.SingleColorSolidModel">
            <summary>
            Only original model with material set to SolidModelColor is shown.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.WireframeTypes.WireframeWithSingleColorSolidModel">
            <summary>
            Wireframe is shown on top of original model with material set to SolidModelColor.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.WireframeTypeProperty">
            <summary>
            WireframeTypeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.WireframeType">
            <summary>
            Gets or sets how wireframe and solid model will be shown with WireframeVisual3D.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.OnWireframeVisualPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnWireframeVisualPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.OriginalModel">
            <summary>
            Gets or sets a Model3D that is used to create wireframe model from. Note that changes to the OriginalModel does not automatically recreate the wireframe model.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.OriginalModelProperty">
            <summary>
            OriginalModelProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.OnOriginalModelPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnOriginalModelPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="e">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.UseModelColor">
            <summary>
            Gets or sets a Boolean that specified if line color is get from the color of model's material (in case of SolidColor DiffuseMaterial) or the specified LineColor is always used.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.UseModelColorProperty">
            <summary>
            UseModelColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.LineThickness">
            <summary>
            Gets or sets the thickness of the line in screen coordinates.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.LineThicknessProperty">
            <summary>
            LineThicknessProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.ValidateLineThicknessPropertyValue(System.Object)">
            <summary>
            Returns true if line thickness is valid double and bigger or equal to 0
            </summary>
            <param name="value">value</param>
            <returns>true if line thickness is valid double and bigger or equal to 0</returns>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.LineColor">
            <summary>
            Gets or sets the color of the line. When UseModelColor is set to true the line color is get from model's material (when this is not possible than LineColor is used).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.LineColorProperty">
            <summary>
            LineColorProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.OnLineColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnLineColorPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.SolidModelColor">
            <summary>
            Gets or sets a Color that represents the color that is used to show solid color when SingleColorSolidModel or WireframeWithSingleColorSolidModel is used for WireframeType.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.SolidModelColorProperty">
            <summary>
            LineColorProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.OnSolidModelColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnSolidModelColorPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.IsEmissiveSolidModelColor">
            <summary>
            Gets or sets Boolean that specifies if EmissiveMaterial is used to show SolidModelColor.
            When true the whole model with the specifed color without any shading. When false the standard shader color is used.
            Default value is true.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireframeVisual3D.IsEmissiveSolidModelColorProperty">
            <summary>
            SelectedModelProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.Content">
            <summary>
            Gets the wireframe model created from OriginalModel. It is not allowed to set this property.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.RemoveDuplicateLines">
            <summary>
            Gets or sets a boolean that specifies if duplicate lines are removed when wireframe model is created. This creates simpler wireframe geometry but can take some time to execute when the wireframe model is created.
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireframeVisual3D.AutoUpdate">
            <summary>
            Gets or sets a Boolean that specifies if the wireframe geometry is automatically regenerated on each change of OriginalModel or other WireframeVisual3D property (for example LineColor). Default value is true.
            </summary>
            <remarks>
            <para>
            <b>AutoUpdate</b> gets or sets a Boolean that specifies if the wireframe geometry is automatically regenerated on each change of OriginalModel or other WireframeVisual3D property (for example LineColor). Default value is true.
            </para>
            <para>
            Regenerating wireframe geometry can take long time and therefore it is important to do this as few times as possible.
            </para>
            <para>
            WireframeVisual3D is subscribed to any changed done in the Model3D set to the OriginalModel property.
            When AutoUpdate is true (by default) any changes to the OriginalModel will regenerate the whole wireframe geometry.
            If you are changing a lot of data on the Model3D (for example changing individual Positions on MeshGeometry3D) then each individual change will regenerate the whole wireframe geometry.
            </para>
            <para>
            Also if you change multiple properties on WireframeVisual3D (for example LineColor and LineThickness), each change will regenerate the whole wirframe geometry.
            </para>
            <para>
            To prevent that it is possible to set the AutoUpdate to false and after the changes have been made manually call the <see cref="M:Ab3d.Visuals.WireframeVisual3D.RecreateWireframeModel"/> method.
            </para>
            <para>
            Another option is to call <b>BeginInit()</b> method on WireframeVisual3D, do all the changes and then call <b>EndInit()</b> method.
            </para>
            </remarks>
        </member>
        <member name="E:Ab3d.Visuals.WireframeVisual3D.ContentChanged">
            <summary>
            Notify that the Content was changed
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.RecreateWireframeModel">
            <summary>
            RecreateWireframeModel creates the wireframe model again.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
            <returns>Model3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            OnVisualParentChanged
            </summary>
            <param name="oldParent">oldParent</param>
        </member>
        <member name="M:Ab3d.Visuals.WireframeVisual3D.OnContentChanged">
            <summary>
            OnContentChanged
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.WireGridVisual3D">
            <summary>
            WireGridVisual3D class is used to create Visual3D that represents a horizontally aligned grid defined by 3D lines.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireGridVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireGridVisual3D.CenterPosition">
            <summary>
            Gets or sets the grid center position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireGridVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireGridVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireGridVisual3D.Size">
            <summary>
            Gets or sets the size of the grid 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireGridVisual3D.WidthCellsCountProperty">
            <summary>
            WidthCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireGridVisual3D.WidthCellsCount">
            <summary>
            Gets or sets the number of cells in the width direction 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireGridVisual3D.HeightCellsCountProperty">
            <summary>
            HeightCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireGridVisual3D.HeightCellsCount">
            <summary>
            Gets or sets the number of cells in the height direction 
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireGridVisual3D.WidthDirection">
            <summary>
            Gets or sets the direction of the width. Default value is x axis vector (1,0,0).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireGridVisual3D.WidthDirectionProperty">
            <summary>
            WidthDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireGridVisual3D.HeightDirection">
            <summary>
            Gets or sets the direction of the height. Default value is z axis vector (0,0,1).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireGridVisual3D.HeightDirectionProperty">
            <summary>
            HeightDirectionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.WireGridVisual3D.IsClosedProperty">
            <summary>
            IsClosedProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.WireGridVisual3D.IsClosed">
            <summary>
            Gets or sets a Boolean that specifies if a rectangle is drawn around wire grid to close the grid. Default value is false.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.WireGridVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.HorizontalPlaneVisual3D">
            <summary>
            HorizontalPlaneVisual3D class is used to create Visual3D that represents a Horizontal Plane 3D - aligned with X and Z axis.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.HorizontalPlaneVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HorizontalPlaneVisual3D.CenterPosition">
            <summary>
            Gets or sets the plane center position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HorizontalPlaneVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HorizontalPlaneVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HorizontalPlaneVisual3D.Size">
            <summary>
            Gets or sets the size of the plane 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HorizontalPlaneVisual3D.WidthCellsCountProperty">
            <summary>
            WidthCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HorizontalPlaneVisual3D.WidthCellsCount">
            <summary>
            Gets or sets the cells count in width direction 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.HorizontalPlaneVisual3D.HeightCellsCountProperty">
            <summary>
            HeightCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.HorizontalPlaneVisual3D.HeightCellsCount">
            <summary>
            Gets or sets the cells count in height direction 
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.HorizontalPlaneVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.CylinderVisual3D">
            <summary>
            CylinderVisual3D class is used to create Visual3D that represents a 3D Cylinder.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.CylinderVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CylinderVisual3D.BottomCenterPosition">
            <summary>
            Gets or sets the center position of the bottom circle that defines the cone 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CylinderVisual3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CylinderVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CylinderVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that define the top and bottom circles of the cylinder 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CylinderVisual3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CylinderVisual3D.Radius">
            <summary>
            Gets or sets the radius of the cylinder 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CylinderVisual3D.HeightProperty">
            <summary>
            HeightProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CylinderVisual3D.Height">
            <summary>
            Gets or sets the height of the cylinder 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.CylinderVisual3D.IsSmoothProperty">
            <summary>
            IsSmoothProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.CylinderVisual3D.IsSmooth">
            <summary>
            Gets or sets a value that specifies if the cylinder is smooth (true) or if the edges on the cylinder are sharp (false) 
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.CylinderVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.PlaneVisual3D">
            <summary>
            PlaneVisual3D class is used to create Visual3D that represents a 3D Plane.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PlaneVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PlaneVisual3D.CenterPosition">
            <summary>
            Gets or sets the plane center position
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PlaneVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PlaneVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PlaneVisual3D.Size">
            <summary>
            Gets or sets the size of the plane 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PlaneVisual3D.NormalProperty">
            <summary>
            NormalProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PlaneVisual3D.Normal">
            <summary>
            Gets or sets the Vector3D that is perpendicular to the plane 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PlaneVisual3D.HeightDirectionProperty">
            <summary>
            HeightDirectionProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PlaneVisual3D.HeightDirection">
            <summary>
            Gets or sets the Vector3D that defines the direction of the height (used in size) 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PlaneVisual3D.WidthCellsCountProperty">
            <summary>
            WidthCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PlaneVisual3D.WidthCellsCount">
            <summary>
            Gets or sets the cells count in width direction 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PlaneVisual3D.HeightCellsCountProperty">
            <summary>
            HeightCellsCountProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PlaneVisual3D.HeightCellsCount">
            <summary>
            Gets or sets the cells count in height direction 
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PlaneVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.PyramidVisual3D">
            <summary>
            PyramidVisual3D class is used to create Visual3D that represents a 3D Pyramid.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PyramidVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PyramidVisual3D.BottomCenterPosition">
            <summary>
            Gets or sets the center position of the bottom rectangle that defines the pyramid
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PyramidVisual3D.BottomCenterPositionProperty">
            <summary>
            BottomCenterPositionProperty
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PyramidVisual3D.SizeProperty">
            <summary>
            SizeProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PyramidVisual3D.Size">
            <summary>
            Gets or sets the size of pyramid 
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PyramidVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.BaseModelVisual3D">
            <summary>
            BaseModelVisual3D is a base abstract for all model Visual3D classes
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="E:Ab3d.Visuals.BaseModelVisual3D.GeometryChanged">
            <summary>
            Notify that the geometry was changed
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.OnGeometryChanged">
            <summary>
            OnGeometryChanged
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseModelVisual3D.MaterialProperty">
            <summary>
            MaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseModelVisual3D.Material">
            <summary>
            Gets or sets the Material of the 3D model
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.BaseModelVisual3D.BackMaterialProperty">
            <summary>
            BackMaterialProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseModelVisual3D.BackMaterial">
            <summary>
            Gets or sets the BackMaterial of the 3D model
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseModelVisual3D.Geometry">
            <summary>
            Gets the Geometry as MeshGeometry3D of this Visual3D
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.UpdateContentIfNotInitializing">
            <summary>
            Updates the content if the Visual3D is not initializing (between BeginInit and EndInit)
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.CreateModel">
            <summary>
            Creates this Model3D
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.SetGeometry(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Sets the Content of the Visual3D
            </summary>
            <param name="geometry">new MeshGeometry3D</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.GetGeometry">
            <summary>
            Gets the MeshGeometry3D that is used for the Content of this Visual3D
            </summary>
            <returns>MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.SetInnerTransform(System.Windows.Media.Media3D.Transform3D)">
            <summary>
            Sets the Transform to the GeometryModel3D used to display this Visual3D.
            </summary>
            <param name="transform">Transform3D</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.RefreshMaterial">
            <summary>
            Resets the Content's material
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseModelVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
        <member name="T:Ab3d.Visuals.SphereVisual3D">
            <summary>
            SphereVisual3D class is used to create Visual3D that represents a 3D Sphere.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.SphereVisual3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.SphereVisual3D.CenterPosition">
            <summary>
            Gets or sets the sphere center position 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.SphereVisual3D.CenterPositionProperty">
            <summary>
            CenterPositionProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.SphereVisual3D.OnCenterPositionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnCenterPositionPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Visuals.SphereVisual3D.SegmentsProperty">
            <summary>
            SegmentsProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.SphereVisual3D.Segments">
            <summary>
            Gets or sets the number of segments that define the sphere 
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.SphereVisual3D.RadiusProperty">
            <summary>
            RadiusProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.SphereVisual3D.Radius">
            <summary>
            Gets or sets the radius of the sphere 
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.SphereVisual3D.OnRadiusPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnSizePropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="F:Ab3d.Visuals.SphereVisual3D.UseCachedMeshGeometry3DProperty">
            <summary>
            UseCachedMeshGeometry3DProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.SphereVisual3D.UseCachedMeshGeometry3D">
            <summary>
            Gets or sets a boolean that specifies if cached MeshGeometry3D is used to create the Model3D.
            In that case the position and radius of the Model3D is specified with with using transformations on the cached mesh.
            If false then a new MeshGeometry3D is created for every BoxVisual3D.
            </summary>
            <remarks>
            <para>
            <b>UseCachedMeshGeometry3D</b> gets or sets a boolean that specifies if cached MeshGeometry3D is used to create the Model3D.
            </para>
            <para>
            When using cached MeshGeometry3D, the position and radius of the Model3D is specified with with using transformations on the cached mesh.
            This can greatly improve performance when using many 3D objects, because the geometry data is shaderd between the objects.
            </para>
            <para>
            If UseCachedMeshGeometry3D is false, than a new MeshGeometry3D is created for each instance of SphereVisual3D and each time the position or radius is changed.
            </para>
            <para>
            Default value is true.
            </para>
            <para>
            NOTE:<br/>
            SphereVisual3D can cached only one instance of MeshGeometry3D.
            Because it is possible to specify the number of segments that are used to create the sphere MeshGeometry3D, SphereVisual3D can use the cached mesh only if it has the same number of segments as the cached mesh.
            SphereVisual3D creates the cached mesh the first time it is used - using the number of segments specified for the first SphereVisual3D.
            If you would like to control which sphere is cached, you can manually call <see cref="M:Ab3d.Visuals.SphereVisual3D.CreateCachedSphereMesh(System.Int32)"/> method to manually create the sphere MeshGeometry3D with the specifed segments count.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.Visuals.SphereVisual3D.OnUseCachedMeshGeometry3DChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnUseCachedMeshGeometry3DChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.SphereVisual3D.FreezeMeshGeometry3D">
            <summary>
            Gets or sets a Boolean that specifes if the Sphere's MeshGeometry3D is frozen.
            This can greatly improve performance when many SphereVisual3D objects are generated.
            It is recommended that this property is set before other properties.
            The default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.SphereVisual3D.CreateCachedSphereMesh(System.Int32)">
            <summary>
            CreateCachedSphereMesh generates the MeshGeometry3D for a sphere with specified segments count that will be used as cached mesh.
            </summary>
            <remarks>
            <para>
            <b>CreateCachedSphereMesh</b> generates the MeshGeometry3D for a sphere with specified segments count that will be used as cached mesh.
            </para>
            <para>
            SphereVisual3D can cached only one instance of MeshGeometry3D.
            Because it is possible to specify the number of segments that are used to create the sphere MeshGeometry3D, SphereVisual3D can use the cached mesh only if it has the same number of segments as the cached mesh.
            SphereVisual3D creates the cached mesh the first time it is used - using the number of segments specified for the first SphereVisual3D.
            If you would like to control which sphere is cached, you can manually call this method to manually create the sphere MeshGeometry3D with the specifed segments count.
            </para>
            </remarks>
            <param name="segmentsCount">number of segments</param>
            <returns>created MeshGeometry3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.SphereVisual3D.RefreshGeometry">
            <summary>
            Recreates the Visual3D geometry
            </summary>
        </member>
    </members>
</doc>
